/**nottypecheckingthisfilebecauseflowdoesn'tplaywellwith*dynamicallyaccessingmethodsonArrayprototype*/import{TriggerOpTypes}from'../../v3'import{def}from'../util/index'constarrayProto=Array.prototypeexportconstarrayMethods=Object.create(arrayProto)constmethodsToPatch=['push','pop','shift','unshift','splice','sort','reverse']/***Interceptmutatingmethodsandemitevents*/methodsToPatch.forEach(function(method){cacheoriginalmethodconstoriginal=arrayProto[method]def(arrayMethods,method,functionmutator(...args){constresult=original.apply(this,args)constob=this.__ob__letinsertedswitch(method){case'push':case'unshift':inserted=argsbreakcase'splice':inserted=args.slice(2)break}if(inserted)ob.observeArray(inserted)notifychangeif(__DEV__){ob.dep.notify({type:TriggerOpTypes.ARRAY_MUTATION,target:this,key:method})}else{ob.dep.notify()}returnresult})})