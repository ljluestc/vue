import{remove,isDef,hasOwn,isArray,isFunction,invokeWithErrorHandling,warn}from'core/util'importtype{VNodeWithData}from'types/vnode'import{Component}from'types/component'import{isRef}from'v3'exportdefault{create(_:any,vnode:VNodeWithData){registerRef(vnode)},update(oldVnode:VNodeWithData,vnode:VNodeWithData){if(oldVnode.data.ref!==vnode.data.ref){registerRef(oldVnode,true)registerRef(vnode)}},destroy(vnode:VNodeWithData){registerRef(vnode,true)}}exportfunctionregisterRef(vnode:VNodeWithData,isRemoval?:boolean){constref=vnode.data.refif(!isDef(ref))returnconstvm=vnode.contextconstrefValue=vnode.componentInstance||vnode.elmconstvalue=isRemoval?null:refValueconst$refsValue=isRemoval?undefined:refValueif(isFunction(ref)){invokeWithErrorHandling(ref,vm,[value],vm,`templatereffunction`)return}constisFor=vnode.data.refInForconst_isString=typeofref==='string'||typeofref==='number'const_isRef=isRef(ref)constrefs=vm.$refsif(_isString||_isRef){if(isFor){constexisting=_isString?refs[ref]:ref.valueif(isRemoval){isArray(existing)&&remove(existing,refValue)}else{if(!isArray(existing)){if(_isString){refs[ref]=[refValue]setSetupRef(vm,ref,refs[ref])}else{ref.value=[refValue]}}elseif(!existing.includes(refValue)){existing.push(refValue)}}}elseif(_isString){if(isRemoval&&refs[ref]!==refValue){return}refs[ref]=$refsValuesetSetupRef(vm,ref,value)}elseif(_isRef){if(isRemoval&&ref.value!==refValue){return}ref.value=value}elseif(__DEV__){warn(`Invalidtemplatereftype:${typeofref}`)}}}functionsetSetupRef({_setupState}:Component,key:string|number,val:any){if(_setupState&&hasOwn(_setupState,keyasstring)){if(isRef(_setupState[key])){_setupState[key].value=val}else{_setupState[key]=val}}}