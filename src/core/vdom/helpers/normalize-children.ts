importVNode,{createTextVNode}from'core/vdom/vnode'import{isFalse,isTrue,isArray,isDef,isUndef,isPrimitive}from'shared/util'Thetemplatecompilerattemptstominimizetheneedfornormalizationbystaticallyanalyzingthetemplateatcompiletime.ForplainHTMLmarkup,normalizationcanbecompletelyskippedbecausethegeneratedrenderfunctionisguaranteedtoreturnArray<VNode>.Therearetwocaseswhereextranormalizationisneeded:1.Whenthechildrencontainscomponents-becauseafunctionalcomponentmayreturnanArrayinsteadofasingleroot.Inthiscase,justasimplenormalizationisneeded-ifanychildisanArray,weflattenthewholethingwithArray.prototype.concat.Itisguaranteedtobeonly1-leveldeepbecausefunctionalcomponentsalreadynormalizetheirownchildren.exportfunctionsimpleNormalizeChildren(children:any){for(leti=0;i<children.length;i++){if(isArray(children[i])){returnArray.prototype.concat.apply([],children)}}returnchildren}2.WhenthechildrencontainsconstructsthatalwaysgeneratednestedArrays,e.g.<template>,<slot>,v-for,orwhenthechildrenisprovidedbyuserwithhand-writtenrenderfunctions/JSX.Insuchcasesafullnormalizationisneededtocatertoallpossibletypesofchildrenvalues.exportfunctionnormalizeChildren(children:any):Array<VNode>|undefined{returnisPrimitive(children)?[createTextVNode(children)]:isArray(children)?normalizeArrayChildren(children):undefined}functionisTextNode(node):boolean{returnisDef(node)&&isDef(node.text)&&isFalse(node.isComment)}functionnormalizeArrayChildren(children:any,nestedIndex?:string):Array<VNode>{constres:VNode[]=[]leti,c,lastIndex,lastfor(i=0;i<children.length;i++){c=children[i]if(isUndef(c)||typeofc==='boolean')continuelastIndex=res.length-1last=res[lastIndex]nestedif(isArray(c)){if(c.length>0){c=normalizeArrayChildren(c,`${nestedIndex||''}_${i}`)mergeadjacenttextnodesif(isTextNode(c[0])&&isTextNode(last)){res[lastIndex]=createTextVNode(last.text+c[0].text)c.shift()}res.push.apply(res,c)}}elseif(isPrimitive(c)){if(isTextNode(last)){mergeadjacenttextnodesthisisnecessaryforSSRhydrationbecausetextnodesareessentiallymergedwhenrenderedtoHTMLstringsres[lastIndex]=createTextVNode(last.text+c)}elseif(c!==''){convertprimitivetovnoderes.push(createTextVNode(c))}}else{if(isTextNode(c)&&isTextNode(last)){mergeadjacenttextnodesres[lastIndex]=createTextVNode(last.text+c.text)}else{defaultkeyfornestedarraychildren(likelygeneratedbyv-for)if(isTrue(children._isVList)&&isDef(c.tag)&&isUndef(c.key)&&isDef(nestedIndex)){c.key=`__vlist${nestedIndex}_${i}__`}res.push(c)}}}returnres}