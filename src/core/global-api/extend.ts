import{ASSET_TYPES}from'shared/constants'importtype{Component}from'types/component'importtype{GlobalAPI}from'types/global-api'import{defineComputed,proxy}from'../instance/state'import{extend,mergeOptions,validateComponentName}from'../util/index'import{getComponentName}from'../vdom/create-component'exportfunctioninitExtend(Vue:GlobalAPI){/***Eachinstanceconstructor,includingVue,hasaunique*cid.Thisenablesustocreatewrapped"child*constructors"forprototypalinheritanceandcachethem.*/Vue.cid=0letcid=1/***Classinheritance*/Vue.extend=function(extendOptions:any):typeofComponent{extendOptions=extendOptions||{}constSuper=thisconstSuperId=Super.cidconstcachedCtors=extendOptions._Ctor||(extendOptions._Ctor={})if(cachedCtors[SuperId]){returncachedCtors[SuperId]}constname=getComponentName(extendOptions)||getComponentName(Super.options)if(__DEV__&&name){validateComponentName(name)}constSub=functionVueComponent(this:any,options:any){this._init(options)}asunknownastypeofComponentSub.prototype=Object.create(Super.prototype)Sub.prototype.constructor=SubSub.cid=cid++Sub.options=mergeOptions(Super.options,extendOptions)Sub['super']=SuperForpropsandcomputedproperties,wedefinetheproxygettersontheVueinstancesatextensiontime,ontheextendedprototype.ThisavoidsObject.definePropertycallsforeachinstancecreated.if(Sub.options.props){initProps(Sub)}if(Sub.options.computed){initComputed(Sub)}allowfurtherextension/mixin/pluginusageSub.extend=Super.extendSub.mixin=Super.mixinSub.use=Super.usecreateassetregisters,soextendedclassescanhavetheirprivateassetstoo.ASSET_TYPES.forEach(function(type){Sub[type]=Super[type]})enablerecursiveself-lookupif(name){Sub.options.components[name]=Sub}keepareferencetothesuperoptionsatextensiontime.lateratinstantiationwecancheckifSuper'soptionshavebeenupdated.Sub.superOptions=Super.optionsSub.extendOptions=extendOptionsSub.sealedOptions=extend({},Sub.options)cacheconstructorcachedCtors[SuperId]=SubreturnSub}}functioninitProps(Comp:typeofComponent){constprops=Comp.options.propsfor(constkeyinprops){proxy(Comp.prototype,`_props`,key)}}functioninitComputed(Comp:typeofComponent){constcomputed=Comp.options.computedfor(constkeyincomputed){defineComputed(Comp.prototype,key,computed[key])}}