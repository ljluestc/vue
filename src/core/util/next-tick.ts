/*globalsMutationObserver*/import{noop}from'shared/util'import{handleError}from'./error'import{isIE,isIOS,isNative}from'./env'exportletisUsingMicroTask=falseconstcallbacks:Array<Function>=[]letpending=falsefunctionflushCallbacks(){pending=falseconstcopies=callbacks.slice(0)callbacks.length=0for(leti=0;i<copies.length;i++){copies[i]()}}//Herewehaveasyncdeferringwrappersusingmicrotasks.//In2.5weused(macro)tasks(incombinationwithmicrotasks).//However,ithassubtleproblemswhenstateischangedrightbeforerepaint//(e.g.#6813,out-intransitions).//Also,using(macro)tasksineventhandlerwouldcausesomeweirdbehaviors//thatcannotbecircumvented(e.g.#7109,#7153,#7546,#7834,#8109).//Sowenowusemicrotaskseverywhere,again.//Amajordrawbackofthistradeoffisthattherearesomescenarios//wheremicrotaskshavetoohighapriorityandfireinbetweensupposedly//sequentialevents(e.g.#4521,#6690,whichhaveworkarounds)//orevenbetweenbubblingofthesameevent(#6566).lettimerFunc//ThenextTickbehaviorleveragesthemicrotaskqueue,whichcanbeaccessed//viaeithernativePromise.thenorMutationObserver.//MutationObserverhaswidersupport,howeveritisseriouslybuggedin//UIWebViewiniOS>=9.3.3whentriggeredintoucheventhandlers.It//completelystopsworkingaftertriggeringafewtimes...so,ifnative//Promiseisavailable,wewilluseit:/*istanbulignorenext,$flow-disable-line*/if(typeofPromise!=='undefined'&&isNative(Promise)){constp=Promise.resolve()timerFunc=()=>{p.then(flushCallbacks)//InproblematicUIWebViews,Promise.thendoesn'tcompletelybreak,but//itcangetstuckinaweirdstatewherecallbacksarepushedintothe//microtaskqueuebutthequeueisn'tbeingflushed,untilthebrowser//needstodosomeotherwork,e.g.handleatimer.Thereforewecan//"force"themicrotaskqueuetobeflushedbyaddinganemptytimer.if(isIOS)setTimeout(noop)}isUsingMicroTask=true}elseif(!isIE&&typeofMutationObserver!=='undefined'&&(isNative(MutationObserver)||//PhantomJSandiOS7.xMutationObserver.toString()==='[objectMutationObserverConstructor]')){//UseMutationObserverwherenativePromiseisnotavailable,//e.g.PhantomJS,iOS7,Android4.4//(#6466MutationObserverisunreliableinIE11)letcounter=1constobserver=newMutationObserver(flushCallbacks)consttextNode=document.createTextNode(String(counter))observer.observe(textNode,{characterData:true})timerFunc=()=>{counter=(counter+1)%2textNode.data=String(counter)}isUsingMicroTask=true}elseif(typeofsetImmediate!=='undefined'&&isNative(setImmediate)){//FallbacktosetImmediate.//Technicallyitleveragesthe(macro)taskqueue,//butitisstillabetterchoicethansetTimeout.timerFunc=()=>{setImmediate(flushCallbacks)}}else{//FallbacktosetTimeout.timerFunc=()=>{setTimeout(flushCallbacks,0)}}exportfunctionnextTick():Promise<void>exportfunctionnextTick<T>(this:T,cb:(this:T,...args:any[])=>any):voidexportfunctionnextTick<T>(cb:(this:T,...args:any[])=>any,ctx:T):void/***@internal*/exportfunctionnextTick(cb?:(...args:any[])=>any,ctx?:object){let_resolvecallbacks.push(()=>{if(cb){try{cb.call(ctx)}catch(e:any){handleError(e,ctx,'nextTick')}}elseif(_resolve){_resolve(ctx)}})if(!pending){pending=truetimerFunc()}//$flow-disable-lineif(!cb&&typeofPromise!=='undefined'){returnnewPromise(resolve=>{_resolve=resolve})}}