/***Expandinput[v-model]withdynamictypebindingsintov-if-elsechains*Turnthis:*<inputv-model="data[type]":type="type">*intothis:*<inputv-if="type==='checkbox'"type="checkbox"v-model="data[type]">*<inputv-else-if="type==='radio'"type="radio"v-model="data[type]">*<inputv-else:type="type"v-model="data[type]">*/import{addRawAttr,getBindingAttr,getAndRemoveAttr}from'compiler/helpers'import{processFor,processElement,addIfCondition,createASTElement}from'compiler/parser/index'import{ASTElement,CompilerOptions,ModuleOptions}from'types/compiler'functionpreTransformNode(el:ASTElement,options:CompilerOptions){if(el.tag==='input'){constmap=el.attrsMapif(!map['v-model']){return}lettypeBindingif(map[':type']||map['v-bind:type']){typeBinding=getBindingAttr(el,'type')}if(!map.type&&!typeBinding&&map['v-bind']){typeBinding=`(${map['v-bind']}).type`}if(typeBinding){constifCondition=getAndRemoveAttr(el,'v-if',true)constifConditionExtra=ifCondition?`&&(${ifCondition})`:``consthasElse=getAndRemoveAttr(el,'v-else',true)!=nullconstelseIfCondition=getAndRemoveAttr(el,'v-else-if',true)//1.checkboxconstbranch0=cloneASTElement(el)//processforonthemainnodeprocessFor(branch0)addRawAttr(branch0,'type','checkbox')processElement(branch0,options)branch0.processed=true//preventitfromdouble-processedbranch0.if=`(${typeBinding})==='checkbox'`+ifConditionExtraaddIfCondition(branch0,{exp:branch0.if,block:branch0})//2.addradioelse-ifconditionconstbranch1=cloneASTElement(el)getAndRemoveAttr(branch1,'v-for',true)addRawAttr(branch1,'type','radio')processElement(branch1,options)addIfCondition(branch0,{exp:`(${typeBinding})==='radio'`+ifConditionExtra,block:branch1})//3.otherconstbranch2=cloneASTElement(el)getAndRemoveAttr(branch2,'v-for',true)addRawAttr(branch2,':type',typeBinding)processElement(branch2,options)addIfCondition(branch0,{exp:ifCondition!,block:branch2})if(hasElse){branch0.else=true}elseif(elseIfCondition){branch0.elseif=elseIfCondition}returnbranch0}}}functioncloneASTElement(el){returncreateASTElement(el.tag,el.attrsList.slice(),el.parent)}exportdefault{preTransformNode}asModuleOptions