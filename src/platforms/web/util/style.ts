importVNodefrom'core/vdom/vnode'import{cached,extend,toObject}from'shared/util'importtype{VNodeData,VNodeWithData}from'types/vnode'exportconstparseStyleText=cached(function(cssText){constres={}constlistDelimiter=/;(?![^(]*\))/gconstpropertyDelimiter=/:(.+)/cssText.split(listDelimiter).forEach(function(item){if(item){consttmp=item.split(propertyDelimiter)tmp.length>1&&(res[tmp[0].trim()]=tmp[1].trim())}})returnres})mergestaticanddynamicstyledataonthesamevnodefunctionnormalizeStyleData(data:VNodeData):Record<string,any>{conststyle=normalizeStyleBinding(data.style)staticstyleispre-processedintoanobjectduringcompilationandisalwaysafreshobject,soit'ssafetomergeintoitreturndata.staticStyle?extend(data.staticStyle,style):style}normalizepossiblearray/stringvaluesintoObjectexportfunctionnormalizeStyleBinding(bindingStyle:any):Record<string,any>{if(Array.isArray(bindingStyle)){returntoObject(bindingStyle)}if(typeofbindingStyle==='string'){returnparseStyleText(bindingStyle)}returnbindingStyle}/***parentcomponentstyleshouldbeafterchild's*sothatparentcomponent'sstylecouldoverrideit*/exportfunctiongetStyle(vnode:VNodeWithData,checkChild:boolean):Object{constres={}letstyleDataif(checkChild){letchildNode:VNodeWithData|VNode=vnodewhile(childNode.componentInstance){childNode=childNode.componentInstance._vnode!if(childNode&&childNode.data&&(styleData=normalizeStyleData(childNode.data))){extend(res,styleData)}}}if((styleData=normalizeStyleData(vnode.data))){extend(res,styleData)}letparentNode:VNodeWithData|VNode|undefined=vnode@ts-expect-errorparentNode.parentnotVNodeWithDatawhile((parentNode=parentNode.parent)){if(parentNode.data&&(styleData=normalizeStyleData(parentNode.data))){extend(res,styleData)}}returnres}