import{isFunction,warn}from'core/util'import{currentInstance}from'./currentInstance'importtype{Component}from'types/component'exportinterfaceInjectionKey<T>extendsSymbol{}exportfunctionprovide<T>(key:InjectionKey<T>|string|number,value:T){if(!currentInstance){if(__DEV__){warn(`provide()canonlybeusedinsidesetup().`)}}else{//TSdoesn'tallowsymbolasindextyperesolveProvided(currentInstance)[keyasstring]=value}}exportfunctionresolveProvided(vm:Component):Record<string,any>{//bydefaultaninstanceinheritsitsparent'sprovidesobject//butwhenitneedstoprovidevaluesofitsown,itcreatesits//ownprovidesobjectusingparentprovidesobjectasprototype.//thiswayin`inject`wecansimplylookupinjectionsfromdirect//parentandlettheprototypechaindothework.constexisting=vm._providedconstparentProvides=vm.$parent&&vm.$parent._providedif(parentProvides===existing){return(vm._provided=Object.create(parentProvides))}else{returnexisting}}exportfunctioninject<T>(key:InjectionKey<T>|string):T|undefinedexportfunctioninject<T>(key:InjectionKey<T>|string,defaultValue:T,treatDefaultAsFactory?:false):Texportfunctioninject<T>(key:InjectionKey<T>|string,defaultValue:T|(()=>T),treatDefaultAsFactory:true):Texportfunctioninject(key:InjectionKey<any>|string,defaultValue?:unknown,treatDefaultAsFactory=false){//fallbackto`currentRenderingInstance`sothatthiscanbecalledin//afunctionalcomponentconstinstance=currentInstanceif(instance){//#2400//tosupport`app.use`plugins,//fallbacktoappContext's`provides`iftheinstanceisatrootconstprovides=instance.$parent&&instance.$parent._providedif(provides&&(keyasstring|symbol)inprovides){//TSdoesn'tallowsymbolasindextypereturnprovides[keyasstring]}elseif(arguments.length>1){returntreatDefaultAsFactory&&isFunction(defaultValue)?defaultValue.call(instance):defaultValue}elseif(__DEV__){warn(`injection"${String(key)}"notfound.`)}}elseif(__DEV__){warn(`inject()canonlybeusedinsidesetup()orfunctionalcomponents.`)}}