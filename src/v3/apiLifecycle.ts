import{DebuggerEvent}from'./debug'import{Component}from'types/component'import{mergeLifecycleHook,warn}from'../core/util'import{currentInstance}from'./currentInstance'functioncreateLifeCycle<Textends(...args:any[])=>any=()=>void>(hookName:string){return(fn:T,target:any=currentInstance)=>{if(!target){__DEV__&&warn(`${formatName(hookName)}iscalledwhenthereisnoactivecomponentinstancetobe`+`associatedwith.`+`LifecycleinjectionAPIscanonlybeusedduringexecutionofsetup().`)return}returninjectHook(target,hookName,fn)}}functionformatName(name:string){if(name==='beforeDestroy'){name='beforeUnmount'}elseif(name==='destroyed'){name='unmounted'}return`on${name[0].toUpperCase()+name.slice(1)}`}functioninjectHook(instance:Component,hookName:string,fn:()=>void){constoptions=instance.$optionsoptions[hookName]=mergeLifecycleHook(options[hookName],fn)}exportconstonBeforeMount=createLifeCycle('beforeMount')exportconstonMounted=createLifeCycle('mounted')exportconstonBeforeUpdate=createLifeCycle('beforeUpdate')exportconstonUpdated=createLifeCycle('updated')exportconstonBeforeUnmount=createLifeCycle('beforeDestroy')exportconstonUnmounted=createLifeCycle('destroyed')exportconstonActivated=createLifeCycle('activated')exportconstonDeactivated=createLifeCycle('deactivated')exportconstonServerPrefetch=createLifeCycle('serverPrefetch')exportconstonRenderTracked=createLifeCycle<(e:DebuggerEvent)=>any>('renderTracked')exportconstonRenderTriggered=createLifeCycle<(e:DebuggerEvent)=>any>('renderTriggered')exporttypeErrorCapturedHook<TError=unknown>=(err:TError,instance:any,info:string)=>boolean|voidconstinjectErrorCapturedHook=createLifeCycle<ErrorCapturedHook<any>>('errorCaptured')exportfunctiononErrorCaptured<TError=Error>(hook:ErrorCapturedHook<TError>,target:any=currentInstance){injectErrorCapturedHook(hook,target)}