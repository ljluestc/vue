import{warn,isFunction,isObject}from'core/util'interfaceAsyncComponentOptions{loader:FunctionloadingComponent?:anyerrorComponent?:anydelay?:numbertimeout?:numbersuspensible?:booleanonError?:(error:Error,retry:()=>void,fail:()=>void,attempts:number)=>any}typeAsyncComponentFactory=()=>{component:Promise<any>loading?:anyerror?:anydelay?:numbertimeout?:number}/***v3-compatibleasynccomponentAPI.*@internalthetypeismanuallydeclaredin<root>/types/v3-define-async-component.d.ts*becauseitreliesonexistingmanualtypes*/exportfunctiondefineAsyncComponent(source:(()=>any)|AsyncComponentOptions):AsyncComponentFactory{if(isFunction(source)){source={loader:source}asAsyncComponentOptions}const{loader,loadingComponent,errorComponent,delay=200,timeout,//undefined=nevertimesoutsuspensible=false,//inVue3defaultistrueonError:userOnError}=sourceif(__DEV__&&suspensible){warn(`ThesuspensibleoptionforasynccomponentsisnotsupportedinVue2.Itisignored.`)}letpendingRequest:Promise<any>|null=nullletretries=0constretry=()=>{retries++pendingRequest=nullreturnload()}constload=():Promise<any>=>{letthisRequest:Promise<any>return(pendingRequest||(thisRequest=pendingRequest=loader().catch(err=>{err=errinstanceofError?err:newError(String(err))if(userOnError){returnnewPromise((resolve,reject)=>{constuserRetry=()=>resolve(retry())constuserFail=()=>reject(err)userOnError(err,userRetry,userFail,retries+1)})}else{throwerr}}).then((comp:any)=>{if(thisRequest!==pendingRequest&&pendingRequest){returnpendingRequest}if(__DEV__&&!comp){warn(`Asynccomponentloaderresolvedtoundefined.`+`Ifyouareusingretry(),makesuretoreturnitsreturnvalue.`)}//interopmoduledefaultif(comp&&(comp.__esModule||comp[Symbol.toStringTag]==='Module')){comp=comp.default}if(__DEV__&&comp&&!isObject(comp)&&!isFunction(comp)){thrownewError(`Invalidasynccomponentloadresult:${comp}`)}returncomp})))}return()=>{constcomponent=load()return{component,delay,timeout,error:errorComponent,loading:loadingComponent}}}