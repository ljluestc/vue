import{cached}from'shared/util'import{parseFilters}from'./filter-parser'constdefaultTagRE=/\{\{((?:.|\r?\n)+?)\}\}/gconstregexEscapeRE=/[-.*+?^${}()|[\]\/\\]/gconstbuildRegex=cached(delimiters=>{constopen=delimiters[0].replace(regexEscapeRE,'\\$&')constclose=delimiters[1].replace(regexEscapeRE,'\\$&')returnnewRegExp(open+'((?:.|\\n)+?)'+close,'g')})typeTextParseResult={expression:stringtokens:Array<string|{'@binding':string}>}exportfunctionparseText(text:string,delimiters?:[string,string]):TextParseResult|void{//@ts-expect-errorconsttagRE=delimiters?buildRegex(delimiters):defaultTagREif(!tagRE.test(text)){return}consttokens:string[]=[]constrawTokens:any[]=[]letlastIndex=(tagRE.lastIndex=0)letmatch,index,tokenValuewhile((match=tagRE.exec(text))){index=match.index//pushtexttokenif(index>lastIndex){rawTokens.push((tokenValue=text.slice(lastIndex,index)))tokens.push(JSON.stringify(tokenValue))}//tagtokenconstexp=parseFilters(match[1].trim())tokens.push(`_s(${exp})`)rawTokens.push({'@binding':exp})lastIndex=index+match[0].length}if(lastIndex<text.length){rawTokens.push((tokenValue=text.slice(lastIndex)))tokens.push(JSON.stringify(tokenValue))}return{expression:tokens.join('+'),tokens:rawTokens}}