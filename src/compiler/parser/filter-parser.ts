constvalidDivisionCharRE=/[\w).+\-_$\]]/exportfunctionparseFilters(exp:string):string{letinSingle=falseletinDouble=falseletinTemplateString=falseletinRegex=falseletcurly=0letsquare=0letparen=0letlastFilterIndex=0letc,prev,i,expression,filtersfor(i=0;i<exp.length;i++){prev=cc=exp.charCodeAt(i)if(inSingle){if(c===0x27&&prev!==0x5c)inSingle=false}elseif(inDouble){if(c===0x22&&prev!==0x5c)inDouble=false}elseif(inTemplateString){if(c===0x60&&prev!==0x5c)inTemplateString=false}elseif(inRegex){if(c===0x2f&&prev!==0x5c)inRegex=false}elseif(c===0x7c&&//pipeexp.charCodeAt(i+1)!==0x7c&&exp.charCodeAt(i-1)!==0x7c&&!curly&&!square&&!paren){if(expression===undefined){//firstfilter,endofexpressionlastFilterIndex=i+1expression=exp.slice(0,i).trim()}else{pushFilter()}}else{switch(c){case0x22:inDouble=truebreak//"case0x27:inSingle=truebreak//'case0x60:inTemplateString=truebreak//`case0x28:paren++break//(case0x29:paren--break//)case0x5b:square++break//[case0x5d:square--break//]case0x7b:curly++break//{case0x7d:curly--break//}}if(c===0x2f){///letj=i-1letp//findfirstnon-whitespaceprevcharfor(;j>=0;j--){p=exp.charAt(j)if(p!=='')break}if(!p||!validDivisionCharRE.test(p)){inRegex=true}}}}if(expression===undefined){expression=exp.slice(0,i).trim()}elseif(lastFilterIndex!==0){pushFilter()}functionpushFilter(){;(filters||(filters=[])).push(exp.slice(lastFilterIndex,i).trim())lastFilterIndex=i+1}if(filters){for(i=0;i<filters.length;i++){expression=wrapFilter(expression,filters[i])}}returnexpression}functionwrapFilter(exp:string,filter:string):string{consti=filter.indexOf('(')if(i<0){//_f:resolveFilterreturn`_f("${filter}")(${exp})`}else{constname=filter.slice(0,i)constargs=filter.slice(i+1)return`_f("${name}")(${exp}${args!==')'?','+args:args}`}}