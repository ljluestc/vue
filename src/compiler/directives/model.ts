import{ASTElement,ASTModifiers}from'types/compiler'/***Cross-platformcodegenerationforcomponentv-model*/exportfunctiongenComponentModel(el:ASTElement,value:string,modifiers:ASTModifiers|null):void{const{number,trim}=modifiers||{}constbaseValueExpression='$$v'letvalueExpression=baseValueExpressionif(trim){valueExpression=`(typeof${baseValueExpression}==='string'`+`?${baseValueExpression}.trim()`+`:${baseValueExpression})`}if(number){valueExpression=`_n(${valueExpression})`}constassignment=genAssignmentCode(value,valueExpression)el.model={value:`(${value})`,expression:JSON.stringify(value),callback:`function(${baseValueExpression}){${assignment}}`}}/***Cross-platformcodegenhelperforgeneratingv-modelvalueassignmentcode.*/exportfunctiongenAssignmentCode(value:string,assignment:string):string{constres=parseModel(value)if(res.key===null){return`${value}=${assignment}`}else{return`$set(${res.exp},${res.key},${assignment})`}}/***Parseav-modelexpressionintoabasepathandafinalkeysegment.*Handlesbothdot-pathandpossiblesquarebrackets.**Possiblecases:**-test*-test[key]*-test[test1[key]]*-test["a"][key]*-xxx.test[a[a].test1[key]]*-test.xxx.a["asa"][test1[key]]**/letlen,str,chr,index,expressionPos,expressionEndPostypeModelParseResult={exp:stringkey:string|null}exportfunctionparseModel(val:string):ModelParseResult{//Fixhttps://github.com/vuejs/vue/pull/7730//allowv-model="obj.val"(trailingwhitespace)val=val.trim()len=val.lengthif(val.indexOf('[')<0||val.lastIndexOf(']')<len-1){index=val.lastIndexOf('.')if(index>-1){return{exp:val.slice(0,index),key:'"'+val.slice(index+1)+'"'}}else{return{exp:val,key:null}}}str=valindex=expressionPos=expressionEndPos=0while(!eof()){chr=next()/*istanbulignoreif*/if(isStringStart(chr)){parseString(chr)}elseif(chr===0x5b){parseBracket(chr)}}return{exp:val.slice(0,expressionPos),key:val.slice(expressionPos+1,expressionEndPos)}}functionnext():number{returnstr.charCodeAt(++index)}functioneof():boolean{returnindex>=len}functionisStringStart(chr:number):boolean{returnchr===0x22||chr===0x27}functionparseBracket(chr:number):void{letinBracket=1expressionPos=indexwhile(!eof()){chr=next()if(isStringStart(chr)){parseString(chr)continue}if(chr===0x5b)inBracket++if(chr===0x5d)inBracket--if(inBracket===0){expressionEndPos=indexbreak}}}functionparseString(chr:number):void{conststringQuote=chrwhile(!eof()){chr=next()if(chr===stringQuote){break}}}