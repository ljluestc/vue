import{ASTElementHandler,ASTElementHandlers}from'types/compiler'constfnExpRE=/^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/constfnInvokeRE=/\([^)]*?\);*$/constsimplePathRE=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$///KeyboardEvent.keyCodealiasesconstkeyCodes:{[key:string]:number|Array<number>}={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]}//KeyboardEvent.keyaliasesconstkeyNames:{[key:string]:string|Array<string>}={//#7880:IE11andEdgeuse`Esc`forEscapekeyname.esc:['Esc','Escape'],tab:'Tab',enter:'Enter',//#9112:IE11uses`Spacebar`forSpacekeyname.space:['','Spacebar'],//#7806:IE11useskeynameswithout`Arrow`prefixforarrowkeys.up:['Up','ArrowUp'],left:['Left','ArrowLeft'],right:['Right','ArrowRight'],down:['Down','ArrowDown'],//#9112:IE11uses`Del`forDeletekeyname.delete:['Backspace','Delete','Del']}//#4868:modifiersthatpreventtheexecutionofthelistener//needtoexplicitlyreturnnullsothatwecandeterminewhethertoremove//thelistenerfor.onceconstgenGuard=condition=>`if(${condition})returnnull;`constmodifierCode:{[key:string]:string}={stop:'$event.stopPropagation();',prevent:'$event.preventDefault();',self:genGuard(`$event.target!==$event.currentTarget`),ctrl:genGuard(`!$event.ctrlKey`),shift:genGuard(`!$event.shiftKey`),alt:genGuard(`!$event.altKey`),meta:genGuard(`!$event.metaKey`),left:genGuard(`'button'in$event&&$event.button!==0`),middle:genGuard(`'button'in$event&&$event.button!==1`),right:genGuard(`'button'in$event&&$event.button!==2`)}exportfunctiongenHandlers(events:ASTElementHandlers,isNative:boolean):string{constprefix=isNative?'nativeOn:':'on:'letstaticHandlers=``letdynamicHandlers=``for(constnameinevents){consthandlerCode=genHandler(events[name])//@ts-expect-errorif(events[name]&&events[name].dynamic){dynamicHandlers+=`${name},${handlerCode},`}else{staticHandlers+=`"${name}":${handlerCode},`}}staticHandlers=`{${staticHandlers.slice(0,-1)}}`if(dynamicHandlers){returnprefix+`_d(${staticHandlers},[${dynamicHandlers.slice(0,-1)}])`}else{returnprefix+staticHandlers}}functiongenHandler(handler:ASTElementHandler|Array<ASTElementHandler>):string{if(!handler){return'function(){}'}if(Array.isArray(handler)){return`[${handler.map(handler=>genHandler(handler)).join(',')}]`}constisMethodPath=simplePathRE.test(handler.value)constisFunctionExpression=fnExpRE.test(handler.value)constisFunctionInvocation=simplePathRE.test(handler.value.replace(fnInvokeRE,''))if(!handler.modifiers){if(isMethodPath||isFunctionExpression){returnhandler.value}return`function($event){${isFunctionInvocation?`return${handler.value}`:handler.value}}`//inlinestatement}else{letcode=''letgenModifierCode=''constkeys:string[]=[]for(constkeyinhandler.modifiers){if(modifierCode[key]){genModifierCode+=modifierCode[key]//left/rightif(keyCodes[key]){keys.push(key)}}elseif(key==='exact'){constmodifiers=handler.modifiersgenModifierCode+=genGuard(['ctrl','shift','alt','meta'].filter(keyModifier=>!modifiers[keyModifier]).map(keyModifier=>`$event.${keyModifier}Key`).join('||'))}else{keys.push(key)}}if(keys.length){code+=genKeyFilter(keys)}//Makesuremodifierslikepreventandstopgetexecutedafterkeyfilteringif(genModifierCode){code+=genModifierCode}consthandlerCode=isMethodPath?`return${handler.value}.apply(null,arguments)`:isFunctionExpression?`return(${handler.value}).apply(null,arguments)`:isFunctionInvocation?`return${handler.value}`:handler.valuereturn`function($event){${code}${handlerCode}}`}}functiongenKeyFilter(keys:Array<string>):string{return(//makesurethekeyfiltersonlyapplytoKeyboardEvents//#9441:can'tuse'keyCode'in$eventbecauseChromeautofillfiresfake//keyeventsthatdonothavekeyCodeproperty...`if(!$event.type.indexOf('key')&&`+`${keys.map(genFilterCode).join('&&')})returnnull;`)}functiongenFilterCode(key:string):string{constkeyVal=parseInt(key,10)if(keyVal){return`$event.keyCode!==${keyVal}`}constkeyCode=keyCodes[key]constkeyName=keyNames[key]return(`_k($event.keyCode,`+`${JSON.stringify(key)},`+`${JSON.stringify(keyCode)},`+`$event.key,`+`${JSON.stringify(keyName)}`+`)`)}