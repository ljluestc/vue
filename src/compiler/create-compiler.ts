import{extend}from'shared/util'import{CompilerOptions,CompiledResult,WarningMessage}from'types/compiler'import{detectErrors}from'./error-detector'import{createCompileToFunctionFn}from'./to-function'exportfunctioncreateCompilerCreator(baseCompile:Function):Function{returnfunctioncreateCompiler(baseOptions:CompilerOptions){functioncompile(template:string,options?:CompilerOptions):CompiledResult{constfinalOptions=Object.create(baseOptions)consterrors:WarningMessage[]=[]consttips:WarningMessage[]=[]letwarn=(msg:WarningMessage,range:{start:number;end:number},tip:string)=>{;(tip?tips:errors).push(msg)}if(options){if(__DEV__&&options.outputSourceRange){//$flow-disable-lineconstleadingSpaceLength=template.match(/^\s*/)![0].lengthwarn=(msg:WarningMessage|string,range:{start:number;end:number},tip:string)=>{constdata:WarningMessage=typeofmsg==='string'?{msg}:msgif(range){if(range.start!=null){data.start=range.start+leadingSpaceLength}if(range.end!=null){data.end=range.end+leadingSpaceLength}};(tip?tips:errors).push(data)}}//mergecustommodulesif(options.modules){finalOptions.modules=(baseOptions.modules||[]).concat(options.modules)}//mergecustomdirectivesif(options.directives){finalOptions.directives=extend(Object.create(baseOptions.directives||null),options.directives)}//copyotheroptionsfor(constkeyinoptions){if(key!=='modules'&&key!=='directives'){finalOptions[key]=options[keyaskeyofCompilerOptions]}}}finalOptions.warn=warnconstcompiled=baseCompile(template.trim(),finalOptions)if(__DEV__){detectErrors(compiled.ast,warn)}compiled.errors=errorscompiled.tips=tipsreturncompiled}return{compile,compileToFunctions:createCompileToFunctionFn(compile)}}}