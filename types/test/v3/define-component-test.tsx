importVue,{VueConstructor}from'../../index'import{Component,defineComponent,PropType,ref,reactive,ComponentPublicInstance}from'../../index'import{describe,test,expectType,expectError,IsUnion}from'../utils'describe('compatwithv2APIs',()=>{constcomp=defineComponent({})Vue.component('foo',comp)functioninstall(app:VueConstructor){app.component('foo',comp)}})describe('withobjectprops',()=>{interfaceExpectedProps{a?:number|undefinedb:stringe?:Functionh:booleanj:undefined|(()=>string|undefined)bb:stringbbb:stringbbbb:string|undefinedbbbbb:string|undefinedcc?:string[]|undefineddd:{n:1}ee?:()=>stringff?:(a:number,b:string)=>{a:boolean}ccc?:string[]|undefinedddd:string[]eee:()=>{a:string}fff:(a:number,b:string)=>{a:boolean}hhh:booleanggg:'foo'|'bar'ffff:(a:number,b:string)=>{a:boolean}iii?:(()=>string)|(()=>number)jjj:((arg1:string)=>string)|((arg1:string,arg2:string)=>string)kkk?:anyvalidated?:stringdate?:Datel?:Datell?:Date|numberlll?:string|number}typeGT=string&{__brand:unknown}constprops={a:Number,requiredshouldmakepropertynon-voidb:{type:String,required:trueastrue},e:Function,h:Boolean,j:FunctionasPropType<undefined|(()=>string|undefined)>,defaultvalueshouldinfertypeandmakeitnon-voidbb:{default:'hello'},bbb:{Note:defaultfunctionvaluerequiresarrowsyntax+explicitannotationdefault:(props:any)=>(props.bbasstring)||'foo'},bbbb:{type:String,default:undefined},bbbbb:{type:String,default:()=>undefined},explicittypecastingcc:ArrayasPropType<string[]>,required+typecastingdd:{type:ObjectasPropType<{n:1}>,required:trueastrue},returntypeee:FunctionasPropType<()=>string>,arguments+objectreturnff:FunctionasPropType<(a:number,b:string)=>{a:boolean}>,explicittypecastingwithconstructorccc:Arrayas()=>string[],required+constructortypecastingddd:{type:Arrayas()=>string[],required:trueastrue},required+objectreturneee:{type:FunctionasPropType<()=>{a:string}>,required:trueastrue},required+arguments+objectreturnfff:{type:FunctionasPropType<(a:number,b:string)=>{a:boolean}>,required:trueastrue},hhh:{type:Boolean,required:trueastrue},default+typecastingggg:{type:StringasPropType<'foo'|'bar'>,default:'foo'},default+functionffff:{type:FunctionasPropType<(a:number,b:string)=>{a:boolean}>,default:(a:number,b:string)=>({a:a>+b})},union+functionwithdifferentreturntypesiii:FunctionasPropType<(()=>string)|(()=>number)>,union+functionwithdifferentargs&samereturntypejjj:{type:FunctionasPropType<((arg1:string)=>string)|((arg1:string,arg2:string)=>string)>,required:trueastrue},kkk:null,validated:{type:String,validatorrequiresexplicitannotationvalidator:(val:unknown)=>val!==''},date:Date,l:[Date],ll:[Date,Number],lll:[String,Number]}constMyComponent=defineComponent({props,setup(props){typeassertion.Seehttps:github.com/SamVerschueren/tsdexpectType<ExpectedProps['a']>(props.a)expectType<ExpectedProps['b']>(props.b)expectType<ExpectedProps['e']>(props.e)expectType<ExpectedProps['h']>(props.h)expectType<ExpectedProps['j']>(props.j)expectType<ExpectedProps['bb']>(props.bb)expectType<ExpectedProps['bbb']>(props.bbb)expectType<ExpectedProps['bbbb']>(props.bbbb)expectType<ExpectedProps['bbbbb']>(props.bbbbb)expectType<ExpectedProps['cc']>(props.cc)expectType<ExpectedProps['dd']>(props.dd)expectType<ExpectedProps['ee']>(props.ee)expectType<ExpectedProps['ff']>(props.ff)expectType<ExpectedProps['ccc']>(props.ccc)expectType<ExpectedProps['ddd']>(props.ddd)expectType<ExpectedProps['eee']>(props.eee)expectType<ExpectedProps['fff']>(props.fff)expectType<ExpectedProps['hhh']>(props.hhh)expectType<ExpectedProps['ggg']>(props.ggg)expectType<ExpectedProps['ffff']>(props.ffff)if(typeofprops.iii!=='function'){expectType<undefined>(props.iii)}expectType<ExpectedProps['iii']>(props.iii)expectType<IsUnion<typeofprops.jjj>>(true)expectType<ExpectedProps['jjj']>(props.jjj)expectType<ExpectedProps['kkk']>(props.kkk)expectType<ExpectedProps['validated']>(props.validated)expectType<ExpectedProps['date']>(props.date)expectType<ExpectedProps['l']>(props.l)expectType<ExpectedProps['ll']>(props.ll)expectType<ExpectedProps['lll']>(props.lll)@ts-expect-errorpropsshouldbereadonlyexpectError((props.a=1))setupcontextreturn{c:ref(1),d:{e:ref('hi')},f:reactive({g:ref('hello'asGT)})}},provide(){return{}},render(){constprops=this.$propsexpectType<ExpectedProps['a']>(props.a)expectType<ExpectedProps['b']>(props.b)expectType<ExpectedProps['e']>(props.e)expectType<ExpectedProps['h']>(props.h)expectType<ExpectedProps['bb']>(props.bb)expectType<ExpectedProps['cc']>(props.cc)expectType<ExpectedProps['dd']>(props.dd)expectType<ExpectedProps['ee']>(props.ee)expectType<ExpectedProps['ff']>(props.ff)expectType<ExpectedProps['ccc']>(props.ccc)expectType<ExpectedProps['ddd']>(props.ddd)expectType<ExpectedProps['eee']>(props.eee)expectType<ExpectedProps['fff']>(props.fff)expectType<ExpectedProps['hhh']>(props.hhh)expectType<ExpectedProps['ggg']>(props.ggg)if(typeofprops.iii!=='function'){expectType<undefined>(props.iii)}expectType<ExpectedProps['iii']>(props.iii)expectType<IsUnion<typeofprops.jjj>>(true)expectType<ExpectedProps['jjj']>(props.jjj)expectType<ExpectedProps['kkk']>(props.kkk)@ts-expect-errorpropsshouldbereadonlyexpectError((props.a=1))shouldalsoexposedeclaredpropson`this`expectType<ExpectedProps['a']>(this.a)expectType<ExpectedProps['b']>(this.b)expectType<ExpectedProps['e']>(this.e)expectType<ExpectedProps['h']>(this.h)expectType<ExpectedProps['bb']>(this.bb)expectType<ExpectedProps['cc']>(this.cc)expectType<ExpectedProps['dd']>(this.dd)expectType<ExpectedProps['ee']>(this.ee)expectType<ExpectedProps['ff']>(this.ff)expectType<ExpectedProps['ccc']>(this.ccc)expectType<ExpectedProps['ddd']>(this.ddd)expectType<ExpectedProps['eee']>(this.eee)expectType<ExpectedProps['fff']>(this.fff)expectType<ExpectedProps['hhh']>(this.hhh)expectType<ExpectedProps['ggg']>(this.ggg)if(typeofthis.iii!=='function'){expectType<undefined>(this.iii)}expectType<ExpectedProps['iii']>(this.iii)const{jjj}=thisexpectType<IsUnion<typeofjjj>>(true)expectType<ExpectedProps['jjj']>(this.jjj)expectType<ExpectedProps['kkk']>(this.kkk)@ts-expect-errorpropson`this`shouldbereadonlyexpectError((this.a=1))assertsetupcontextunwrappingexpectType<number>(this.c)expectType<string>(this.d.e.value)expectType<GT>(this.f.g)setupcontextpropertiesshouldbemutablethis.c=2returnnull}})expectType<Component>(MyComponent)TestTSXexpectType<JSX.Element>(<MyComponenta={1}b="b"bb="bb"e={()=>{}}cc={['cc']}dd={{n:1}}ee={()=>'ee'}ccc={['ccc']}ddd={['ddd']}eee={()=>({a:'eee'})}fff={(a,b)=>({a:a>+b})}hhh={false}ggg="foo"jjj={()=>''}shouldallowclass/styleasattrsclass="bar"style={{color:'red'}}shouldallowkeykey={'foo'}shouldallowrefref={'foo'}/>)@ts-expect-errormissingrequiredpropsexpectError(<MyComponent/>)expectError(@ts-expect-errorwrongproptypes<MyComponenta={'wrongtype'}b="foo"dd={{n:1}}ddd={['foo']}/>)@ts-expect-errorwrongproptypesexpectError(<MyComponentggg="baz"/>)@ts-expect-errorexpectError(<MyComponentb="foo"dd={{n:'string'}}ddd={['foo']}/>)})describe('typeinferencew/optionalpropsdeclaration',()=>{constMyComponent=defineComponent<{a:string[];msg:string}>({setup(props){expectType<string>(props.msg)expectType<string[]>(props.a)return{b:1}}})expectType<JSX.Element>(<MyComponentmsg="1"a={['1']}/>)@ts-expect-errorexpectError(<MyComponent/>)@ts-expect-errorexpectError(<MyComponentmsg="1"/>)})describe('typeinferencew/directsetupfunction',()=>{constMyComponent=defineComponent((_props:{msg:string})=>{})expectType<JSX.Element>(<MyComponentmsg="foo"/>)@ts-expect-errorexpectError(<MyComponent/>)expectError(<MyComponentmsg="1"/>)})describe('typeinferencew/arraypropsdeclaration',()=>{constMyComponent=defineComponent({props:['a','b'],setup(props){@ts-expect-errorpropsshouldbereadonlyexpectError((props.a=1))expectType<any>(props.a)expectType<any>(props.b)return{c:1}},render(){expectType<any>(this.$props.a)expectType<any>(this.$props.b)@ts-expect-errorexpectError((this.$props.a=1))expectType<any>(this.a)expectType<any>(this.b)expectType<number>(this.c)}})expectType<JSX.Element>(<MyComponenta={[1,2]}b="b"/>)@ts-expect-errorexpectError(<MyComponentother="other"/>)})describe('typeinferencew/optionsAPI',()=>{defineComponent({props:{a:Number},setup(){return{b:123}},data(){Limitation:wecannotexposethereturnresultofsetup()on`this`hereindata()-somehowthatwouldmessuptheinferenceexpectType<number|undefined>(this.a)return{c:this.a||123,someRef:ref(0)}},computed:{d(){expectType<number>(this.b)returnthis.b+1},e:{get(){expectType<number>(this.b)expectType<number>(this.d)returnthis.b+this.d},set(v:number){expectType<number>(this.b)expectType<number>(this.d)expectType<number>(v)}}},watch:{a(){expectType<number>(this.b)this.b+1}},created(){propsexpectType<number|undefined>(this.a)returnedfromsetup()expectType<number>(this.b)returnedfromdata()expectType<number>(this.c)computedexpectType<number>(this.d)computedget/setexpectType<number>(this.e)expectType<number>(this.someRef)},methods:{doSomething(){propsexpectType<number|undefined>(this.a)returnedfromsetup()expectType<number>(this.b)returnedfromdata()expectType<number>(this.c)computedexpectType<number>(this.d)computedget/setexpectType<number>(this.e)},returnSomething(){returnthis.a}},render(){propsexpectType<number|undefined>(this.a)returnedfromsetup()expectType<number>(this.b)returnedfromdata()expectType<number>(this.c)computedexpectType<number>(this.d)computedget/setexpectType<number>(this.e)methodexpectType<()=>number|undefined>(this.returnSomething)}})})describe('withmixins',()=>{constMixinA=defineComponent({emits:['bar'],props:{aP1:{type:String,default:'aP1'},aP2:Boolean},data(){return{a:1}}})constMixinB=defineComponent({props:['bP1','bP2'],data(){return{b:2}}})constMixinC=defineComponent({data(){return{c:3}}})constMixinD=defineComponent({mixins:[MixinA],data(){@ts-expect-errorcomputedarenotavailableondata()expectError<number>(this.dC1)@ts-expect-errorcomputedarenotavailableondata()expectError<string>(this.dC2)return{d:4}},setup(props){expectType<string>(props.aP1)},computed:{dC1(){returnthis.d+this.a},dC2(){returnthis.aP1+'dC2'}}})constMyComponent=defineComponent({mixins:[MixinA,MixinB,MixinC,MixinD],emits:['click'],props:{requiredshouldmakepropertynon-voidz:{type:String,required:true}},data(vm){expectType<number>(vm.a)expectType<number>(vm.b)expectType<number>(vm.c)expectType<number>(vm.d)shouldalsoexposedeclaredpropson`this`expectType<number>(this.a)expectType<string>(this.aP1)expectType<boolean|undefined>(this.aP2)expectType<number>(this.b)expectType<any>(this.bP1)expectType<number>(this.c)expectType<number>(this.d)return{}},setup(props){expectType<string>(props.z)propsexpectType<((...args:any[])=>any)|undefined>(props.onClick)fromBaseexpectType<((...args:any[])=>any)|undefined>(props.onBar)expectType<string>(props.aP1)expectType<boolean|undefined>(props.aP2)expectType<any>(props.bP1)expectType<any>(props.bP2)expectType<string>(props.z)},render(){constprops=this.$propspropsexpectType<((...args:any[])=>any)|undefined>(props.onClick)fromBaseexpectType<((...args:any[])=>any)|undefined>(props.onBar)expectType<string>(props.aP1)expectType<boolean|undefined>(props.aP2)expectType<any>(props.bP1)expectType<any>(props.bP2)expectType<string>(props.z)constdata=this.$dataexpectType<number>(data.a)expectType<number>(data.b)expectType<number>(data.c)expectType<number>(data.d)shouldalsoexposedeclaredpropson`this`expectType<number>(this.a)expectType<string>(this.aP1)expectType<boolean|undefined>(this.aP2)expectType<number>(this.b)expectType<any>(this.bP1)expectType<number>(this.c)expectType<number>(this.d)expectType<number>(this.dC1)expectType<string>(this.dC2)propsshouldbereadonly@ts-expect-errorexpectError((this.aP1='new'))@ts-expect-errorexpectError((this.z=1))propson`this`shouldbereadonly@ts-expect-errorexpectError((this.bP1=1))stringvaluecannotassignedtonumbertypevalue@ts-expect-errorexpectError((this.c='1'))setupcontextpropertiesshouldbemutablethis.d=5returnnull}})TestTSXexpectType<JSX.Element>(<MyComponentaP1={'aP'}aP2bP1={1}bP2={[1,2]}z={'z'}/>)missingrequiredprops@ts-expect-errorexpectError(<MyComponent/>)wrongproptypes@ts-expect-errorexpectError(<MyComponentaP1="ap"aP2={'wrongtype'}bP1="b"z={'z'}/>)@ts-expect-errorexpectError(<MyComponentaP1={1}bP2={[1]}/>)})describe('withextends',()=>{constBase=defineComponent({props:{aP1:Boolean,aP2:{type:Number,default:2}},data(){return{a:1}},computed:{c():number{returnthis.aP2+this.a}}})constMyComponent=defineComponent({extends:Base,props:{requiredshouldmakepropertynon-voidz:{type:String,required:true}},render(){constprops=this.$propspropsexpectType<boolean|undefined>(props.aP1)expectType<number>(props.aP2)expectType<string>(props.z)constdata=this.$dataexpectType<number>(data.a)shouldalsoexposedeclaredpropson`this`expectType<number>(this.a)expectType<boolean|undefined>(this.aP1)expectType<number>(this.aP2)setupcontextpropertiesshouldbemutablethis.a=5returnnull}})TestTSXexpectType<JSX.Element>(<MyComponentaP2={3}aP1z={'z'}/>)missingrequiredprops@ts-expect-errorexpectError(<MyComponent/>)wrongproptypes@ts-expect-errorexpectError(<MyComponentaP2={'wrongtype'}z={'z'}/>)@ts-expect-errorexpectError(<MyComponentaP1={3}/>)})describe('extendswithmixins',()=>{constMixin=defineComponent({emits:['bar'],props:{mP1:{type:String,default:'mP1'},mP2:Boolean,mP3:{type:Boolean,required:true}},data(){return{a:1}}})constBase=defineComponent({emits:['foo'],props:{p1:Boolean,p2:{type:Number,default:2},p3:{type:Boolean,required:true}},data(){return{b:2}},computed:{c():number{returnthis.p2+this.b}}})constMyComponent=defineComponent({extends:Base,mixins:[Mixin],emits:['click'],props:{requiredshouldmakepropertynon-voidz:{type:String,required:true}},render(){constprops=this.$propspropsexpectType<((...args:any[])=>any)|undefined>(props.onClick)fromMixinexpectType<((...args:any[])=>any)|undefined>(props.onBar)fromBaseexpectType<((...args:any[])=>any)|undefined>(props.onFoo)expectType<boolean|undefined>(props.p1)expectType<number>(props.p2)expectType<string>(props.z)expectType<string>(props.mP1)expectType<boolean|undefined>(props.mP2)constdata=this.$dataexpectType<number>(data.a)expectType<number>(data.b)shouldalsoexposedeclaredpropson`this`expectType<number>(this.a)expectType<number>(this.b)expectType<boolean|undefined>(this.p1)expectType<number>(this.p2)expectType<string>(this.mP1)expectType<boolean|undefined>(this.mP2)setupcontextpropertiesshouldbemutablethis.a=5returnnull}})TestTSXexpectType<JSX.Element>(<MyComponentmP1="p1"mP2mP3p1p2={1}p3z={'z'}/>)mP1,mP2,p1,andp2havedefaultvalue.thesearenotrequiredexpectType<JSX.Element>(<MyComponentmP3p3z={'z'}/>)missingrequiredprops@ts-expect-errorexpectError(<MyComponentmP3p3/*z='z'*>)missingrequiredpropsfrommixin@ts-expect-errorexpectError(<MyComponent/*mP3*/p3z="z"/>)missingrequiredpropsfromextends@ts-expect-errorexpectError(<MyComponentmP3/*p3*/z="z"/>)wrongproptypes@ts-expect-errorexpectError(<MyComponentp2={'wrongtype'}z={'z'}/>)@ts-expect-errorexpectError(<MyComponentmP1={3}/>)#3468constCompWithD=defineComponent({data(){return{foo:1}}})constCompWithC=defineComponent({computed:{foo(){return1}}})constCompWithM=defineComponent({methods:{foo(){}}})constCompEmpty=defineComponent({})defineComponent({mixins:[CompWithD,CompEmpty],mounted(){expectType<number>(this.foo)}})defineComponent({mixins:[CompWithC,CompEmpty],mounted(){expectType<number>(this.foo)}})defineComponent({mixins:[CompWithM,CompEmpty],mounted(){expectType<()=>void>(this.foo)}})})describe('defineComponent',()=>{test('shouldacceptcomponentsdefinedwithdefineComponent',()=>{constcomp=defineComponent({})defineComponent({components:{comp}})})})describe('emits',()=>{Note:forTSXinference,ideallywewanttomapemitstoonXXXprops,butthatrequirestype-levelstringconstantconcatenationassuggestedinhttps:github.com/Microsoft/TypeScript/issues/12754TheworkaroundforTSXusersisinsteadofusingemits,declareonXXXpropsandcalltheminstead.Since`v-on:click`compilestoan`onClick`prop,thiswouldalsosupportotherusersconsumingthecomponentintemplateswith`v-on`listeners.withobjectemitsdefineComponent({emits:{click:(n:number)=>typeofn==='number',input:(b:string)=>b.length>1},setup(props,{emit}){expectType<((n:number)=>boolean)|undefined>(props.onClick)expectType<((b:string)=>boolean)|undefined>(props.onInput)emit('click',1)emit('input','foo')@ts-expect-errorexpectError(emit('nope'))@ts-expect-errorexpectError(emit('click'))@ts-expect-errorexpectError(emit('click','foo'))@ts-expect-errorexpectError(emit('input'))@ts-expect-errorexpectError(emit('input',1))},created(){this.$emit('click',1)this.$emit('input','foo')@ts-expect-errorexpectError(this.$emit('nope'))@ts-expect-errorexpectError(this.$emit('click'))@ts-expect-errorexpectError(this.$emit('click','foo'))@ts-expect-errorexpectError(this.$emit('input'))@ts-expect-errorexpectError(this.$emit('input',1))},mounted(){#3599this.$nextTick(function(){thisshouldbeboundtothisinstancethis.$emit('click',1)this.$emit('input','foo')@ts-expect-errorexpectError(this.$emit('nope'))@ts-expect-errorexpectError(this.$emit('click'))@ts-expect-errorexpectError(this.$emit('click','foo'))@ts-expect-errorexpectError(this.$emit('input'))@ts-expect-errorexpectError(this.$emit('input',1))})}})witharrayemitsdefineComponent({emits:['foo','bar'],setup(props,{emit}){expectType<((...args:any[])=>any)|undefined>(props.onFoo)expectType<((...args:any[])=>any)|undefined>(props.onBar)emit('foo')emit('foo',123)emit('bar')@ts-expect-errorexpectError(emit('nope'))},created(){this.$emit('foo')this.$emit('foo',123)this.$emit('bar')@ts-expect-errorexpectError(this.$emit('nope'))}})withtsxconstComponent=defineComponent({emits:{click:(n:number)=>typeofn==='number'},setup(props,{emit}){expectType<((n:number)=>any)|undefined>(props.onClick)emit('click',1)@ts-expect-errorexpectError(emit('click'))@ts-expect-errorexpectError(emit('click','foo'))}})defineComponent({render(){return(<ComponentonClick={(n:number)=>{returnn+1}}/>)}})withoutemitsdefineComponent({setup(props,{emit}){emit('test',1)emit('test')}})emitshouldbevalidwhenComponentPublicInstanceisused.constinstance={}asComponentPublicInstanceinstance.$emit('test',1)instance.$emit('test')`this`shouldbevoidinsideofemitsvalidatorsdefineComponent({props:['bar'],emits:{foo():boolean{@ts-expect-errorreturnthis.bar===3}}})})describe('componentOptionssetupshouldbe`SetupContext`',()=>{expectType<ComponentOptions['setup']>({}as(props:Record<string,any>,ctx:SetupContext)=>any)})describe('extractinstancetype',()=>{constBase=defineComponent({props:{baseA:{type:Number,default:1}}})constMixinA=defineComponent({props:{mA:{type:String,default:''}}})constCompA=defineComponent({extends:Base,mixins:[MixinA],props:{a:{type:Boolean,default:false},b:{type:String,required:true},c:Number}})constcompA={}asInstanceType<typeofCompA>expectType<boolean>(compA.a)expectType<string>(compA.b)expectType<number|undefined>(compA.c)mixinsexpectType<string>(compA.mA)extendsexpectType<number>(compA.baseA)@ts-expect-errorexpectError((compA.a=true))@ts-expect-errorexpectError((compA.b='foo'))@ts-expect-errorexpectError((compA.c=1))@ts-expect-errorexpectError((compA.mA='foo'))@ts-expect-errorexpectError((compA.baseA=1))})#5948describe('DefineComponentshouldinfercorrecttypeswhenassigningtoComponent',()=>{letcomponent:Componentcomponent=defineComponent({setup(_,{attrs,slots}){@ts-expect-errorshouldnotbeanyexpectType<[]>(attrs)@ts-expect-errorshouldnotbeanyexpectType<[]>(slots)}})expectType<Component>(component)})#5969describe('shouldallowtoassignprops',()=>{constChild=defineComponent({props:{bar:String}})constParent=defineComponent({props:{...Child.props,foo:String}})constchild=newChild()expectType<JSX.Element>(<Parent{...child.$props}/>)})checkifdefineComponentcanbeexportedexportdefault{nopropsb:defineComponent({data(){return{}}}),c:defineComponent({props:['a']}),d:defineComponent({props:{a:Number}})}describe('functionalw/arrayprops',()=>{constFoo=defineComponent({functional:true,props:['foo'],render(h,ctx){ctx.props.foo@ts-expect-errorctx.props.bar}});<Foofoo="hi"/>@ts-expect-error;<Foobar={123}/>})describe('functionalw/objectprops',()=>{constFoo=defineComponent({functional:true,props:{foo:String},render(h,ctx){ctx.props.foo@ts-expect-errorctx.props.bar}});<Foofoo="hi"/>@ts-expect-error;<Foofoo={123}/>@ts-expect-error;<Foobar={123}/>})#12628defineComponent({components:{App:defineComponent({})},data(){return{}},provide():any{return{fetchData:this.fetchData}},created(){this.fetchData()},methods:{fetchData(){thrownewError('Notimplemented.')}}})constX=defineComponent({methods:{foo(){return123}}})Missing/mismatchingVue2propertieshttps:github.com/vuejs/vue/issues/12628#issuecomment-1177258223defineComponent({render(h){vue2this.$listenersthis.$on('foo',()=>{})this.$ssrContextthis.$isServerthis.$children[0].$root.$childrentypecastingrefsconstfoo=this.$refs.fooasInstanceType<typeofX>foo.foo().toExponential()returnh('div',{},[...this.$slots.default!])}})describe('constructorattachcustomproperties',()=>{#12742allowattachingcustomproperties(consistentwithv3)constFoo=defineComponent({})Foo.foobar=123})describe('constructorinstancetype',()=>{constComp=defineComponent({data(){return{a:1}},computed:{ac(){return1}},methods:{callA(b:number){returnb}},setup(){return{sa:'1'}}})constcomp=newComp()expectType<number>(comp.a)expectType<number>(comp.ac)expectType<string>(comp.sa)expectType<(b:number)=>number>(comp.callA)})describe('shouldreportnon-existentpropertiesininstance',()=>{constFoo=defineComponent({})constinstance=newFoo()@ts-expect-errorinstance.fooconstFoo2=defineComponent({data(){return{}},methods:{example(){}}})constinstance2=newFoo2()@ts-expect-errorinstance2.foo})