import{VNode,defineComponent,ref,RenderContext}from'../../index'import{expectType}from'../utils'expectType<VNode>(<div/>)expectType<JSX.Element>(<div/>)expectType<JSX.Element>(<divid="foo"/>)expectType<JSX.Element>(<inputvalue="foo"/>)//@ts-expect-errorstylecsspropertyvalidationexpectError(<divstyle={{unknown:123}}/>)//allowarraystylesandnestedarraystylesexpectType<JSX.Element>(<divstyle={[{color:'red'}]}/>)expectType<JSX.Element>(<divstyle={[{color:'red'},[{fontSize:'1em'}]]}/>)//@ts-expect-errorunknownpropexpectError(<divfoo="bar"/>)//allowkey/refonarbitraryelementexpectType<JSX.Element>(<divkey="foo"/>)expectType<JSX.Element>(<divref="bar"/>)//allowReftypetypeonarbitraryelementconstfooRef=ref<HTMLElement>()expectType<JSX.Element>(<divref={fooRef}/>)expectType<JSX.Element>(<divref={el=>{fooRef.value=elasHTMLElement}}/>)expectType<JSX.Element>(<inputonInput={e=>{//infercorrecteventtypeexpectType<EventTarget|null>(e.target)}}/>)constFoo=defineComponent({props:{foo:String,bar:{type:Number,required:true}}})//@ts-expect-error;<Foo/>//@ts-expect-error;<Foobar="1"/>//@ts-expect-error;<Foobar={1}foo={2}/>//working;<Foobar={1}/>;<Foobar={1}foo="baz"/>;<divslot="x"/>exportdefault({data}:RenderContext)=>{return<button{...data}/>}