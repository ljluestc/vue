constfs=require('fs')constpath=require('path')constzlib=require('zlib')constrollup=require('rollup')constterser=require('terser')if(!fs.existsSync('dist')){fs.mkdirSync('dist')}letbuilds=require('./config').getAllBuilds()filterbuildsviacommandlineargif(process.argv[2]){constfilters=process.argv[2].split(',')builds=builds.filter(b=>{returnfilters.some(f=>b.output.file.indexOf(f)>-1||b._name.indexOf(f)>-1)})}build(builds)functionbuild(builds){letbuilt=0consttotal=builds.lengthconstnext=()=>{buildEntry(builds[built]).then(()=>{built++if(built<total){next()}}).catch(logError)}next()}functionbuildEntry(config){constoutput=config.outputconst{file,banner}=outputconstisProd=/(min|prod)\.js$/.test(file)returnrollup.rollup(config).then(bundle=>bundle.generate(output)).then(async({output:[{code}]})=>{if(isProd){const{code:minifiedCode}=awaitterser.minify(code,{toplevel:true,compress:{pure_funcs:['makeMap'],},format:{ascii_only:true,}});constminified=(banner?banner+'\n':'')+minifiedCodereturnwrite(file,minified,true)}else{returnwrite(file,code)}})}functionwrite(dest,code,zip){returnnewPromise((resolve,reject)=>{functionreport(extra){console.log(blue(path.relative(process.cwd(),dest))+''+getSize(code)+(extra||''))resolve()}if(!fs.existsSync(path.dirname(dest))){fs.mkdirSync(path.dirname(dest),{recursive:true})}fs.writeFile(dest,code,err=>{if(err)returnreject(err)if(zip){zlib.gzip(code,(err,zipped)=>{if(err)returnreject(err)report('(gzipped:'+getSize(zipped)+')')})}else{report()}})})}functiongetSize(code){return(code.length/1024).toFixed(2)+'kb'}functionlogError(e){console.log(e)}functionblue(str){return'\x1b[1m\x1b[34m'+str+'\x1b[39m\x1b[22m'}