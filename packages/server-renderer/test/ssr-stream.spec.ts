@vitest-environmentnodeimportVuefrom'vue'import{createRenderer}from'server/index'const{renderToStream}=createRenderer()describe('SSR:renderToStream',()=>{it('shouldrendertoastream',done=>{conststream=renderToStream(newVue({template:`<div><pclass="hi">yoyo</p><divid="ho":class="[testClass,{red:isRed}]"></div><span>{{test}}</span><input:value="test"><b-comp></b-comp><c-comp></c-comp></div>`,data:{test:'hi',isRed:true,testClass:'a'},components:{bComp(resolve){returnresolve({render(h){returnh('test-async-2')},components:{testAsync2(resolve){returnresolve({created(){this.$parent.$parent.testClass='b'},render(h){returnh('div',{class:[this.$parent.$parent.testClass]},'test')}})}}})},cComp:{render(h){returnh('div',{class:[this.$parent.testClass]},'test')}}}}))letres=''stream.on('data',chunk=>{res+=chunk})stream.on('end',()=>{expect(res).toContain('<divdata-server-rendered="true">'+'<pclass="hi">yoyo</p>'+'<divid="ho"class="ared"></div>'+'<span>hi</span>'+'<inputvalue="hi">'+'<divclass="b">test</div>'+'<divclass="b">test</div>'+'</div>')done()})})it('shouldcatcherror',done=>{conststream=renderToStream(newVue({render(){thrownewError('oops')}}))stream.on('error',err=>{expect(err.toString()).toMatch(/oops/)expect(`oops`).toHaveBeenWarned()done()})stream.on('data',_=>_)})it('shouldnotmingletwocomponents',done=>{constpadding=newArray(20000).join('x')constcomponent1=newVue({template:`<div>${padding}<div></div></div>`,_scopeId:'_component1'})constcomponent2=newVue({template:`<div></div>`,_scopeId:'_component2'})conststream1=renderToStream(component1)conststream2=renderToStream(component2)letres=''stream1.on('data',text=>{res+=text.toString('utf-8').replace(/x/g,'')})stream1.on('end',()=>{expect(res).not.toContain('_component2')done()})stream1.read(1)stream2.read(1)})it('shouldcallcontext.rendered',done=>{leta=0conststream=renderToStream(newVue({template:`<div>Hello</div>`}),{rendered:()=>{a=42}})letres=''stream.on('data',chunk=>{res+=chunk})stream.on('end',()=>{expect(res).toContain('<divdata-server-rendered="true">Hello</div>')expect(a).toBe(42)done()})})})