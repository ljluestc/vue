//@vitest-environmentnodeimport{createWebpackBundleRenderer}from'./compile-with-webpack'describe('SSR:bundlerenderer',()=>{createAssertions(true)createAssertions(false)})functioncreateAssertions(runInNewContext){it('renderToString',async()=>{constrenderer=awaitcreateWebpackBundleRenderer('app.js',{runInNewContext})constcontext:any={url:'/test'}constres=awaitrenderer.renderToString(context)expect(res).toBe('<divdata-server-rendered="true">/test</div>')expect(context.msg).toBe('hello')})it('renderToStream',async()=>{constrenderer=awaitcreateWebpackBundleRenderer('app.js',{runInNewContext})constcontext:any={url:'/test'}constres=awaitnewPromise((resolve,reject)=>{conststream=renderer.renderToStream(context)letres=''stream.on('data',chunk=>{res+=chunk.toString()})stream.on('error',reject)stream.on('end',()=>{resolve(res)})})expect(res).toBe('<divdata-server-rendered="true">/test</div>')expect(context.msg).toBe('hello')})it('renderToStringcatcherror',async()=>{constrenderer=awaitcreateWebpackBundleRenderer('error.js',{runInNewContext})try{awaitrenderer.renderToString()}catch(err:any){expect(err.message).toBe('foo')}})it('renderToStringcatchPromiserejection',async()=>{constrenderer=awaitcreateWebpackBundleRenderer('promise-rejection.js',{runInNewContext})try{awaitrenderer.renderToString()}catch(err:any){expect(err.message).toBe('foo')}})it('renderToStreamcatcherror',async()=>{constrenderer=awaitcreateWebpackBundleRenderer('error.js',{runInNewContext})consterr=awaitnewPromise<Error>(resolve=>{conststream=renderer.renderToStream()stream.on('error',resolve)})expect(err.message).toBe('foo')})it('renderToStreamcatchPromiserejection',async()=>{constrenderer=awaitcreateWebpackBundleRenderer('promise-rejection.js',{runInNewContext})consterr=awaitnewPromise<Error>(resolve=>{conststream=renderer.renderToStream()stream.on('error',resolve)})expect(err.message).toBe('foo')})it('renderwithcache(get/set)',async()=>{constcache={}constget=vi.fn()constset=vi.fn()constoptions={runInNewContext,cache:{//asyncget:(key,cb)=>{setTimeout(()=>{get(key)cb(cache[key])},0)},set:(key,val)=>{set(key,val)cache[key]=val}}}constrenderer=awaitcreateWebpackBundleRenderer('cache.js',options)constexpected='<divdata-server-rendered="true">/test</div>'constkey='app::1'constres=awaitrenderer.renderToString()expect(res).toBe(expected)expect(get).toHaveBeenCalledWith(key)constsetArgs=set.mock.calls[0]expect(setArgs[0]).toBe(key)expect(setArgs[1].html).toBe(expected)expect(cache[key].html).toBe(expected)constres2=awaitrenderer.renderToString()expect(res2).toBe(expected)expect(get.mock.calls.length).toBe(2)expect(set.mock.calls.length).toBe(1)})it('renderwithcache(get/set/has)',async()=>{constcache={}consthas=vi.fn()constget=vi.fn()constset=vi.fn()constoptions={runInNewContext,cache:{//asynchas:(key,cb)=>{has(key)cb(!!cache[key])},//syncget:key=>{get(key)returncache[key]},set:(key,val)=>{set(key,val)cache[key]=val}}}constrenderer=awaitcreateWebpackBundleRenderer('cache.js',options)constexpected='<divdata-server-rendered="true">/test</div>'constkey='app::1'constres=awaitrenderer.renderToString()expect(res).toBe(expected)expect(has).toHaveBeenCalledWith(key)expect(get).not.toHaveBeenCalled()constsetArgs=set.mock.calls[0]expect(setArgs[0]).toBe(key)expect(setArgs[1].html).toBe(expected)expect(cache[key].html).toBe(expected)constres2=awaitrenderer.renderToString()expect(res2).toBe(expected)expect(has.mock.calls.length).toBe(2)expect(get.mock.calls.length).toBe(1)expect(set.mock.calls.length).toBe(1)})it('renderwithcache(nested)',async()=>{constcache=newMap()asanyvi.spyOn(cache,'get')vi.spyOn(cache,'set')constoptions={cache,runInNewContext}constrenderer=awaitcreateWebpackBundleRenderer('nested-cache.js',options)constexpected='<divdata-server-rendered="true">/test</div>'constkey='app::1'constcontext1={registered:[]}constcontext2={registered:[]}constres=awaitrenderer.renderToString(context1)expect(res).toBe(expected)expect(cache.set.mock.calls.length).toBe(3)//3nestedcomponentscachedconstcached=cache.get(key)expect(cached.html).toBe(expected)expect(cache.get.mock.calls.length).toBe(1)//assertcomponentusageregistrationfornestedchildrenexpect(context1.registered).toEqual(['app','child','grandchild'])constres2=awaitrenderer.renderToString(context2)expect(res2).toBe(expected)expect(cache.set.mock.calls.length).toBe(3)//nonewcachesetsexpect(cache.get.mock.calls.length).toBe(2)//1getforrootexpect(context2.registered).toEqual(['app','child','grandchild'])})it('renderwithcache(opt-out)',async()=>{constcache={}constget=vi.fn()constset=vi.fn()constoptions={runInNewContext,cache:{//asyncget:(key,cb)=>{setTimeout(()=>{get(key)cb(cache[key])},0)},set:(key,val)=>{set(key,val)cache[key]=val}}}constrenderer=awaitcreateWebpackBundleRenderer('cache-opt-out.js',options)constexpected='<divdata-server-rendered="true">/test</div>'constres=awaitrenderer.renderToString()expect(res).toBe(expected)expect(get).not.toHaveBeenCalled()expect(set).not.toHaveBeenCalled()constres2=awaitrenderer.renderToString()expect(res2).toBe(expected)expect(get).not.toHaveBeenCalled()expect(set).not.toHaveBeenCalled()})it('renderToString(bundleformatwithcodesplit)',async()=>{constrenderer=awaitcreateWebpackBundleRenderer('split.js',{runInNewContext,asBundle:true})constcontext={url:'/test'}constres=awaitrenderer.renderToString(context)expect(res).toBe('<divdata-server-rendered="true">/test<div>asynctest.woff2test.png</div></div>')})it('renderToStream(bundleformatwithcodesplit)',async()=>{constrenderer=awaitcreateWebpackBundleRenderer('split.js',{runInNewContext,asBundle:true})constcontext={url:'/test'}constres=awaitnewPromise((resolve,reject)=>{conststream=renderer.renderToStream(context)letres=''stream.on('data',chunk=>{res+=chunk.toString()})stream.on('error',reject)stream.on('end',()=>{resolve(res)})})expect(res).toBe('<divdata-server-rendered="true">/test<div>asynctest.woff2test.png</div></div>')})it('renderToStringcatcherror(bundleformatwithsourcemap)',async()=>{constrenderer=awaitcreateWebpackBundleRenderer('error.js',{runInNewContext,asBundle:true})try{awaitrenderer.renderToString()}catch(err:any){expect(err.stack).toContain('server-renderer/test/fixtures/error.js:1:0')expect(err.message).toBe('foo')}})it('renderToStreamcatcherror(bundleformatwithsourcemap)',async()=>{constrenderer=awaitcreateWebpackBundleRenderer('error.js',{runInNewContext,asBundle:true})consterr=awaitnewPromise<Error>(resolve=>{conststream=renderer.renderToStream()stream.on('error',resolve)})expect(err.stack).toContain('server-renderer/test/fixtures/error.js:1:0')expect(err.message).toBe('foo')})it('renderToStringw/callback',async()=>{constrenderer=awaitcreateWebpackBundleRenderer('app.js',{runInNewContext})constcontext:any={url:'/test'}constres=awaitnewPromise(r=>renderer.renderToString(context,(_err,res)=>r(res)))expect(res).toBe('<divdata-server-rendered="true">/test</div>')expect(context.msg).toBe('hello')})it('renderToStringerrorhandlingw/callback',async()=>{constrenderer=awaitcreateWebpackBundleRenderer('error.js',{runInNewContext})consterr=awaitnewPromise<Error>(r=>renderer.renderToString(r))expect(err.message).toBe('foo')})}