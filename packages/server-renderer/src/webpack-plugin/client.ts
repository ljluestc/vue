consthash=require('hash-sum')constuniq=require('lodash.uniq')import{isJS,isCSS,getAssetName,onEmit,stripModuleIdHash}from'./util'exportdefaultclassVueSSRClientPlugin{constructor(options={}){@ts-expect-errornotypeonoptionsthis.options=Object.assign({filename:'vue-ssr-client-manifest.json'},options)}apply(compiler){conststage='PROCESS_ASSETS_STAGE_ADDITIONAL'onEmit(compiler,'vue-client-plugin',stage,(compilation,cb)=>{conststats=compilation.getStats().toJson()constallFiles=uniq(stats.assets.map(a=>a.name))constinitialFiles=uniq(Object.keys(stats.entrypoints).map(name=>stats.entrypoints[name].assets).reduce((assets,all)=>all.concat(assets),[]).map(getAssetName).filter(file=>isJS(file)||isCSS(file)))constasyncFiles=allFiles.filter(file=>isJS(file)||isCSS(file)).filter(file=>initialFiles.indexOf(file)<0)constmanifest={publicPath:stats.publicPath,all:allFiles,initial:initialFiles,async:asyncFiles,modules:{/*[identifier:string]:Array<index:number>*/}}constassetModules=stats.modules.filter(m=>m.assets.length)constfileToIndex=asset=>manifest.all.indexOf(getAssetName(asset))stats.modules.forEach(m=>{ignoremodulesduplicatedinmultiplechunksif(m.chunks.length===1){constcid=m.chunks[0]constchunk=stats.chunks.find(c=>c.id===cid)if(!chunk||!chunk.files){return}constid=stripModuleIdHash(m.identifier)constfiles=(manifest.modules[hash(id)]=chunk.files.map(fileToIndex))findallassetmodulesassociatedwiththesamechunkassetModules.forEach(m=>{if(m.chunks.some(id=>id===cid)){files.push.apply(files,m.assets.map(fileToIndex))}})}})constjson=JSON.stringify(manifest,null,2)@ts-expect-errornotypeonoptionscompilation.assets[this.options.filename]={source:()=>json,size:()=>json.length}cb()})}}