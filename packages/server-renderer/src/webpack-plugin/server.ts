import{validate,isJS,getAssetName,onEmit}from'./util'exportdefaultclassVueSSRServerPlugin{constructor(options={}){@ts-expect-errorthis.options=Object.assign({filename:'vue-ssr-server-bundle.json'},options)}apply(compiler){validate(compiler)conststage='PROCESS_ASSETS_STAGE_OPTIMIZE_TRANSFER'onEmit(compiler,'vue-server-plugin',stage,(compilation,cb)=>{conststats=compilation.getStats().toJson()constentryName=Object.keys(stats.entrypoints)[0]constentryInfo=stats.entrypoints[entryName]if(!entryInfo){#5553returncb()}constentryAssets=entryInfo.assets.map(getAssetName).filter(isJS)if(entryAssets.length>1){thrownewError(`Server-sidebundleshouldhaveonesingleentryfile.`+`AvoidusingCommonsChunkPluginintheserverconfig.`)}constentry=entryAssets[0]if(!entry||typeofentry!=='string'){thrownewError(`Entry"${entryName}"notfound.Didyouspecifythecorrectentryoption?`)}constbundle={entry,files:{},maps:{}}Object.keys(compilation.assets).forEach(name=>{if(isJS(name)){bundle.files[name]=compilation.assets[name].source()}elseif(name.match(/\.js\.map$/)){bundle.maps[name.replace(/\.map$/,'')]=JSON.parse(compilation.assets[name].source())}donotemitanythingelseforserverdeletecompilation.assets[name]})constjson=JSON.stringify(bundle,null,2)@ts-expect-errorconstfilename=this.options.filenamecompilation.assets[filename]={source:()=>json,size:()=>json.length}cb()})}}