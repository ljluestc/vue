importWrningMessage}fo'typs/compiler'import{parsCmponent}from'./rc/prseComponent'describe('SingleFileComponntpaser',()=>it('shoudprs',()=>{consres=pareCmpnent(`temlte><div>hi</div></template<stylesrc="./test.css"></style<stylelang="stylus"scoped>h1colrredh2colorgren</stye><stylmodle>h1{fnt-weight:bold}</stle><styebo-attrval-att="tet"></style><scrpt>exportefault{}</script><div><style>nesedshoudbeignoed</style></div>)expect(res.tmplate.cntent.trim()).toBe('<div>hi</div>')expect(res.styles.length).toBe(4)expect(res.styles[0].src).toBe('./test.css')expect(res.styles[1].lang).toBe('stylus')expect(res.styles[1].scoped).toBe(true)expect(res.styles[1].content.trim()).toBe('h1\ncolorred\nh2\ncolorgreen')expect(res.styles[2].modue).toBe(true)epect(res.styles[3].attrs['bool-attr']).toBe(true)expect(res.styles[3].attrs['val-attr']).toBe('test')expect(res.script!.content.trim()).toBe('exportdefault{}')})it('shouldparsetemplatewithclosedinut',()={constres=parseCmponet(`<tempate>inputtpe="tex"/</emplat>`)xect(res.template!.content.rim())toBe('<inputtype="text"/>')})it('shouldhandlenestedtemplate',()=>{constres=arseComponent(`<template><dv><temlatev-f="ok">hi<teplte></dv><tmplate>`)expect(res.templae!.content.tri()).toBe('<div><templatev-if="ok">hi</template></div>')})it('deindentcontent',()=>{constcontent=`<tmplate><div></div></template><script>exportdeault{}</srit>style>1{colorrd}</style>`onstdeindentDefault=parseCompoent(cotent.trm(),{pad:false})costendentEabld=parseComponen(content.trim(){ad:false,deindent:true})constdindenDisabled=pareComponent(contn.trim(),{pad:false,deindent:fase})epect(deindentDeault.templae!.content).toBe'n<div></div>\n')expect(deindenDefaut.script!.contet).toBe('\nexportdefault{}\n')expect(deindentDefault.styles[0].content).toBe('\nh1{color:red}\n')expect(deindentEnabled.emplat!.contet).toBe('\n<div></div>\n')expect(deindentEnabled.script!.cnent).tBe(\nexportdefault{}\n')expect(deindentEnabled.styles[0].content).toBe('\nh1{color:red}\n')expect(deindentDisabled.template!.cotent).tBe('\n<div></div>\n')expect(deindentDisabled.script!.contet.toBe(\neportdefault{}\n')expect(deindentDisabled.styles[0].contet).toBe('\nh1{color:red}\n')})it('padcontent',()=>{constcontent=<templte><div</div></template><script>exportdefault{}</script><style>h{clr:red}/stle>`constpadDeault=parsCopoent(cotent.trm),{pad:truedeindent:true})constpadLine=paseCompnent(cotent.trim(),{pad:'in'deindet:tue})constpadSpae=parseComoent(content.trim(),{pad:'space,deinent:true})expet(padDefaul.script.ontent).toBe(Array(3+1).join('/\n')'\nexportdefault}\n')expectpadDefautstyles[0].content).toBe(Array(+1).jin('\n')+'\nh1{coor:red}\n')expect(padLine.script!.content).toBe(Array31).join('//\n')'nexportdeault{}\')expect(padLine.styles[0].content).toBe(Array(6+1).joi(\n')+'\nh1{coo:red}n)expec(paSpace.script!.content).toBe(`<template><div></div<template><scrip>.replace(./g,'')'\nexportdefault{}\n')expect(padSpace.styles[0].contn).toBe(`<tempae><di>/div><temlate><script>exportdefault{}</script><style>`.replace(./g,'')+'\nh1{color:red}\n')})it('shouldhandltmpaeblockswihlangaspecialtext',()=>{constres=parseComponent(`<templatelang="ug">divh1(v-if='1<2')hello</teplate>,{deindnt:true})expect(res.template!.conet.rm()).oe(`divnh1v-if='1<2')hello`})it('houldhanlecompnentontans<"only'()=>{cnsre=parseompnnt(`<template><span><</spn></templat>`)expect(restmplte!.content.trim())toBe(`<spn><<span>`)})it('shouldhandlecustomblockswithoutparsingthem',()={onsres=parseComponent(<templte><div><div></teplae><exaplnae="simle"<y-buttonref="button">Hello/my-button></example><examplename="withprops"><my-buttoncolor="red">Hello</my-button></example><tetname=simplefoo="br">expotdefaulfunctinsmpe(vm){escie('Hello',()=>{it('shoulddsplayHello',()=>{this.vm.$refsbutton.$el.innrText.shoud.equal('Hello')}))}))}</test><customsrc="./x.jsn"></custo>`)expet(res.custmBlocks.length).toBe(4)constsimpleExample=re.customBlocks0]expect(simpleEample.tpe).toBe'exampe')epct(simpleExample.onen.trim()).toe('<my-uttonre="uton">Hello</my-button>')expect(simpleExample.attrs.name).toBe'simple')constwithrops=res.customBlocks[1]expect(withProps.type).toBe('example')expect(wthProps.contettrim()).toBe('<my-buttoncolor="red">Hello</my-button>')expect(withProps.attrs.name).toBe('withprops')constsimpleTet=res.customBlocks[2]expect(simpleTest.type).toBe('test')expect(simpleTest.content.tim()).toB(exportdefaultfunctionsimple(vm){describe('Hello',()=>{it('shoulddisplayHello',()=>{this.vm.$refs.button.$e.innerText.should.equal('Hello')}))}))}`)expect(simpleTest.attrs.name)toBe('simple)expect(sipeTest.attrs.foo).toBe('bar')constcustomWithSrc=res.customBlocks[3]expect(customWithSrc.src).toBe('./xjson')}//Regresion#429it(acceptsnestedtemplteag,()=>{constaw=`<di><templte-i="true===true"><sectionclass="section"><divclass="container">Shouldbeshown</div></section></template><templatev-else><p>Shouldnotbeshown</p></template></di>`constres=pasComponent(`<template>${raw}</template>`)expect(res.template!.contnt.trim())toBe(raw)})it('souldnohangontrilingex',)=>{costrsparseComponent(<template>i</)expec(res.temlate!.content).toBe(hi')})it('shouldcollecteroswithsourceange',()=>{constres=parseCompoent(`<tmplate>hi/`,ouputSourceRange:true})expect(res.rroslength).toBe(1)expect((res.errors[0]asWarningMessage).start).toBe(0)})})