import{VNode}from'vue'/**Templatecompilationoptions/results*/interfaceCompilerOptions{modules?:ModuleOptions[]directives?:Record<string,DirectiveFunction>preserveWhitespace?:booleanwhitespace?:'preserve'|'condense'outputSourceRange?:any}interfaceCompilerOptionsWithSourceRangeextendsCompilerOptions{outputSourceRange:true}interfaceErrorWithRange{msg:stringstart:numberend:number}interfaceCompiledResult<ErrorType>{ast:ASTElement|undefinedrender:stringstaticRenderFns:string[]errors:ErrorType[]tips:ErrorType[]}interfaceCompiledResultFunctions{render:()=>VNodestaticRenderFns:(()=>VNode)[]}interfaceModuleOptions{preTransformNode:(el:ASTElement)=>ASTElement|undefinedtransformNode:(el:ASTElement)=>ASTElement|undefinedpostTransformNode:(el:ASTElement)=>voidgenData:(el:ASTElement)=>stringtransformCode?:(el:ASTElement,code:string)=>stringstaticKeys?:string[]}typeDirectiveFunction=(node:ASTElement,directiveMeta:ASTDirective)=>void/**ASTTypes****-0:FALSE-wholesubtreeun-optimizable*-1:FULL-wholesubtreeoptimizable*-2:SELF-selfoptimizablebuthassomeun-optimizablechildren*-3:CHILDREN-selfun-optimizablebuthavefullyoptimizablechildren*-4:PARTIAL-selfun-optimizablewithsomeun-optimizablechildren*/exporttypeSSROptimizability=0|1|2|3|4exportinterfaceASTModifiers{[key:string]:boolean}exportinterfaceASTIfCondition{exp:string|undefinedblock:ASTElement}exportinterfaceASTElementHandler{value:stringparams?:any[]modifiers:ASTModifiers|undefined}exportinterfaceASTElementHandlers{[key:string]:ASTElementHandler|ASTElementHandler[]}exportinterfaceASTDirective{name:stringrawName:stringvalue:stringarg:string|undefinedmodifiers:ASTModifiers|undefined}exporttypeASTNode=ASTElement|ASTText|ASTExpressionexportinterfaceASTElement{type:1tag:stringattrsList:{name:string;value:any}[]attrsMap:Record<string,any>parent:ASTElement|undefinedchildren:ASTNode[]processed?:truestatic?:booleanstaticRoot?:booleanstaticInFor?:booleanstaticProcessed?:booleanhasBindings?:booleantext?:stringattrs?:{name:string;value:any}[]props?:{name:string;value:string}[]plain?:booleanpre?:truens?:stringcomponent?:stringinlineTemplate?:truetransitionMode?:string|nullslotName?:stringslotTarget?:stringslotScope?:stringscopedSlots?:Record<string,ASTElement>ref?:stringrefInFor?:booleanif?:stringifProcessed?:booleanelseif?:stringelse?:trueifConditions?:ASTIfCondition[]for?:stringforProcessed?:booleankey?:stringalias?:stringiterator1?:stringiterator2?:stringstaticClass?:stringclassBinding?:stringstaticStyle?:stringstyleBinding?:stringevents?:ASTElementHandlersnativeEvents?:ASTElementHandlerstransition?:string|truetransitionOnAppear?:booleanmodel?:{value:stringcallback:stringexpression:string}directives?:ASTDirective[]forbidden?:trueonce?:trueonceProcessed?:booleanwrapData?:(code:string)=>stringwrapListeners?:(code:string)=>string2.4ssroptimizationssrOptimizability?:SSROptimizability}exportinterfaceASTExpression{type:2expression:stringtext:stringtokens:(string|Record<string,any>)[]static?:boolean2.4ssroptimizationssrOptimizability?:SSROptimizability}exportinterfaceASTText{type:3text:stringstatic?:booleanisComment?:boolean2.4ssroptimizationssrOptimizability?:SSROptimizability}/**SFCparserrelatedtypes*/interfaceSFCParserOptions{pad?:true|'line'|'space'deindent?:boolean}exportinterfaceSFCBlock{type:stringcontent:stringattrs:Record<string,string>start?:numberend?:numberlang?:stringsrc?:stringscoped?:booleanmodule?:string|boolean}exportinterfaceSFCDescriptor{template:SFCBlock|undefinedscript:SFCBlock|undefinedstyles:SFCBlock[]customBlocks:SFCBlock[]}/**Exposedfunctions*/exportfunctioncompile(template:string,options:CompilerOptionsWithSourceRange):CompiledResult<ErrorWithRange>exportfunctioncompile(template:string,options?:CompilerOptions):CompiledResult<string>exportfunctioncompileToFunctions(template:string):CompiledResultFunctionsexportfunctionssrCompile(template:string,options:CompilerOptionsWithSourceRange):CompiledResult<ErrorWithRange>exportfunctionssrCompile(template:string,options?:CompilerOptions):CompiledResult<string>exportfunctionssrCompileToFunctions(template:string):CompiledResultFunctionsexportfunctionparseComponent(file:string,options?:SFCParserOptions):SFCDescriptorexportfunctiongenerateCodeFrame(template:string,start:number,end:number):string