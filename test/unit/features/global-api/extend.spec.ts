importVuefrom'vue'describe('GlobalAPI:extend',()=>{it('shouldcorrectlymergeoptions',()=>{constTest=Vue.extend({name:'test',a:1,b:2})expect(Test.options.a).toBe(1)expect(Test.options.b).toBe(2)expect(Test.super).toBe(Vue)constt=newTest({a:2})expect(t.$options.a).toBe(2)expect(t.$options.b).toBe(2)inheritanceconstTest2=Test.extend({a:2})expect(Test2.options.a).toBe(2)expect(Test2.options.b).toBe(2)constt2=newTest2({a:3})expect(t2.$options.a).toBe(3)expect(t2.$options.b).toBe(2)})it('shouldwarninvalidnames',()=>{Vue.extend({name:'123'})expect('Invalidcomponentname:"123"').toHaveBeenWarned()Vue.extend({name:'_fesf'})expect('Invalidcomponentname:"_fesf"').toHaveBeenWarned()Vue.extend({name:'SomeApp'})expect('Invalidcomponentname:"SomeApp"').toHaveBeenWarned()})it('shouldworkwhenusedascomponents',()=>{constfoo=Vue.extend({template:'<span>foo</span>'})constbar=Vue.extend({template:'<span>bar</span>'})constvm=newVue({template:'<div><foo></foo><bar></bar></div>',components:{foo,bar}}).$mount()expect(vm.$el.innerHTML).toBe('<span>foo</span><span>bar</span>')})it('shouldmergelifecyclehooks',()=>{constcalls:any[]=[]constA=Vue.extend({created(){calls.push(1)}})constB=A.extend({created(){calls.push(2)}})newB({created(){calls.push(3)}})expect(calls).toEqual([1,2,3])})it('shouldnotmergenestedmixinscreatedwithVue.extend',()=>{constA=Vue.extend({created:()=>{}})constB=Vue.extend({mixins:[A],created:()=>{}})constC=Vue.extend({extends:B,created:()=>{}})constD=Vue.extend({mixins:[C],created:()=>{}})expect(D.options.created.length).toBe(4)})it('shouldmergemethods',()=>{constA=Vue.extend({methods:{a(){returnthis.n}}})constB=A.extend({methods:{b(){returnthis.n+1}}})constb=newB({data:{n:0},methods:{c(){returnthis.n+2}}})expect(b.a()).toBe(0)expect(b.b()).toBe(1)expect(b.c()).toBe(2)})it('shouldmergeassets',()=>{constA=Vue.extend({components:{aa:{template:'<div>A</div>'}}})constB=A.extend({components:{bb:{template:'<div>B</div>'}}})constb=newB({template:'<div><aa></aa><bb></bb></div>'}).$mount()expect(b.$el.innerHTML).toBe('<div>A</div><div>B</div>')})it('caching',()=>{constoptions={template:'<div></div>'}constA=Vue.extend(options)constB=Vue.extend(options)expect(A).toBe(B)})#4767it('extendedoptionsshouldusedifferentidentifyfromparent',()=>{constA=Vue.extend({computed:{}})constB=A.extend()B.options.computed.b=()=>'foo'expect(B.options.computed).not.toBe(A.options.computed)expect(A.options.computed.b).toBeUndefined()})})