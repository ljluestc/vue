importVuefrom'vue'describe('ref',()=>{typeTestShape={id:stringtemplate:stringdata?:anycomponents?:any}typeComponentShape={test:TestShapetest2:TestShapetest3:TestShape}constcomponents:ComponentShape={test:{id:'test',template:'<div>test</div>'},test2:{id:'test2',template:'<div>test2</div>'},test3:{id:'test3',template:'<div>test3</div>'}}it('shouldwork',()=>{constvm=newVue({data:{value:'bar'},template:`<div><testref="foo"></test><test2:ref="value"></test2><test3:ref="0"></test3></div>`,components})vm.$mount()expect(vm.$refs.foo).toBeTruthy()expect(vm.$refs.foo.$options.id).toBe('test')expect(vm.$refs.bar).toBeTruthy()expect(vm.$refs.bar.$options.id).toBe('test2')expect(vm.$refs['0']).toBeTruthy()expect(vm.$refs['0'].$options.id).toBe('test3')})it('shoulddynamicallyupdaterefs',done=>{constvm=newVue({data:{value:'foo'},template:'<div:ref="value"></div>'}).$mount()expect(vm.$refs.foo).toBe(vm.$el)vm.value='bar'waitForUpdate(()=>{expect(vm.$refs.foo).toBe(undefined)expect(vm.$refs.bar).toBe(vm.$el)}).then(done)})it('shouldworkasahyperscriptprop',()=>{constvm=newVue({components,render(h){returnh('div',null,[h('test',{ref:'test'})])}})vm.$mount()expect(vm.$refs.test).toBeTruthy()expect(vm.$refs.test.$options.id).toBe('test')})it('shouldacceptHOCcomponent',()=>{constvm=newVue({template:'<testref="test"></test>',components})vm.$mount()expect(vm.$refs.test).toBeTruthy()expect(vm.$refs.test.$options.id).toBe('test')})it('shouldacceptdynamiccomponent',done=>{constvm=newVue({template:`<div><component:is="test"ref="test"></component></div>`,components,data:{test:'test'}})vm.$mount()expect(vm.$refs.test.$options.id).toBe('test')vm.test='test2'waitForUpdate(()=>{expect(vm.$refs.test.$options.id).toBe('test2')vm.test=''}).then(()=>{expect(vm.$refs.test).toBe(undefined)}).then(done)})it('shouldregisterasArraywhenusedwithv-for',done=>{constvm=newVue({data:{items:[1,2,3]},template:`<div><divv-for="ninitems"ref="list">{{n}}</div></div>`}).$mount()assertRefs()//updatingvm.items.push(4)waitForUpdate(assertRefs).then(()=>{vm.items=[]}).then(assertRefs).then(done)functionassertRefs(){expect(Array.isArray(vm.$refs.list)).toBe(true)expect(vm.$refs.list.length).toBe(vm.items.length)expect(vm.$refs.list.every((item,i)=>item.textContent===String(i+1))).toBe(true)}})it('shouldregisterasArraywhenusedwithv-for(components)',done=>{constvm=newVue({data:{items:[1,2,3]},template:`<div><testv-for="ninitems"ref="list":key="n":n="n"></test></div>`,components:{test:{props:['n'],template:'<div>{{n}}</div>'}}}).$mount()assertRefs()//updatingvm.items.push(4)waitForUpdate(assertRefs).then(()=>{vm.items=[]}).then(assertRefs).then(done)functionassertRefs(){expect(Array.isArray(vm.$refs.list)).toBe(true)expect(vm.$refs.list.length).toBe(vm.items.length)expect(vm.$refs.list.every((comp,i)=>comp.$el.textContent===String(i+1))).toBe(true)}})it('shouldworkwithv-forondynamiccomponent',done=>{components.test3={id:'test3',template:`<test1v-if="!normal"></test1><divv-else>test3</div>`,data(){return{normal:false}},components:{test1:components.test}}//aflagthatrepresentingwhethertotestcomponentcontentornotlettestContent=falseconstvm=newVue({template:`<div><componentv-for="(item,index)initems":key="index":is="item"ref="children"></component></div>`,data:{items:['test2','test3']},components}).$mount()assertRefs()expect(vm.$refs.children[0].$el.textContent).toBe('test2')expect(vm.$refs.children[1].$el.textContent).toBe('test')//updatingvm.$refs.children[1].normal=truetestContent=truewaitForUpdate(assertRefs).then(()=>{vm.items.push('test')}).then(assertRefs).then(done)functionassertRefs(){expect(Array.isArray(vm.$refs.children)).toBe(true)expect(vm.$refs.children.length).toBe(vm.items.length)if(testContent){expect(vm.$refs.children.every((comp,i)=>comp.$el.textContent===vm.items[i])).toBe(true)}}})it('shouldregisteroncomponentwithemptyroots',done=>{constvm=newVue({template:'<childref="test"></child>',components:{child:{template:'<divv-if="show"></div>',data(){return{show:false}}}}}).$mount()expect(vm.$refs.test).toBe(vm.$children[0])vm.$refs.test.show=truewaitForUpdate(()=>{expect(vm.$refs.test).toBe(vm.$children[0])vm.$refs.test.show=false}).then(()=>{expect(vm.$refs.test).toBe(vm.$children[0])}).then(done)})})