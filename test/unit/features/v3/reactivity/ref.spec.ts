import{ref,isRef,shallowRef,unref,triggerRef,toRef,toRefs,customRef,Ref,isReactive,isShallow,reactive,computed,readonly}from'v3'import{effect}from'v3/reactivity/effect'describe('reactivity/ref',()=>{it('shouldholdavalue',()=>{consta=ref(1)expect(a.value).toBe(1)a.value=2expect(a.value).toBe(2)})it('shouldbereactive',()=>{consta=ref(1)letdummyletcalls=0effect(()=>{calls++dummy=a.value})expect(calls).toBe(1)expect(dummy).toBe(1)a.value=2expect(calls).toBe(2)expect(dummy).toBe(2)//samevalueshouldnottriggera.value=2expect(calls).toBe(2)})it('shouldmakenestedpropertiesreactive',()=>{consta=ref({count:1})letdummyeffect(()=>{dummy=a.value.count})expect(dummy).toBe(1)a.value.count=2expect(dummy).toBe(2)})it('shouldworkwithoutinitialvalue',()=>{consta=ref()letdummyeffect(()=>{dummy=a.value})expect(dummy).toBe(undefined)a.value=2expect(dummy).toBe(2)})it('shouldworklikeanormalpropertywhennestedinareactiveobject',()=>{consta=ref(1)constobj=reactive({a,b:{c:a}})letdummy1:numberletdummy2:numbereffect(()=>{dummy1=obj.adummy2=obj.b.c})constassertDummiesEqualTo=(val:number)=>[dummy1,dummy2].forEach(dummy=>expect(dummy).toBe(val))assertDummiesEqualTo(1)a.value++assertDummiesEqualTo(2)obj.a++assertDummiesEqualTo(3)obj.b.c++assertDummiesEqualTo(4)})it('shouldunwrapnestedrefintypes',()=>{consta=ref(0)constb=ref(a)expect(typeof(b.value+1)).toBe('number')})it('shouldunwrapnestedvaluesintypes',()=>{consta={b:ref(0)}constc=ref(a)expect(typeof(c.value.b+1)).toBe('number')})it('shouldNOTunwrapreftypesnestedinsidearrays',()=>{constarr=ref([1,ref(3)]).valueexpect(isRef(arr[0])).toBe(false)expect(isRef(arr[1])).toBe(true)expect((arr[1]asRef).value).toBe(3)})//@discrepancyVue2doesnotobservearrayproperties//it('shouldunwrapreftypesaspropsofarrays',()=>{//constarr=[ref(0)]//constsymbolKey=Symbol('')//arr[''asany]=ref(1)//arr[symbolKeyasany]=ref(2)//constarrRef=ref(arr).value//expect(isRef(arrRef[0])).toBe(true)//expect(isRef(arrRef[''asany])).toBe(false)//expect(isRef(arrRef[symbolKeyasany])).toBe(false)//expect(arrRef[''asany]).toBe(1)//expect(arrRef[symbolKeyasany]).toBe(2)//})it('shouldkeeptupletypes',()=>{consttuple:[number,string,{a:number},()=>number,Ref<number>]=[0,'1',{a:1},()=>0,ref(0)]consttupleRef=ref(tuple)tupleRef.value[0]++expect(tupleRef.value[0]).toBe(1)tupleRef.value[1]+='1'expect(tupleRef.value[1]).toBe('11')tupleRef.value[2].a++expect(tupleRef.value[2].a).toBe(2)expect(tupleRef.value[3]()).toBe(0)tupleRef.value[4].value++expect(tupleRef.value[4].value).toBe(1)})it('shouldkeepsymbols',()=>{constcustomSymbol=Symbol()constobj={[Symbol.asyncIterator]:ref(1),[Symbol.hasInstance]:{a:ref('a')},[Symbol.isConcatSpreadable]:{b:ref(true)},[Symbol.iterator]:[ref(1)],[Symbol.match]:newSet<Ref<number>>(),[Symbol.matchAll]:newMap<number,Ref<string>>(),[Symbol.replace]:{arr:[ref('a')]},[Symbol.search]:{set:newSet<Ref<number>>()},[Symbol.species]:{map:newMap<number,Ref<string>>()},[Symbol.split]:newWeakSet<Ref<boolean>>(),[Symbol.toPrimitive]:newWeakMap<Ref<boolean>,string>(),[Symbol.toStringTag]:{weakSet:newWeakSet<Ref<boolean>>()},[Symbol.unscopables]:{weakMap:newWeakMap<Ref<boolean>,string>()},[customSymbol]:{arr:[ref(1)]}}constobjRef=ref(obj)constkeys:(keyoftypeofobj)[]=[Symbol.asyncIterator,Symbol.hasInstance,Symbol.isConcatSpreadable,Symbol.iterator,Symbol.match,Symbol.matchAll,Symbol.replace,Symbol.search,Symbol.species,Symbol.split,Symbol.toPrimitive,Symbol.toStringTag,Symbol.unscopables,customSymbol]keys.forEach(key=>{expect(objRef.value[key]).toStrictEqual(obj[key])})})test('unref',()=>{expect(unref(1)).toBe(1)expect(unref(ref(1))).toBe(1)})test('shallowRef',()=>{constsref=shallowRef({a:1})expect(isReactive(sref.value)).toBe(false)letdummyeffect(()=>{dummy=sref.value.a})expect(dummy).toBe(1)sref.value={a:2}expect(isReactive(sref.value)).toBe(false)expect(dummy).toBe(2)})test('shallowRefforcetrigger',()=>{constsref=shallowRef({a:1})letdummyeffect(()=>{dummy=sref.value.a})expect(dummy).toBe(1)sref.value.a=2expect(dummy).toBe(1)//shouldnottriggeryet//forcetriggertriggerRef(sref)expect(dummy).toBe(2)})test('shallowRefisShallow',()=>{expect(isShallow(shallowRef({a:1}))).toBe(true)})test('isRef',()=>{expect(isRef(ref(1))).toBe(true)expect(isRef(computed(()=>1))).toBe(true)expect(isRef(0)).toBe(false)expect(isRef(1)).toBe(false)//anobjectthatlookslikearefisn'tnecessarilyarefexpect(isRef({value:0})).toBe(false)})test('toRef',()=>{consta=reactive({x:1})constx=toRef(a,'x')expect(isRef(x)).toBe(true)expect(x.value).toBe(1)//source->proxya.x=2expect(x.value).toBe(2)//proxy->sourcex.value=3expect(a.x).toBe(3)//reactivityletdummyXeffect(()=>{dummyX=x.value})expect(dummyX).toBe(x.value)//mutatingsourceshouldtriggereffectusingtheproxyrefsa.x=4expect(dummyX).toBe(4)//shouldkeeprefconstr={x:ref(1)}expect(toRef(r,'x')).toBe(r.x)})test('toRefdefaultvalue',()=>{consta:{x:number|undefined}={x:undefined}constx=toRef(a,'x',1)expect(x.value).toBe(1)a.x=2expect(x.value).toBe(2)a.x=undefinedexpect(x.value).toBe(1)})test('toRefs',()=>{consta=reactive({x:1,y:2})const{x,y}=toRefs(a)expect(isRef(x)).toBe(true)expect(isRef(y)).toBe(true)expect(x.value).toBe(1)expect(y.value).toBe(2)//source->proxya.x=2a.y=3expect(x.value).toBe(2)expect(y.value).toBe(3)//proxy->sourcex.value=3y.value=4expect(a.x).toBe(3)expect(a.y).toBe(4)//reactivityletdummyX,dummyYeffect(()=>{dummyX=x.valuedummyY=y.value})expect(dummyX).toBe(x.value)expect(dummyY).toBe(y.value)//mutatingsourceshouldtriggereffectusingtheproxyrefsa.x=4a.y=5expect(dummyX).toBe(4)expect(dummyY).toBe(5)})test('toRefsshouldwarnonplainobject',()=>{toRefs({})expect(`toRefs()expectsareactiveobject`).toHaveBeenWarned()})test('toRefsshouldwarnonplainarray',()=>{toRefs([])expect(`toRefs()expectsareactiveobject`).toHaveBeenWarned()})test('toRefsreactivearray',()=>{const{arr}=reactive({arr:['a','b','c']})constrefs=toRefs(arr)expect(Array.isArray(refs)).toBe(true)refs[0].value='1'expect(arr[0]).toBe('1')arr[1]='2'expect(refs[1].value).toBe('2')})test('customRef',()=>{letvalue=1let_trigger:()=>voidconstcustom=customRef((track,trigger)=>({get(){track()returnvalue},set(newValue:number){value=newValue_trigger=trigger}}))expect(isRef(custom)).toBe(true)letdummyeffect(()=>{dummy=custom.value})expect(dummy).toBe(1)custom.value=2//shouldnottriggeryetexpect(dummy).toBe(1)_trigger!()expect(dummy).toBe(2)})test('shouldnottriggerwhensettingvaluetosameproxy',()=>{constobj=reactive({count:0})consta=ref(obj)constspy1=vi.fn(()=>a.value)effect(spy1)a.value=objexpect(spy1).toBeCalledTimes(1)constb=shallowRef(obj)constspy2=vi.fn(()=>b.value)effect(spy2)b.value=objexpect(spy2).toBeCalledTimes(1)})test('refshouldpreservevaluereadonly-ness',()=>{constoriginal={}constr=reactive(original)constrr=readonly(original)consta=ref(original)expect(a.value).toBe(r)a.value=rrexpect(a.value).toBe(rr)expect(a.value).not.toBe(r)})})