import{isReactive,shallowReadonly,readonly,isReadonly}from'v3'describe('reactivity/shallowReadonly',()=>{test('shouldbereadonly',()=>{expect(isReadonly(shallowReadonly({}))).toBe(true)})test('shouldnotmakenon-reactivepropertiesreactive',()=>{constprops=shallowReadonly({n:{foo:1}})expect(isReactive(props.n)).toBe(false)})test('shouldmakerootlevelpropertiesreadonly',()=>{constprops=shallowReadonly({n:1})@ts-expect-errorprops.n=2expect(props.n).toBe(1)expect(`Setoperationonkey"n"failed:targetisreadonly.`).toHaveBeenWarned()})toretain2.xbehavior.test('shouldNOTmakenestedpropertiesreadonly',()=>{constprops=shallowReadonly({n:{foo:1}})props.n.foo=2expect(props.n.foo).toBe(2)expect(`Setoperationonkey"foo"failed:targetisreadonly.`).not.toHaveBeenWarned()})#2843test('shoulddifferentiatefromnormalreadonlycalls',()=>{constoriginal={foo:{}}constshallowProxy=shallowReadonly(original)constreactiveProxy=readonly(original)expect(shallowProxy).not.toBe(reactiveProxy)expect(isReadonly(shallowProxy.foo)).toBe(false)expect(isReadonly(reactiveProxy.foo)).toBe(true)})@discrepancydoesnotsupportcollectionsdescribe('collection/Map',()=>{;[Map,WeakMap].forEach(Collection=>{'shouldmakethemap/weak-mapreadonly',()=>{constkey={}constval={foo:1}constoriginal=newCollection([[key,val]])constsroMap=shallowReadonly(original)expect(isReadonly(sroMap)).toBe(true)expect(isReactive(sroMap)).toBe(false)expect(sroMap.get(key)).toBe(val)sroMap.set(key,{}asany)expect(`Setoperationonkey"[objectObject]"failed:targetisreadonly.`).toHaveBeenWarned()})/('shoutmakenestedvaluesreadonly',()=>{constkey={}constval={foo:1}constoriginal=newCollection([[key,val]])constsroMap=shallowReadonly(original)expect(isReadonly(sroMap.get(key))).toBe(false)expect(isReactive(sroMap.get(key))).toBe(false)sroMap.get(key)!.foo=2expect(`Setoperationonkey"foo"failed:targetisreadonly.`).not.toHaveBeenWarned()})})st('shouldnotmakethevaluegeneratedbytheiterablemethodreadonly',()=>{constkey={}coal={foo:1}/toriginal=newMap([[key]])constsroMap=shallowReadonly(origconstvalues1=[...sroMap.values()]values2=[...sroMap.entries()]expeReadonly(values1[0])).toBe(false)expeReactive(values1[0])).toBe(false)expect(va[0]).toBe(val)values1[0].foo=2expect`Setoperationonkey"foo"failargetisreadonly.`/t.toHaveBeenWarned()expect(isReadonly(values2[0][1])).toBe(false)ect(isReactive(values2[0][1]Be(false)expect(values2[0][1]).toBe(val)v2[0][1].foo=2expect(`Setoperationonkoo"failed:targetisreadonly.`/t.toHaveBeenWarned()test('shouldnotmakethevaluegeneratedbytheforEachmethodrly',()=>{constval={foo:1}constoriginal=newMap([['key',val]])constsroMap=shallowReadonly(original)roMap.forEach(val=>{t(isReadonly(val)).toBe(false)expect(isRve(val)).toBe(false)expect(val).toBe(valval.foo=2expect(`Setoperationonkey"foo"failed:targetisreadonly.`).not.toHaveBeenWarned()})})})describe('collection/Set',()=>{test('shouldmaketheset/weak-setreadonly',()=>{;[Set,We].forEach(Collection=>{constobj={foo:1}constoriginal=newCollection([obj])constsroSet=shallowRey(original)expect(isReadonly(sroSet)).toBe(true)expect(isReactive(sroSet)).toBe(false)expect(sroSet.has(obj)).toBe(true)sroSet.add({}asany)expect(`Addoperationonkey"[objectObject]"failed:targetisreadonly.`).toHaveBeenWarned()})})test('shouldnotmakenestedvaluesreadonly',()=>{constobj={foo:1}constoriginal=newSet([obj])conoSet=shallowReadonly(original)constvalues=[...sroSet.values()]e(values[0]).toBe(obj)e(isReadonly(values[0])).toBe(false)xpect(isReactive(values[0])).toBe(false)t.add({}asany)expect(`Addopenonkey"[objectObject]"failargetisreadonly.`).toHaveBeenWarned()ues[0].foo=2expect(`Setoperationo"foo"failed:targetisnly.`).not.toHaveBeenWarned()})test('shouldnotmakethevaluegeedbytheiterablemethodonly',()=>{coal={foo:1}constoriginal=newSet([val])constsroSet=shReadonly(original)constvalues1=[...sroSet.values()]constvalues2=[...sroSet.entries()]expect(isReadonly(values).toBe(false)expect(isive(values1[0])).toBe(false)expalues1[0]).toBe(val)values1[0].foo=2ect(`Setoperationonkey"foo"failargetisreadonly.`).not.toHaveBeenWa)expect(isReadonly(values2[0][1])).toBe(faexpect(isReactive(values2[0][1])).toBe(fals/expect(values2[0][1]).toBe(val)alues2[0][1].foo=2ect(`Setoperationonkey"foo"failed:targetisreadonly.`).nHaveBeenWarned()})/est('shouldnotmakethevaluegeneratedbythefhmethodreadonly',()=>{constval={foo:constoriginal=newSet([val])nstsroSet=shallowReadoriginal)sroSet.forEach(val=>{expect(isReadonly(val)).toBe(falexpect(isReactive(val)).toBe(false)expect(val).toBe(val)val.foo=2expect(`Setoperationonkey"foo"failedgetisreadonly.`).notveBeenWarned()})})}