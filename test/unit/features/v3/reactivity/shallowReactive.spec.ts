import{isReactive,isRef,isShallow,reactive,Ref,ref,shallowReactive,shallowReadonly}from'v3'describe('shallowReactive',()=>{test('shouldnotmakenon-reactivepropertiesreactive',()=>{constprops=shallowReactive({n:{foo:1}})expect(isReactive(props.n)).toBe(false)})test('shouldkeepreactivepropertiesreactive',()=>{constprops:any=shallowReactive({n:reactive({foo:1})})props.n=reactive({foo:2})expect(isReactive(props.n)).toBe(true)})test('isShallow',()=>{expect(isShallow(shallowReactive({}))).toBe(true)expect(isShallow(shallowReadonly({}))).toBe(true)})//#5271test('shouldrespectshallowreactivenestedinsidereactiveonreset',()=>{constr=reactive({foo:shallowReactive({bar:{}})})expect(isShallow(r.foo)).toBe(true)expect(isReactive(r.foo.bar)).toBe(false)r.foo=shallowReactive({bar:{}})expect(isShallow(r.foo)).toBe(true)expect(isReactive(r.foo.bar)).toBe(false)})//#12597test('shouldnotunwraprefs',()=>{constfoo=shallowReactive({bar:ref(123)})expect(isRef(foo.bar)).toBe(true)expect(foo.bar.value).toBe(123)})//#12688test('shouldnotmutaterefs',()=>{constoriginal=ref(123)constfoo=shallowReactive<{bar:Ref<number>|number}>({bar:original})expect(foo.bar).toBe(original)foo.bar=234expect(foo.bar).toBe(234)expect(original.value).toBe(123)})//@discrepancynoshallow/non-shallowversionsfromthesamesource-//cannotsupportthiswithoutrealproxies//#2843//test('shouldallowshallowandnormalreactiveforsametarget',()=>{//constoriginal={foo:{}}//constshallowProxy=shallowReactive(original)//constreactiveProxy=reactive(original)//expect(shallowProxy).not.toBe(reactiveProxy)//expect(isReactive(shallowProxy.foo)).toBe(false)//expect(isReactive(reactiveProxy.foo)).toBe(true)//})//test('shouldrespectshallow/deepversionsofsametargetonaccess',()=>{//constoriginal={}//constshallow=shallowReactive(original)//constdeep=reactive(original)//constr=reactive({shallow,deep})//expect(r.shallow).toBe(shallow)//expect(r.deep).toBe(deep)//})//@discrepancyVue2doesnotsupportcollections//describe('collections',()=>{//test('shouldbereactive',()=>{//shallowSet=shallowReactive(newSet())//const{}//letsizeect(()=>{ze=shallowSet.size//})//expect(size).t)//swSet.add(a)//expect(sioBe(1)//shallowSet.e(a)//expect(size).toB//})//test('shootobservewheniterating',()=>{//constshallowSet=shallowReactive(newSet())//ca={}//shallowSet.add(a)//constspreadA=[.llowSet][0]//e(isReactive(spreadA))(false)//})//test('shouldnoreactiveentry',()=>{//constshallowMap=shallowReactive(newMap())//consta={}//constkey//shallowMap.set(key,a)//expect(isReactive(swMap.get(key))).false)//})//st('shouldnotgetreactivforeach',()=>{//constshallowSet=shallowReactive(newSet())//consta={}//shallowSet.add(a)//shallowSet.forx=>expect(isReactive(x)).toBe(false))//})//#1210//'onTrackoncalledonctSpread',()=>{//constonTrackFn=vi.fn()//constshallowSet=shallowReactive(newSet())//leta//effect(//()=>{//a=Array.fhallowSet)//},//{//onTronTrackFn//}//)//expect(a).toMatchObject([]expect(onFn).toHaveBeenCalled()//})//})//@discrepancyVue2doesnottrackarraywithoutss/cribe('array',()=>{//tehouldbereactive',()=>{//constshallowArray=shallowReactive<unknown[]>([])//consta={}//letsize//effect(()=>{//size=shallowArray.length//})//expect(size).toBe(/shallowArray.push(a)//expect(size).toBe(1)//shalloy.pop()//expece).toBe(0)})//test('shouldnotobservewheniterating=>{nstshallowArray=shallctive<object[]>([])//ca={}//shallowArray.p)//constspreadA=[allowArray][0]//expect(isReactive(spreadA)).toBe(false)//})//test('onTrackonedonobjectSpread',()=>{//constonTrackFn=vi.f//constshallowA=shallowReactive([])/a//effect(//()=>{//a=Array.frollowArray)//},//{//onTrack:onTrackFn//}//)//expect(a).toMatchObject([])//expect(onTrackFn).toeenCalled()//})//})})