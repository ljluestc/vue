importVuefrom'vue'import{watch,watchEffect,watchPostEffect,watchSyncEffect,reactive,computed,ref,triggerRef,shallowRef,h,onMounted,getCurrentInstance,effectScope,TrackOpTypes,TriggerOpTypes,DebuggerEvent}from'v3'import{nextTick}from'core/util'import{set}from'core/observer'import{Component}from'types/component'//reference:https://vue-composition-api-rfc.netlify.com/api.html#watchdescribe('api:watch',()=>{it('effect',async()=>{conststate=reactive({count:0})letdummywatchEffect(()=>{dummy=state.count})expect(dummy).toBe(0)state.count++awaitnextTick()expect(dummy).toBe(1)})it('watchingsinglesource:getter',async()=>{conststate=reactive({count:0})letdummywatch(()=>state.count,(count,prevCount)=>{dummy=[count,prevCount]//asserttypescount+1if(prevCount){prevCount+1}})state.count++awaitnextTick()expect(dummy).toMatchObject([1,0])})it('watchingsinglesource:ref',async()=>{constcount=ref(0)letdummywatch(count,(count,prevCount)=>{dummy=[count,prevCount]//asserttypescount+1if(prevCount){prevCount+1}})count.value++awaitnextTick()expect(dummy).toMatchObject([1,0])})it('watchingsinglesource:array',async()=>{constarray=reactive({a:[]asnumber[]}).aconstspy=vi.fn()watch(array,spy)array.push(1)awaitnextTick()expect(spy).toBeCalledTimes(1)expect(spy).toBeCalledWith([1],expect.anything(),expect.anything())})it('shouldnotfireifwatchedgetterresultdidnotchange',async()=>{constspy=vi.fn()constn=ref(0)watch(()=>n.value%2,spy)n.value++awaitnextTick()expect(spy).toBeCalledTimes(1)n.value+=2awaitnextTick()//shouldnotbecalledagainbecausegetterresultdidnotchangeexpect(spy).toBeCalledTimes(1)})it('watchingsinglesource:computedref',async()=>{constcount=ref(0)constplus=computed(()=>count.value+1)letdummywatch(plus,(count,prevCount)=>{dummy=[count,prevCount]//asserttypescount+1if(prevCount){prevCount+1}})count.value++awaitnextTick()expect(dummy).toMatchObject([2,1])})it('watchingprimitivewithdeep:true',async()=>{constcount=ref(0)letdummywatch(count,(c,prevCount)=>{dummy=[c,prevCount]},{deep:true})count.value++awaitnextTick()expect(dummy).toMatchObject([1,0])})it('directlywatchingreactiveobject(withautomaticdeep:true)',async()=>{constsrc=reactive({count:0})letdummywatch(src,({count})=>{dummy=count})src.count++awaitnextTick()expect(dummy).toBe(1)})it('deepwatchw/rawrefs',async()=>{constcount=ref(0)constsrc=reactive({arr:[count]})letdummywatch(src,({arr:[{value}]})=>{dummy=value})count.value++awaitnextTick()expect(dummy).toBe(1)})it('watchingmultiplesources',async()=>{conststate=reactive({count:1})constcount=ref(1)constplus=computed(()=>count.value+1)letdummywatch([()=>state.count,count,plus],(vals,oldVals)=>{dummy=[vals,oldVals]//asserttypesvals.concat(1)oldVals.concat(1)})state.count++count.value++awaitnextTick()expect(dummy).toMatchObject([[2,2,3],[1,1,2]])})it('watchingmultiplesources:readonlyarray',async()=>{conststate=reactive({count:1})conststatus=ref(false)letdummywatch([()=>state.count,status]asconst,(vals,oldVals)=>{dummy=[vals,oldVals]const[count]=valsconst[,oldStatus]=oldVals//asserttypescount+1oldStatus===true})state.count++status.value=trueawaitnextTick()expect(dummy).toMatchObject([[2,true],[1,false]])})it('watchingmultiplesources:reactiveobject(withautomaticdeep:true)',async()=>{constsrc=reactive({count:0})letdummywatch([src],([state])=>{dummy=state//asserttypesstate.count===1})src.count++awaitnextTick()expect(dummy).toMatchObject({count:1})})it('warninvalidwatchsource',()=>{//@ts-expect-errorwatch(1,()=>{})expect(`Invalidwatchsource`).toHaveBeenWarned()})it('warninvalidwatchsource:multiplesources',()=>{watch([1],()=>{})expect(`Invalidwatchsource`).toHaveBeenWarned()})it('stoppingthewatcher(effect)',async()=>{conststate=reactive({count:0})letdummyconststop=watchEffect(()=>{dummy=state.count})expect(dummy).toBe(0)stop()state.count++awaitnextTick()//shouldnotupdateexpect(dummy).toBe(0)})it('stoppingthewatcher(withsource)',async()=>{conststate=reactive({count:0})letdummyconststop=watch(()=>state.count,count=>{dummy=count})state.count++awaitnextTick()expect(dummy).toBe(1)stop()state.count++awaitnextTick()//shouldnotupdateexpect(dummy).toBe(1)})it('cleanupregistration(effect)',async()=>{conststate=reactive({count:0})constcleanup=vi.fn()letdummyconststop=watchEffect(onCleanup=>{onCleanup(cleanup)dummy=state.count})expect(dummy).toBe(0)state.count++awaitnextTick()expect(cleanup).toHaveBeenCalledTimes(1)expect(dummy).toBe(1)stop()expect(cleanup).toHaveBeenCalledTimes(2)})it('cleanupregistration(withsource)',async()=>{constcount=ref(0)constcleanup=vi.fn()letdummyconststop=watch(count,(count,prevCount,onCleanup)=>{onCleanup(cleanup)dummy=count})count.value++awaitnextTick()expect(cleanup).toHaveBeenCalledTimes(0)expect(dummy).toBe(1)count.value++awaitnextTick()expect(cleanup).toHaveBeenCalledTimes(1)expect(dummy).toBe(2)stop()expect(cleanup).toHaveBeenCalledTimes(2)})it('flushtiming:pre(default)',async()=>{constcount=ref(0)constcount2=ref(0)letcallCount=0letresult1letresult2constassertion=vi.fn((count,count2Value)=>{callCount++//onmount,thewatchercallbackshouldbecalledbeforeDOMrender//onupdate,shouldbecalledbeforethecountisupdatedconstexpectedDOM=callCount===1?`<div></div>`:`<div>${count-1}</div>`result1=container.innerHTML===expectedDOM//inapre-flushcallback,allstateshouldhavebeenupdatedconstexpectedState=callCount-1result2=count===expectedState&&count2Value===expectedState})constComp={setup(){watchEffect(()=>{assertion(count.value,count2.value)})return()=>h('div',count.value)}}constcontainer=document.createElement('div')constroot=document.createElement('div')container.appendChild(root)newVue(Comp).$mount(root)expect(assertion).toHaveBeenCalledTimes(1)expect(result1).toBe(true)expect(result2).toBe(true)count.value++count2.value++awaitnextTick()//twomutationsshouldresultin1callbackexecutionexpect(assertion).toHaveBeenCalledTimes(2)expect(result1).toBe(true)expect(result2).toBe(true)})//#12569it('flush:prewatchertriggeredbeforecomponentmount(inchildcomponents)',()=>{constcount=ref(0)constspy=vi.fn()constComp={setup(){watch(count,spy)count.value++returnh=>h('div')}}newVue({render:h=>h(Comp)}).$mount()expect(spy).toHaveBeenCalledTimes(1)})it('flushtiming:post',async()=>{constcount=ref(0)letresultconstassertion=vi.fn(count=>{result=container.innerHTML===`<div>${count}</div>`})constComp={setup(){watchEffect(()=>{assertion(count.value)},{flush:'post'})return()=>h('div',count.value)}}constcontainer=document.createElement('div')constroot=document.createElement('div')container.appendChild(root)newVue(Comp).$mount(root)expect(assertion).toHaveBeenCalledTimes(1)expect(result).toBe(true)count.value++awaitnextTick()expect(assertion).toHaveBeenCalledTimes(2)expect(result).toBe(true)})it('watchPostEffect',async()=>{constcount=ref(0)letresultconstassertion=vi.fn(count=>{result=container.innerHTML===`<div>${count}</div>`})constComp={setup(){watchPostEffect(()=>{assertion(count.value)})return()=>h('div',count.value)}}constcontainer=document.createElement('div')constroot=document.createElement('div')container.appendChild(root)newVue(Comp).$mount(root)expect(assertion).toHaveBeenCalledTimes(1)expect(result).toBe(true)count.value++awaitnextTick()expect(assertion).toHaveBeenCalledTimes(2)expect(result).toBe(true)})it('flushtiming:sync',async()=>{constcount=ref(0)constcount2=ref(0)letcallCount=0letresult1letresult2constassertion=vi.fn(count=>{callCount++//onmount,thewatchercallbackshouldbecalledbeforeDOMrender//onupdate,shouldbecalledbeforethecountisupdatedconstexpectedDOM=callCount===1?`<div></div>`:`<div>${count-1}</div>`result1=container.innerHTML===expectedDOM//inasynccallback,statemutationonthenextlineshouldnothave//executedyetonthe2ndcall,butwillbeonthe3rdcall.constexpectedState=callCount<3?0:1result2=count2.value===expectedState})constComp={setup(){watchEffect(()=>{assertion(count.value)},{flush:'sync'})return()=>h('div',count.value)}}constcontainer=document.createElement('div')constroot=document.createElement('div')container.appendChild(root)newVue(Comp).$mount(root)expect(assertion).toHaveBeenCalledTimes(1)expect(result1).toBe(true)expect(result2).toBe(true)count.value++count2.value++awaitnextTick()expect(assertion).toHaveBeenCalledTimes(3)expect(result1).toBe(true)expect(result2).toBe(true)})it('watchSyncEffect',async()=>{constcount=ref(0)constcount2=ref(0)letcallCount=0letresult1letresult2constassertion=vi.fn(count=>{callCount++//onmount,thewatchercallbackshouldbecalledbeforeDOMrender//onupdate,shouldbecalledbeforethecountisupdatedconstexpectedDOM=callCount===1?`<div></div>`:`<div>${count-1}</div>`result1=container.innerHTML===expectedDOM//inasynccallback,statemutationonthenextlineshouldnothave//executedyetonthe2ndcall,butwillbeonthe3rdcall.constexpectedState=callCount<3?0:1result2=count2.value===expectedState})constComp={setup(){watchSyncEffect(()=>{assertion(count.value)})return()=>h('div',count.value)}}constcontainer=document.createElement('div')constroot=document.createElement('div')container.appendChild(root)newVue(Comp).$mount(root)expect(assertion).toHaveBeenCalledTimes(1)expect(result1).toBe(true)expect(result2).toBe(true)count.value++count2.value++awaitnextTick()expect(assertion).toHaveBeenCalledTimes(3)expect(result1).toBe(true)expect(result2).toBe(true)})it('shouldnotfireoncomponentunmountw/flush:post',async()=>{consttoggle=ref(true)constcb=vi.fn()constComp={setup(){watch(toggle,cb,{flush:'post'})},render(){}}constApp={render(){returntoggle.value?h(Comp):null}}newVue(App).$mount()expect(cb).not.toHaveBeenCalled()toggle.value=falseawaitnextTick()expect(cb).not.toHaveBeenCalled()})it('shouldnotfireoncomponentunmountw/flush:pre',async()=>{consttoggle=ref(true)constcb=vi.fn()constComp={setup(){watch(toggle,cb,{flush:'pre'})},render(){}}constApp={render(){returntoggle.value?h(Comp):null}}newVue(App).$mount()expect(cb).not.toHaveBeenCalled()toggle.value=falseawaitnextTick()expect(cb).not.toHaveBeenCalled()})//vuejs/core#1763it('flush:prewatcherwatchingpropsshouldfirebeforechildupdate',async()=>{consta=ref(0)constb=ref(0)constc=ref(0)constcalls:string[]=[]constComp={props:['a','b'],setup(props:any){watch(()=>props.a+props.b,()=>{calls.push('watcher1')c.value++},{flush:'pre'})//vuejs/core#1777chainedpre-watcherwatch(c,()=>{calls.push('watcher2')},{flush:'pre'})return()=>{c.valuecalls.push('render')}}}constApp={render(){returnh(Comp,{props:{a:a.value,b:b.value}})}}newVue(App).$mount()expect(calls).toEqual(['render'])//bothpropsareupdated//shouldtriggerpre-flushwatcherfirstandonlyonce//thentriggerchildrendera.value++b.value++awaitnextTick()expect(calls).toEqual(['render','watcher1','watcher2','render'])})//vuejs/core#5721it('flush:pretriggeredincomponentsetupshouldbebufferedandcalledbeforemounted',()=>{constcount=ref(0)constcalls:string[]=[]constApp={render(){},setup(){watch(count,()=>{calls.push('watch'+count.value)},{flush:'pre'})onMounted(()=>{calls.push('mounted')})//mutatemultipletimescount.value++count.value++count.value++}}newVue(App).$mount()expect(calls).toMatchObject(['watch3','mounted'])})//vuejs/core#1852it('flush:postwatchershouldfireaftertemplaterefsupdated',async()=>{consttoggle=ref(false)letdom:HTMLElement|null=nullconstApp={setup(){constdomRef=ref<any>(null)watch(toggle,()=>{dom=domRef.value},{flush:'post'})return()=>{returntoggle.value?h('p',{ref:domRef}):null}}}newVue(App).$mount()expect(dom).toBe(null)toggle.value=trueawaitnextTick()expect(dom!.tagName).toBe('P')})it('deep',async()=>{conststate=reactive({nested:{count:ref(0)},array:[1,2,3]//map:newMap([//['a',1],//['b',2]//]),//set:newSet([1,2,3])})letdummywatch(()=>state,state=>{dummy=[state.nested.count,state.array[0]//state.map.get('a'),//state.set.has(1)]},{deep:true})state.nested.count++awaitnextTick()expect(dummy).toEqual([1,1])//nestedarraymutationset(state.array,0,2)awaitnextTick()expect(dummy).toEqual([1,2])//nestedmapmutation//state.map.set('a',2)//awaitnextTick()//expect(dummy).toEqual([1,2,2,true])//nestedsetmutation//state.set.delete(1)//awaitnextTick()//expect(dummy).toEqual([1,2,2,false])})it('watchingdeepref',async()=>{constcount=ref(0)constdouble=computed(()=>count.value*2)conststate=reactive({count,double})letdummywatch(()=>state,state=>{dummy=[state.count,state.double]},{deep:true})count.value++awaitnextTick()expect(dummy).toEqual([1,2])})it('immediate',async()=>{constcount=ref(0)constcb=vi.fn()watch(count,cb,{immediate:true})expect(cb).toHaveBeenCalledTimes(1)count.value++awaitnextTick()expect(cb).toHaveBeenCalledTimes(2)})it('immediate:triggerswheninitialvalueisnull',async()=>{conststate=ref(null)constspy=vi.fn()watch(()=>state.value,spy,{immediate:true})expect(spy).toHaveBeenCalled()})it('immediate:triggerswheninitialvalueisundefined',async()=>{conststate=ref()constspy=vi.fn()watch(()=>state.value,spy,{immediate:true})expect(spy).toHaveBeenCalled()state.value=3awaitnextTick()expect(spy).toHaveBeenCalledTimes(2)//testingifundefinedcantriggerthewatcherstate.value=undefinedawaitnextTick()expect(spy).toHaveBeenCalledTimes(3)//itshouldn'ttriggerifthesamevalueissetstate.value=undefinedawaitnextTick()expect(spy).toHaveBeenCalledTimes(3)})it('warnimmediateoptionwhenusingeffect',async()=>{constcount=ref(0)letdummywatchEffect(()=>{dummy=count.value},//@ts-expect-error{immediate:false})expect(dummy).toBe(0)expect(`"immediate"optionisonlyrespected`).toHaveBeenWarned()count.value++awaitnextTick()expect(dummy).toBe(1)})it('warnandnotrespectdeepoptionwhenusingeffect',async()=>{constarr=ref([1,[2]])constspy=vi.fn()watchEffect(()=>{spy()returnarr},//@ts-expect-error{deep:true})expect(spy).toHaveBeenCalledTimes(1);(arr.value[1]asArray<number>)[0]=3awaitnextTick()expect(spy).toHaveBeenCalledTimes(1)expect(`"deep"optionisonlyrespected`).toHaveBeenWarned()})it('onTrack',async()=>{constevents:DebuggerEvent[]=[]letdummyconstonTrack=vi.fn((e:DebuggerEvent)=>{events.push(e)})constobj=reactive({foo:1})constr=ref(2)constc=computed(()=>r.value+1)watchEffect(()=>{dummy=obj.foo+r.value+c.value},{onTrack})awaitnextTick()expect(dummy).toEqual(6)expect(onTrack).toHaveBeenCalledTimes(3)expect(events).toMatchObject([{target:obj,type:TrackOpTypes.GET,key:'foo'},{target:r,type:TrackOpTypes.GET,key:'value'},{target:c,type:TrackOpTypes.GET,key:'value'}])})it('onTrigger',async()=>{constevents:DebuggerEvent[]=[]letdummyconstonTrigger=vi.fn((e:DebuggerEvent)=>{events.push(e)})constobj=reactive<{foo:numberbar:any[]baz:{qux?:number}}>({foo:1,bar:[],baz:{}})watchEffect(()=>{dummy=obj.foo+(obj.bar[0]||0)+(obj.baz.qux||0)},{onTrigger})awaitnextTick()expect(dummy).toBe(1)obj.foo++awaitnextTick()expect(dummy).toBe(2)expect(onTrigger).toHaveBeenCalledTimes(1)expect(events[0]).toMatchObject({type:TriggerOpTypes.SET,key:'foo',target:obj,oldValue:1,newValue:2})obj.bar.push(1)awaitnextTick()expect(dummy).toBe(3)expect(onTrigger).toHaveBeenCalledTimes(2)expect(events[1]).toMatchObject({type:TriggerOpTypes.ARRAY_MUTATION,target:obj.bar,key:'push'})set(obj.baz,'qux',1)awaitnextTick()expect(dummy).toBe(4)expect(onTrigger).toHaveBeenCalledTimes(3)expect(events[2]).toMatchObject({type:TriggerOpTypes.ADD,target:obj.baz,key:'qux'})})it('shouldworksync',()=>{constv=ref(1)letcalls=0watch(v,()=>{++calls},{flush:'sync'})expect(calls).toBe(0)v.value++expect(calls).toBe(1)})test('shouldforcetriggerontriggerRefwhenwatchingashallowref',async()=>{constv=shallowRef({a:1})letsideEffect=0watch(v,obj=>{sideEffect=obj.a})v.value=v.valueawaitnextTick()//shouldnottriggerexpect(sideEffect).toBe(0)v.value.a++awaitnextTick()//shouldnottriggerexpect(sideEffect).toBe(0)triggerRef(v)awaitnextTick()//shouldtriggernowexpect(sideEffect).toBe(2)})test('shouldforcetriggerontriggerRefwhenwatchingmultiplesources:shallowrefarray',async()=>{constv=shallowRef([]asany)constspy=vi.fn()watch([v],()=>{spy()})v.value.push(1)triggerRef(v)awaitnextTick()//shouldtriggernowexpect(spy).toHaveBeenCalledTimes(1)})//vuejs/core#2125test('watchEffectshouldnotrecursivelytriggeritself',async()=>{constspy=vi.fn()constprice=ref(10)consthistory=ref<number[]>([])watchEffect(()=>{history.value.push(price.value)spy()})awaitnextTick()expect(spy).toHaveBeenCalledTimes(1)})//vuejs/core#2231test('computedrefsshouldnottriggerwatchifvaluehasnochange',async()=>{constspy=vi.fn()constsource=ref(0)constprice=computed(()=>source.value===0)watch(price,spy)source.value++awaitnextTick()source.value++awaitnextTick()expect(spy).toHaveBeenCalledTimes(1)})test('this.$watchshouldpass`this.proxy`towatchsourceasthefirstargument',()=>{letinstance:anyconstsource=vi.fn()constComp={render(){},created(this:any){instance=thisthis.$watch(source,function(){})}}constroot=document.createElement('div')newVue(Comp).$mount(root)expect(instance).toBeDefined()expect(source).toHaveBeenCalledWith(instance)})test('shouldnotleak`this.proxy`tosetup()',()=>{constsource=vi.fn()constComp={render(){},setup(){watch(source,()=>{})}}constroot=document.createElement('div')newVue(Comp).$mount(root)//shouldnothaveanyargumentsexpect(source.mock.calls[0]).toMatchObject([])})//vuejs/core#2728test('prewatchercallbacksshouldnottrackdependencies',async()=>{consta=ref(0)constb=ref(0)constupdated=vi.fn()constcb=vi.fn()constChild={props:['a'],updated,watch:{a(){cb()b.value}},render(){returnh('div',this.a)}}constParent={render(){returnh(Child,{props:{a:a.value}})}}constroot=document.createElement('div')newVue(Parent).$mount(root)a.value++awaitnextTick()expect(updated).toHaveBeenCalledTimes(1)expect(cb).toHaveBeenCalledTimes(1)b.value++awaitnextTick()//shouldnottrackbasdependencyofChildexpect(updated).toHaveBeenCalledTimes(1)expect(cb).toHaveBeenCalledTimes(1)})it('watchingsources:ref<any[]>',async()=>{constfoo=ref([1])constspy=vi.fn()watch(foo,()=>{spy()})foo.value=foo.value.slice()awaitnextTick()expect(spy).toBeCalledTimes(1)})it('watchingmultiplesources:computed',async()=>{letcount=0constvalue=ref('1')constplus=computed(()=>!!value.value)watch([plus],()=>{count++})value.value='2'awaitnextTick()expect(plus.value).toBe(true)expect(count).toBe(0)})//vuejs/core#4158test('watchshouldnotregisterinownercomponentifcreatedinsidedetachedscope',()=>{letinstance:ComponentconstComp={setup(){instance=getCurrentInstance()!.proxyeffectScope(true).run(()=>{watch(()=>1,()=>{})})return()=>''}}constroot=document.createElement('div')newVue(Comp).$mount(root)//shouldnotrecordwatcherindetachedscopeandonlytheinstance's//ownupdateeffectexpect(instance!._scope.effects.length).toBe(1)})//#12578test('templatereftriggeredwatchershouldfireaftercomponentmount',async()=>{constorder:string[]=[]constChild={template:'<div/>'}constApp={setup(){constchild=ref<any>(null)onMounted(()=>{order.push('mounted')})watch(child,()=>{order.push('watcher')})return{child}},components:{Child},template:`<Childref="child"/>`}newVue(App).$mount()awaitnextTick()expect(order).toMatchObject([`mounted`,`watcher`])})//#12624test('prewatchtriggeredinmountedhook',async()=>{constspy=vi.fn()newVue({setup(){constc=ref(0)onMounted(()=>{c.value++})watchEffect(()=>spy(c.value))return()=>{}}}).$mount()expect(spy).toHaveBeenCalledTimes(1)awaitnextTick()expect(spy).toHaveBeenCalledTimes(2)})//#12643test('shouldtriggerwatchonreactiveobjectwhennewpropertyisaddedviaset()',()=>{constspy=vi.fn()constobj=reactive({})watch(obj,spy,{flush:'sync'})set(obj,'foo',1)expect(spy).toHaveBeenCalled()})test('shouldnottriggerwatchwhencallingset()onrefvalue',()=>{constspy=vi.fn()constr=ref({})watch(r,spy,{flush:'sync'})set(r.value,'foo',1)expect(spy).not.toHaveBeenCalled()})//#12664it('queueingmultipleflush:postwatchers',async()=>{constparentSpy=vi.fn()constchildSpy=vi.fn()constChild={setup(){constel=ref()watch(el,childSpy,{flush:'post'})return{el}},template:`<div><spanref="el">hellochild</span></div>`}constApp={components:{Child},setup(){constel=ref()watch(el,parentSpy,{flush:'post'})return{el}},template:`<div><Child/><spanref="el">helloapp1</span></div>`}constcontainer=document.createElement('div')constroot=document.createElement('div')container.appendChild(root)newVue(App).$mount(root)awaitnextTick()expect(parentSpy).toHaveBeenCalledTimes(1)expect(childSpy).toHaveBeenCalledTimes(1)})})