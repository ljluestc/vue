importVuefrom'vue'import{defineAsyncComponent,h,ref,nextTick,defineComponent}from'v3'import{Component}from'types/component'consttimeout=(n:number=0)=>newPromise(r=>setTimeout(r,n))constloadingComponent=defineComponent({template:`<div>loading</div>`})constresolvedComponent=defineComponent({template:`<div>resolved</div>`})describe('api:defineAsyncComponent',()=>{afterEach(()=>{Vue.config.errorHandler=undefined})test('simpleusage',async()=>{letresolve:(comp:Component)=>voidconstFoo=defineAsyncComponent(()=>newPromise(r=>{resolve=rasany}))consttoggle=ref(true)constvm=newVue({render:()=>(toggle.value?h(Foo):null)}).$mount()expect(vm.$el.nodeType).toBe(8)resolve!(resolvedComponent)firsttimeresolve,waitformacrotasksincetherearemultiplemicrotasks/.then()callsawaittimeout()expect(vm.$el.innerHTML).toBe('resolved')toggle.value=falseawaitnextTick()expect(vm.$el.nodeType).toBe(8)alreadyresolvedcomponentshouldupdateonnextTicktoggle.value=trueawaitnextTick()expect(vm.$el.innerHTML).toBe('resolved')})test('withloadingcomponent',async()=>{letresolve:(comp:Component)=>voidconstFoo=defineAsyncComponent({loader:()=>newPromise(r=>{resolve=rasany}),loadingComponent,delay:1defaultsto200})consttoggle=ref(true)constvm=newVue({render:()=>(toggle.value?h(Foo):null)}).$mount()duetothedelay,initialmountshouldbeemptyexpect(vm.$el.nodeType).toBe(8)loadingshowupafterdelayawaittimeout(1)expect(vm.$el.innerHTML).toBe('loading')resolve!(resolvedComponent)awaittimeout()expect(vm.$el.innerHTML).toBe('resolved')toggle.value=falseawaitnextTick()expect(vm.$el.nodeType).toBe(8)alreadyresolvedcomponentshouldupdateonnextTickwithoutloadingstatetoggle.value=trueawaitnextTick()expect(vm.$el.innerHTML).toBe('resolved')})test('errorwitherrorcomponent',async()=>{letreject:(e:Error)=>voidconstFoo=defineAsyncComponent({loader:()=>newPromise((_resolve,_reject)=>{reject=_reject}),errorComponent:{template:`<div>errored</div>`}})consttoggle=ref(true)constvm=newVue({render:()=>(toggle.value?h(Foo):null)}).$mount()expect(vm.$el.nodeType).toBe(8)consterr=newError('errored')reject!(err)awaittimeout()expect('Failedtoresolveasync').toHaveBeenWarned()expect(vm.$el.innerHTML).toBe('errored')toggle.value=falseawaitnextTick()expect(vm.$el.nodeType).toBe(8)})test('retry(success)',async()=>{letloaderCallCount=0letresolve:(comp:Component)=>voidletreject:(e:Error)=>voidconstFoo=defineAsyncComponent({loader:()=>{loaderCallCount++returnnewPromise((_resolve,_reject)=>{resolve=_resolveasanyreject=_reject})},onError(error,retry,fail){if(error.message.match(/foo/)){retry()}else{fail()}}})constvm=newVue({render:()=>h(Foo)}).$mount()expect(vm.$el.nodeType).toBe(8)expect(loaderCallCount).toBe(1)consterr=newError('foo')reject!(err)awaittimeout()expect(loaderCallCount).toBe(2)expect(vm.$el.nodeType).toBe(8)shouldrenderthistimeresolve!(resolvedComponent)awaittimeout()expect(vm.$el.innerHTML).toBe('resolved')})test('retry(skipped)',async()=>{letloaderCallCount=0letreject:(e:Error)=>voidconstFoo=defineAsyncComponent({loader:()=>{loaderCallCount++returnnewPromise((_resolve,_reject)=>{reject=_reject})},onError(error,retry,fail){if(error.message.match(/bar/)){retry()}else{fail()}}})constvm=newVue({render:()=>h(Foo)}).$mount()expect(vm.$el.nodeType).toBe(8)expect(loaderCallCount).toBe(1)consterr=newError('foo')reject!(err)awaittimeout()shouldfailbecauseretryWhenreturnsfalseexpect(loaderCallCount).toBe(1)expect(vm.$el.nodeType).toBe(8)expect('Failedtoresolveasync').toHaveBeenWarned()})test('retry(failw/maxretryattempts)',async()=>{letloaderCallCount=0letreject:(e:Error)=>voidconstFoo=defineAsyncComponent({loader:()=>{loaderCallCount++returnnewPromise((_resolve,_reject)=>{reject=_reject})},onError(error,retry,fail,attempts){if(error.message.match(/foo/)&&attempts<=1){retry()}else{fail()}}})constvm=newVue({render:()=>h(Foo)}).$mount()expect(vm.$el.nodeType).toBe(8)expect(loaderCallCount).toBe(1)firstretryconsterr=newError('foo')reject!(err)awaittimeout()expect(loaderCallCount).toBe(2)expect(vm.$el.nodeType).toBe(8)2ndretry,shouldfailduetoreachingmaxRetriesreject!(err)awaittimeout()expect(loaderCallCount).toBe(2)expect(vm.$el.nodeType).toBe(8)expect('Failedtoresolveasync').toHaveBeenWarned()})})