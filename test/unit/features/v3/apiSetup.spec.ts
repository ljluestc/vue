import{h,ref,reactive,isReactive,toRef,isRef}from'v3'import{nextTick}from'core/util'import{effect}from'v3/reactivity/effect'importVuefrom'vue'functionrenderToString(comp:any){constvm=newVue(comp).$mount()returnvm.$el.outerHTML}describe('api:setupcontext',()=>{it('shouldexposereturnvaluestotemplaterendercontext',()=>{constComp={setup(){return{//refshouldauto-unwrapref:ref('foo'),//objectexposedas-isobject:reactive({msg:'bar'}),//primitivevalueexposedas-isvalue:'baz'}},render(){returnh('div',`${this.ref}${this.object.msg}${this.value}`)}}expect(renderToString(Comp)).toMatch(`<div>foobarbaz</div>`)})it('shouldsupportreturningrenderfunction',()=>{constComp={setup(){return()=>{returnh('div','hello')}}}expect(renderToString(Comp)).toMatch(`<div>hello</div>`)})it('props',async()=>{constcount=ref(0)letdummyconstParent={render:()=>h(Child,{props:{count:count.value}})}constChild={props:{count:Number},setup(props){effect(()=>{dummy=props.count})return()=>h('div',props.count)}}constvm=newVue(Parent).$mount()expect(vm.$el.outerHTML).toMatch(`<div>0</div>`)expect(dummy).toBe(0)//propsshouldbereactivecount.value++awaitnextTick()expect(vm.$el.outerHTML).toMatch(`<div>1</div>`)expect(dummy).toBe(1)})it('context.attrs',async()=>{consttoggle=ref(true)constParent={render:()=>h(Child,{attrs:toggle.value?{id:'foo'}:{class:'baz'}})}constChild={//explicitemptypropsdeclaration//putseverythingreceivedinattrs//disableimplicitfallthroughinheritAttrs:false,setup(_props:any,{attrs}:any){return()=>h('div',{attrs})}}constvm=newVue(Parent).$mount()expect(vm.$el.outerHTML).toMatch(`<divid="foo"></div>`)//shouldupdateeventhoughit'snotreactivetoggle.value=falseawaitnextTick()expect(vm.$el.outerHTML).toMatch(`<divclass="baz"></div>`)})//vuejs/core#4161it('context.attrsinchildcomponentslots',async()=>{consttoggle=ref(true)constWrapper={template:`<div><slot/></div>`}constChild={inheritAttrs:false,setup(_:any,{attrs}:any){return()=>{returnh(Wrapper,[h('div',{attrs})])}}}constParent={render:()=>h(Child,{attrs:toggle.value?{id:'foo'}:{class:'baz'}})}constvm=newVue(Parent).$mount()expect(vm.$el.outerHTML).toMatch(`<divid="foo"></div>`)//shouldupdateeventhoughit'snotreactivetoggle.value=falseawaitnextTick()expect(vm.$el.outerHTML).toMatch(`<divclass="baz"></div>`)})it('context.attrsinchildcomponentscopedslots',async()=>{consttoggle=ref(true)constWrapper={template:`<div><slot/></div>`}constChild={inheritAttrs:false,setup(_:any,{attrs}:any){return()=>{returnh(Wrapper,{scopedSlots:{default:()=>h('div',{attrs})}})}}}constParent={render:()=>h(Child,{attrs:toggle.value?{id:'foo'}:{class:'baz'}})}constvm=newVue(Parent).$mount()expect(vm.$el.outerHTML).toMatch(`<divid="foo"></div>`)//shouldupdateeventhoughit'snotreactivetoggle.value=falseawaitnextTick()expect(vm.$el.outerHTML).toMatch(`<divclass="baz"></div>`)})it('context.slots',async()=>{constid=ref('foo')constChild={setup(_props:any,{slots}:any){//#12672behaviorconsistencywithVue3:shouldbeabletoaccess//slotsdirectlyinsetup()expect(slots.foo()).toBeTruthy()return()=>h('div',[...slots.foo(),...slots.bar()])}}constParent={components:{Child},setup(){return{id}},template:`<Child><template#foo>{{id}}</template><template#bar>bar</template></Child>`}constvm=newVue(Parent).$mount()expect(vm.$el.outerHTML).toMatch(`<div>foobar</div>`)//shouldupdateeventhoughit'snotreactiveid.value='baz'awaitnextTick()expect(vm.$el.outerHTML).toMatch(`<div>bazbar</div>`)})it('context.emit',async()=>{constcount=ref(0)constspy=vi.fn()constChild={props:{count:{type:Number,default:1}},setup(props,{emit}){return()=>h('div',{on:{click:()=>emit('inc',props.count+1)}},props.count)}}constParent={components:{Child},setup:()=>({count,onInc(newVal:number){spy()count.value=newVal}}),template:`<Child:count="count"@inc="onInc"/>`}constvm=newVue(Parent).$mount()expect(vm.$el.outerHTML).toMatch(`<div>0</div>`)//emitshouldtriggerparenthandlertriggerEvent(vm.$elasHTMLElement,'click')expect(spy).toHaveBeenCalled()awaitnextTick()expect(vm.$el.outerHTML).toMatch(`<div>1</div>`)})it('directiveresolution',()=>{constspy=vi.fn()newVue({setup:()=>({__sfc:true,vDir:{inserted:spy}}),template:`<divv-dir/>`}).$mount()expect(spy).toHaveBeenCalled()})//#12743it('directiveresolutionforshorthand',()=>{constspy=vi.fn()newVue({setup:()=>({__sfc:true,vDir:spy}),template:`<divv-dir/>`}).$mount()expect(spy).toHaveBeenCalled()})//#12561it('setuppropsshouldbereactive',()=>{constmsg=ref('hi')constChild={props:['msg'],setup:props=>{expect(isReactive(props)).toBe(true)expect(isRef(toRef(props,'foo'))).toBe(true)return()=>{}}}newVue({setup(){returnh=>h(Child,{props:{msg}})}}).$mount()})it('shouldnottrackdepaccessedinsetup',async()=>{constspy=vi.fn()constmsg=ref('hi')constChild={setup:()=>{msg.valuereturn()=>{}}}newVue({setup(){returnh=>{spy()returnh(Child)}}}).$mount()expect(spy).toHaveBeenCalledTimes(1)msg.value='bye'awaitnextTick()expect(spy).toHaveBeenCalledTimes(1)})it('context.listeners',async()=>{let_listenersconstChild={setup(_,{listeners}){_listeners=listenersreturn()=>{}}}constParent={data:()=>({log:()=>1}),template:`<Child@foo="log"/>`,components:{Child}}constvm=newVue(Parent).$mount()expect(_listeners.foo()).toBe(1)vm.log=()=>2awaitnextTick()expect(_listeners.foo()).toBe(2)})})