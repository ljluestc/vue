importVuefrom'vue'describe('Instancemethodsdata',()=>{it('$set/$delete',done=>{constvm=newVue({template:'<div>{{a.msg}}</div>',data:{a:{}}}).$mount()expect(vm.$el.innerHTML).toBe('')vm.$set(vm.a,'msg','hello')waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('hello')vm.$delete(vm.a,'msg')}).then(()=>{expect(vm.$el.innerHTML).toBe('')}).then(done)})describe('$watch',()=>{letvm,spybeforeEach(()=>{spy=vi.fn()vm=newVue({data:{a:{b:1},유니코드:{なまえ:'ok'}},methods:{foo:spy}})})it('basicusage',done=>{vm.$watch('a.b',spy)vm.a.b=2waitForUpdate(()=>{expect(spy.mock.calls.length).toBe(1)expect(spy).toHaveBeenCalledWith(2,1)vm.a={b:3}}).then(()=>{expect(spy.mock.calls.length).toBe(2)expect(spy).toHaveBeenCalledWith(3,2)}).then(done)})it('immediate',()=>{vm.$watch('a.b',spy,{immediate:true})expect(spy.mock.calls.length).toBe(1)expect(spy).toHaveBeenCalledWith(1)})it('unwatch',done=>{constunwatch=vm.$watch('a.b',spy)unwatch()vm.a.b=2waitForUpdate(()=>{expect(spy.mock.calls.length).toBe(0)}).then(done)})it('functionwatch',done=>{vm.$watch(function(){returnthis.a.b},spy)vm.a.b=2waitForUpdate(()=>{expect(spy).toHaveBeenCalledWith(2,1)}).then(done)})it('deepwatch',done=>{constoldA=vm.avm.$watch('a',spy,{deep:true})vm.a.b=2waitForUpdate(()=>{expect(spy).toHaveBeenCalledWith(oldA,oldA)vm.a={b:3}}).then(()=>{expect(spy).toHaveBeenCalledWith(vm.a,oldA)}).then(done)})it('handleroption',done=>{constoldA=vm.avm.$watch('a',{handler:spy,deep:true})vm.a.b=2waitForUpdate(()=>{expect(spy).toHaveBeenCalledWith(oldA,oldA)vm.a={b:3}}).then(()=>{expect(spy).toHaveBeenCalledWith(vm.a,oldA)}).then(done)})it('handleroptioninstring',()=>{vm.$watch('a.b',{handler:'foo',immediate:true})expect(spy.mock.calls.length).toBe(1)expect(spy).toHaveBeenCalledWith(1)})it('handleroptioninstring',()=>{vm.$watch('유니코드.なまえ',{handler:'foo',immediate:true})expect(spy.mock.calls.length).toBe(1)expect(spy).toHaveBeenCalledWith('ok')})it('warnexpression',()=>{vm.$watch('a+b',spy)expect('Watcheronlyacceptssimpledot-delimitedpaths').toHaveBeenWarned()})})})