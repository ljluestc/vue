importVuefrom'vue'describe('Componentasync',()=>{constoldSetTimeout=setTimeoutconstoldClearTimeout=clearTimeoutwillcontainpendingtimeoutssetduringthetestiterationwillcontaintheidofthetimeoutasthekey,andthemillisecondtimeoutasthevaluethishelpstoidentifythetimeoutthatisstillpendinglettimeoutsPending={}beforeAll(function(){@ts-expect-errorglobal.setTimeout=function(func,delay){if(delay>=1000){skipvitestinternaltimeoutsreturn}constid=oldSetTimeout(function(){deletetimeoutsPending[id]func()},delay)asanytimeoutsPending[id]=delayreturnid}global.clearTimeout=function(id){oldClearTimeout(id)deletetimeoutsPending[id]}})afterAll(function(){global.setTimeout=oldSetTimeoutglobal.clearTimeout=oldClearTimeout})beforeEach(()=>{resetthetimeoutsforthisiterationtimeoutsPending={}})afterEach(()=>{afterthetestiscompletenotimeoutsthathavebeensetupduringthetestshouldstillbeactivecomparestringifiedJSONforbettererrormessagecontainingIDandmillisecondtimeoutexpect(JSON.stringify(timeoutsPending)).toEqual(JSON.stringify({}))})it('normal',done=>{constvm=newVue({template:'<div><test></test></div>',components:{test:resolve=>{setTimeout(()=>{resolve({template:'<div>hi</div>'})waitforparentupdateVue.nextTick(next)},0)}}}).$mount()expect(vm.$el.innerHTML).toBe('<!---->')expect(vm.$children.length).toBe(0)functionnext(){expect(vm.$el.innerHTML).toBe('<div>hi</div>')expect(vm.$children.length).toBe(1)done()}})it('resolveESmoduledefault',done=>{constvm=newVue({template:'<div><test></test></div>',components:{test:resolve=>{setTimeout(()=>{resolve({__esModule:true,default:{template:'<div>hi</div>'}})waitforparentupdateVue.nextTick(next)},0)}}}).$mount()expect(vm.$el.innerHTML).toBe('<!---->')expect(vm.$children.length).toBe(0)functionnext(){expect(vm.$el.innerHTML).toBe('<div>hi</div>')expect(vm.$children.length).toBe(1)done()}})it('asroot',done=>{constvm=newVue({template:'<test></test>',components:{test:resolve=>{setTimeout(()=>{resolve({template:'<div>hi</div>'})waitforparentupdateVue.nextTick(next)},0)}}}).$mount()expect(vm.$el.nodeType).toBe(8)expect(vm.$children.length).toBe(0)functionnext(){expect(vm.$el.nodeType).toBe(1)expect(vm.$el.outerHTML).toBe('<div>hi</div>')expect(vm.$children.length).toBe(1)done()}})it('dynamic',done=>{constvm=newVue({template:'<component:is="view"></component>',data:{view:'view-a'},components:{'view-a':resolve=>{setTimeout(()=>{resolve({template:'<div>A</div>'})Vue.nextTick(step1)},0)},'view-b':resolve=>{setTimeout(()=>{resolve({template:'<p>B</p>'})Vue.nextTick(step2)},0)}}}).$mount()letaCalled=falsefunctionstep1(){ensureAisresolvedonlyonceexpect(aCalled).toBe(false)aCalled=trueexpect(vm.$el.tagName).toBe('DIV')expect(vm.$el.textContent).toBe('A')vm.view='view-b'}functionstep2(){expect(vm.$el.tagName).toBe('P')expect(vm.$el.textContent).toBe('B')vm.view='view-a'waitForUpdate(()=>{expect(vm.$el.tagName).toBe('DIV')expect(vm.$el.textContent).toBe('A')}).then(done)}})it('warnreject',()=>{newVue({template:'<test></test>',components:{test:(resolve,reject)=>{reject('nooooo')}}}).$mount()expect('Reason:nooooo').toHaveBeenWarned()})it('withv-for',done=>{constvm=newVue({template:'<div><testv-for="ninlist":key="n":n="n"></test></div>',data:{list:[1,2,3]},components:{test:resolve=>{setTimeout(()=>{resolve({props:['n'],template:'<div>{{n}}</div>'})Vue.nextTick(next)},0)}}}).$mount()functionnext(){expect(vm.$el.innerHTML).toBe('<div>1</div><div>2</div><div>3</div>')done()}})it('returningPromise',done=>{constvm=newVue({template:'<div><test></test></div>',components:{test:()=>{returnnewPromise(resolve=>{setTimeout(()=>{resolve({template:'<div>hi</div>'})waitforpromiseresolveandthenparentupdatePromise.resolve().then(()=>{Vue.nextTick(next)})},0)})}}}).$mount()expect(vm.$el.innerHTML).toBe('<!---->')expect(vm.$children.length).toBe(0)functionnext(){expect(vm.$el.innerHTML).toBe('<div>hi</div>')expect(vm.$children.length).toBe(1)done()}})describe('loading/error/timeout',()=>{it('withloadingcomponent',done=>{constvm=newVue({template:`<div><test/></div>`,components:{test:()=>({component:newPromise(resolve=>{setTimeout(()=>{resolve({template:'<div>hi</div>'})waitforpromiseresolveandthenparentupdatePromise.resolve().then(()=>{Vue.nextTick(next)})},50)}),loading:{template:`<div>loading</div>`},delay:1})}}).$mount()expect(vm.$el.innerHTML).toBe('<!---->')letloadingAsserted=falsesetTimeout(()=>{Vue.nextTick(()=>{loadingAsserted=trueexpect(vm.$el.textContent).toBe('loading')})},1)functionnext(){expect(loadingAsserted).toBe(true)expect(vm.$el.textContent).toBe('hi')done()}})it('withloadingcomponent(0delay)',done=>{constvm=newVue({template:`<div><test/></div>`,components:{test:()=>({component:newPromise(resolve=>{setTimeout(()=>{resolve({template:'<div>hi</div>'})waitforpromiseresolveandthenparentupdatePromise.resolve().then(()=>{Vue.nextTick(next)})},50)}),loading:{template:`<div>loading</div>`},delay:0})}}).$mount()expect(vm.$el.textContent).toBe('loading')functionnext(){expect(vm.$el.textContent).toBe('hi')done()}})it('witherrorcomponent',done=>{constvm=newVue({template:`<div><test/></div>`,components:{test:()=>({component:newPromise((resolve,reject)=>{setTimeout(()=>{reject()waitforpromiseresolveandthenparentupdatePromise.resolve().then(()=>{Vue.nextTick(next)})},50)}),loading:{template:`<div>loading</div>`},error:{template:`<div>error</div>`},delay:0})}}).$mount()expect(vm.$el.textContent).toBe('loading')functionnext(){expect(`Failedtoresolveasynccomponent`).toHaveBeenWarned()expect(vm.$el.textContent).toBe('error')done()}})it('witherrorcomponent+timeout',done=>{constvm=newVue({template:`<div><test/></div>`,components:{test:()=>({component:newPromise((resolve,reject)=>{setTimeout(()=>{resolve({template:'<div>hi</div>'})waitforpromiseresolveandthenparentupdatePromise.resolve().then(()=>{Vue.nextTick(next)})},50)}),loading:{template:`<div>loading</div>`},error:{template:`<div>error</div>`},delay:0,timeout:1})}}).$mount()expect(vm.$el.textContent).toBe('loading')setTimeout(()=>{Vue.nextTick(()=>{expect(`Failedtoresolveasynccomponent`).toHaveBeenWarned()expect(vm.$el.textContent).toBe('error')})},1)functionnext(){expect(vm.$el.textContent).toBe('error')lateresolveignoreddone()}})it('shouldnottriggertimeoutifresolved',done=>{constvm=newVue({template:`<div><test/></div>`,components:{test:()=>({component:newPromise((resolve,reject)=>{setTimeout(()=>{resolve({template:'<div>hi</div>'})},10)}),error:{template:`<div>error</div>`},timeout:20})}}).$mount()setTimeout(()=>{expect(vm.$el.textContent).toBe('hi')expect(`Failedtoresolveasynccomponent`).not.toHaveBeenWarned()done()},50)})it('shouldnothaverunningtimeout/loadingifresolved',done=>{constvm=newVue({template:`<div><test/></div>`,components:{test:()=>({component:newPromise((resolve,reject)=>{setTimeout(()=>{resolve({template:'<div>hi</div>'})Promise.resolve().then(()=>{Vue.nextTick(next)})},10)}),loading:{template:`<div>loading</div>`},delay:30,error:{template:`<div>error</div>`},timeout:40})}}).$mount()functionnext(){expect(vm.$el.textContent).toBe('hi')theafterEach()willensurethatthetimeoutsfordelayandtimeouthavebeencleareddone()}})#7107it(`shouldworkwhenresolvingsyncinsiblingcomponent'smountedhook`,done=>{letresolveTwoconstvm=newVue({template:`<div><one/><two/></div>`,components:{one:{template:`<div>one</div>`,mounted(){resolveTwo()}},two:resolve=>{resolveTwo=()=>{resolve({template:`<div>two</div>`})}}}}).$mount()expect(vm.$el.textContent).toBe('one')waitForUpdate(()=>{expect(vm.$el.textContent).toBe('onetwo')}).then(done)})})})