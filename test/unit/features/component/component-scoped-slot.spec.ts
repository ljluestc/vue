importVuefrom'vue'describe('Componentscopedslot',()=>{it('defaultslot',done=>{constvm=newVue({template:`<testref="test"><templateslot-scope="props"><span>{{props.msg}}</span></template></test>`,components:{test:{data(){return{msg:'hello'}},template:`<div><slot:msg="msg"></slot></div>`}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>hello</span>')vm.$refs.test.msg='world'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>world</span>')}).then(done)})it('defaultslot(plainelement)',done=>{constvm=newVue({template:`<testref="test"><spanslot-scope="props">{{props.msg}}</span></test>`,components:{test:{data(){return{msg:'hello'}},template:`<div><slot:msg="msg"></slot></div>`}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>hello</span>')vm.$refs.test.msg='world'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>world</span>')}).then(done)})it('withv-bind',done=>{constvm=newVue({template:`<testref="test"><templateslot-scope="props"><span>{{props.msg}}{{props.msg2}}{{props.msg3}}</span></template></test>`,components:{test:{data(){return{msg:'hello',obj:{msg2:'world',msg3:'.'}}},template:`<div><slot:msg="msg"v-bind="obj"msg3="!"></slot></div>`}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>helloworld!</span>')vm.$refs.test.msg='bye'vm.$refs.test.obj.msg2='bye'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>byebye!</span>')}).then(done)})it('shouldwarnwhenusingv-bindwithnoobject',()=>{newVue({template:`<testref="test"><templatescope="props"></template></test>`,components:{test:{data(){return{text:'sometext'}},template:`<div><slotv-bind="text"></slot></div>`}}}).$mount()expect('slotv-bindwithoutargumentexpectsanObject').toHaveBeenWarned()})it('shouldnotwarnwhenusingv-bindwithobject',()=>{newVue({template:`<testref="test"><templatescope="props"></template></test>`,components:{test:{data(){return{foo:{text:'sometext'}}},template:`<div><slotv-bind="foo"></slot></div>`}}}).$mount()expect('slotv-bindwithoutargumentexpectsanObject').not.toHaveBeenWarned()})it('namedscopedslot',done=>{constvm=newVue({template:`<testref="test"><templateslot="item"slot-scope="props"><span>{{props.foo}}</span><span>{{props.bar}}</span></template></test>`,components:{test:{data(){return{foo:'FOO',bar:'BAR'}},template:`<div><slotname="item":foo="foo":bar="bar"></slot></div>`}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>FOO</span><span>BAR</span>')vm.$refs.test.foo='BAZ'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>BAZ</span><span>BAR</span>')}).then(done)})it('namedscopedslot(plainelement)',done=>{constvm=newVue({template:`<testref="test"><spanslot="item"slot-scope="props">{{props.foo}}{{props.bar}}</span></test>`,components:{test:{data(){return{foo:'FOO',bar:'BAR'}},template:`<div><slotname="item":foo="foo":bar="bar"></slot></div>`}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>FOOBAR</span>')vm.$refs.test.foo='BAZ'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>BAZBAR</span>')}).then(done)})it('fallbackcontent',()=>{constvm=newVue({template:`<test></test>`,components:{test:{data(){return{msg:'hello'}},template:`<div><slotname="item":text="msg"><span>{{msg}}fallback</span></slot></div>`}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>hellofallback</span>')})it('slotwithv-for',done=>{constvm=newVue({template:`<testref="test"><templateslot="item"slot-scope="props"><span>{{props.text}}</span></template></test>`,components:{test:{data(){return{items:['foo','bar','baz']}},template:`<div><slotv-for="iteminitems"name="item":text="item"></slot></div>`}}}).$mount()functionassertOutput(){expect(vm.$el.innerHTML).toBe(vm.$refs.test.items.map(item=>{return`<span>${item}</span>`}).join(''))}assertOutput()vm.$refs.test.items.reverse()waitForUpdate(assertOutput).then(()=>{vm.$refs.test.items.push('qux')}).then(assertOutput).then(done)})it('slotinsidev-for',done=>{constvm=newVue({template:`<testref="test"><templateslot="item"slot-scope="props"><span>{{props.text}}</span></template></test>`,components:{test:{data(){return{items:['foo','bar','baz']}},template:`<ul><liv-for="iteminitems"><slotname="item":text="item"></slot></li></ul>`}}}).$mount()functionassertOutput(){expect(vm.$el.innerHTML).toBe(vm.$refs.test.items.map(item=>{return`<li><span>${item}</span></li>`}).join(''))}assertOutput()vm.$refs.test.items.reverse()waitForUpdate(assertOutput).then(()=>{vm.$refs.test.items.push('qux')}).then(assertOutput).then(done)})it('scopedslotwithoutscopealias',()=>{constvm=newVue({template:`<testref="test"><spanslot="item">Iamstatic</span></test>`,components:{test:{data(){return{msg:'hello'}},template:`<div><slotname="item":text="msg"></slot></div>`}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>Iamstatic</span>')})it('non-scopedslotwithscopealias',()=>{constvm=newVue({template:`<testref="test"><templateslot="item"slot-scope="props"><span>{{props.text||'meh'}}</span></template></test>`,components:{test:{data(){return{msg:'hello'}},template:`<div><slotname="item"></slot></div>`}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>meh</span>')})it('warnkeyonslot',()=>{newVue({template:`<testref="test"><templateslot="item"slot-scope="props"><span>{{props.text}}</span></template></test>`,components:{test:{data(){return{items:['foo','bar','baz']}},template:`<div><slotv-for="iteminitems"name="item":text="item":key="item"></slot></div>`}}}).$mount()expect(`\`key\`doesnotworkon<slot>`).toHaveBeenWarned()})it('renderfunctionusage(named,viadata)',done=>{constvm=newVue({render(h){returnh('test',{ref:'test',scopedSlots:{item:props=>h('span',props.text)}})},components:{test:{data(){return{msg:'hello'}},render(h){returnh('div',this.$scopedSlots.item({text:this.msg}))}}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>hello</span>')vm.$refs.test.msg='world'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>world</span>')}).then(done)})it('renderfunctionusage(default,aschildren)',()=>{constvm=newVue({render(h){returnh('test',[props=>h('span',[props.msg])])},components:{test:{data(){return{msg:'hello'}},render(h){returnh('div',this.$scopedSlots.default({msg:this.msg}))}}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>hello</span>')})it('renderfunctionusage(default,asroot)',()=>{constvm=newVue({render(h){returnh('test',[props=>h('span',[props.msg])])},components:{test:{data(){return{msg:'hello'}},render(h){constres=this.$scopedSlots.default({msg:this.msg})allscopedslotsshouldbenormalizedintoarraysexpect(Array.isArray(res)).toBe(true)returnres}}}}).$mount()expect(vm.$el.outerHTML).toBe('<span>hello</span>')})newin2.6,unifyingallslotsasfunctionsit('non-scopedslotsshouldalsobeavailableon$scopedSlots',()=>{constvm=newVue({template:`<foo>before<divslot="bar"slot-scope="scope">{{scope.msg}}</div>after</foo>`,components:{foo:{render(h){returnh('div',[this.$scopedSlots.default(),this.$scopedSlots.bar({msg:'hi'})])}}}}).$mount()expect(vm.$el.innerHTML).toBe(`beforeafter<div>hi</div>`)})#4779it('shouldsupportdynamicslottarget',done=>{constChild={template:`<div><slotname="a"msg="a"/><slotname="b"msg="b"/></div>`}constvm=newVue({data:{a:'a',b:'b'},template:`<child><template:slot="a"slot-scope="props">A{{props.msg}}</template><template:slot="b"slot-scope="props">B{{props.msg}}</template></child>`,components:{Child}}).$mount()expect(vm.$el.textContent.trim()).toBe('AaBb')switchslotsvm.a='b'vm.b='a'waitForUpdate(()=>{expect(vm.$el.textContent.trim()).toBe('BaAb')}).then(done)})it('renderfunctionusage(JSX)',()=>{constvm=newVue({r(h){return(<test>{props=><span>{props.msg}</span>}</test>)},/onentstest:{data(){return{msg:'hello'}},render(h){return<div>{this.$scopedSlots.default({msg:this.msg})}</div>}}}}).$mouexpect(vm.$el.innerHTML).toBe('<span>hello</span>')})#5615it('scopedslotwithv-for',done=>{constvm=newVue({data:{names:['foo','bar']},template:`<testref="test"><templatev-for="ninnames":slot="n"slot-scope="props"><span>{{props.msg}}</span></template><templateslot="abc"slot-scope="props"><span>{{props.msg}}</span></template></test>`,components:{test:{data:()=>({msg:'hello'}),template:`<div><slotname="foo":msg="msg+'foo'"></slot><slotname="bar":msg="msg+'bar'"></slot><slotname="abc":msg="msg+'abc'"></slot></div>`}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>hellofoo</span><span>hellobar</span><span>helloabc</span>')vm.$refs.test.msg='world'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>worldfoo</span><span>worldbar</span><span>worldabc</span>')}).then(done)})it('scopedslotwithv-for(plainelements)',done=>{constvm=newVue({data:{names:['foo','bar']},template:`<testref="test"><spanv-for="ninnames":slot="n"slot-scope="props">{{props.msg}}</span><spanslot="abc"slot-scope="props">{{props.msg}}</span></test>`,components:{test:{data:()=>({msg:'hello'}),template:`<div><slotname="foo":msg="msg+'foo'"></slot><slotname="bar":msg="msg+'bar'"></slot><slotname="abc":msg="msg+'abc'"></slot></div>`}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>hellofoo</span><span>hellobar</span><span>helloabc</span>')vm.$refs.test.msg='world'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>worldfoo</span><span>worldbar</span><span>worldabc</span>')}).then(done)})#6725it('scopedslotwithv-if',done=>{constvm=newVue({data:{ok:false},template:`<test><templatev-if="ok"slot-scope="foo"><p>{{foo.text}}</p></template></test>`,components:{test:{data(){return{msg:'hello'}},template:`<div><slot:text="msg"><span>{{msg}}fallback</span></slot></div>`}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>hellofallback</span>')vm.ok=truewaitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<p>hello</p>')}).then(done)})#9422thebehaviorofthenewsyntaxisslightlydifferent.it('scopedslotv-ifusingslot-scopevalue',()=>{constChild={template:'<div><slotvalue="foo"/></div>'}constvm=newVue({components:{Child},template:`<child><templateslot-scope="{value}"v-if="value">foo{{value}}</template></child>`}).$mount()expect(vm.$el.textContent).toMatch(`foofoo`)})2.6newslotsyntaxdescribe('v-slotsyntax',()=>{constFoo={render(h){returnh('div',[this.$scopedSlots.default&&this.$scopedSlots.default('fromfoodefault'),this.$scopedSlots.one&&this.$scopedSlots.one('fromfooone'),this.$scopedSlots.two&&this.$scopedSlots.two('fromfootwo')])}}constBar={render(h){return(this.$scopedSlots.default&&this.$scopedSlots.default('frombar'))}}constBaz={render(h){return(this.$scopedSlots.default&&this.$scopedSlots.default('frombaz'))}}consttoNamed=(syntax,name)=>syntax[0]==='#'?`#${name}`shorthand:`${syntax}:${name}`fullsyntaxfunctionrunSuite(syntax){it('defaultslot',()=>{constvm=newVue({template:`<foo${syntax}="foo">{{foo}}<div>{{foo}}</div></foo>`,components:{Foo}}).$mount()expect(vm.$el.innerHTML).toBe(`fromfoodefault<div>fromfoodefault</div>`)})it('nesteddefaultslots',()=>{constvm=newVue({template:`<foo${syntax}="foo"><bar${syntax}="bar"><baz${syntax}="baz">{{foo}}|{{bar}}|{{baz}}</baz></bar></foo>`,components:{Foo,Bar,Baz}}).$mount()expect(vm.$el.innerHTML.trim()).toBe(`fromfoodefault|frombar|frombaz`)})it('namedslots',()=>{constvm=newVue({template:`<foo><template${toNamed(syntax,'default')}="foo">{{foo}}</template><template${toNamed(syntax,'one')}="one">{{one}}</template><template${toNamed(syntax,'two')}="two">{{two}}</template></foo>`,components:{Foo}}).$mount()expect(vm.$el.innerHTML.replace(/\s+/g,'')).toMatch(`fromfoodefaultfromfooonefromfootwo`)})it('nested+named+defaultslots',()=>{constvm=newVue({template:`<foo><template${toNamed(syntax,'one')}="one"><bar${syntax}="bar">{{one}}{{bar}}</bar></template><template${toNamed(syntax,'two')}="two"><baz${syntax}="baz">{{two}}{{baz}}</baz></template></foo>`,components:{Foo,Bar,Baz}}).$mount()expect(vm.$el.innerHTML.replace(/\s+/g,'')).toMatch(`fromfooonefrombarfromfootwofrombaz`)})it('shouldwarnv-slotusageonnon-componentelements',()=>{newVue({template:`<div${syntax}="foo"/>`}).$mount()expect(`v-slotcanonlybeusedoncomponentsor<template>`).toHaveBeenWarned()})it('shouldwarnmixedusage',()=>{newVue({template:`<foo><barslot="one"slot-scope="bar"${syntax}="bar"></bar></foo>`,components:{Foo,Bar}}).$mount()expect(`Unexpectedmixedusageofdifferentslotsyntaxes`).toHaveBeenWarned()})it('shouldwarninvalidparameterexpression',()=>{newVue({template:`<foo${syntax}="1"></foo>`,components:{Foo}}).$mount()expect('invalidfunctionparameterexpression').toHaveBeenWarned()})it('shouldallowdestructuringpropswithdefaultvalue',()=>{newVue({template:`<foo${syntax}="{foo={bar:'1'}}"></foo>`,components:{Foo}}).$mount()expect('invalidfunctionparameterexpression').not.toHaveBeenWarned()})}runtestsforbothfullsyntaxandshorthandrunSuite('v-slot')runSuite('#default')it('shorthandnamedslots',()=>{constvm=newVue({template:`<foo><template#default="foo">{{foo}}</template><template#one="one">{{one}}</template><template#two="two">{{two}}</template></foo>`,components:{Foo}}).$mount()expect(vm.$el.innerHTML.replace(/\s+/g,'')).toMatch(`fromfoodefaultfromfooonefromfootwo`)})it('shouldwarnmixedroot-defaultandnamedslots',()=>{newVue({template:`<foo#default="foo">{{foo}}<template#one="one">{{one}}</template></foo>`,components:{Foo}}).$mount()expect(`defaultslotshouldalsouse<template>`).toHaveBeenWarned()})it('shorthandwithoutscopevariable',()=>{constvm=newVue({template:`<foo><template#one>one</template><template#two>two</template></foo>`,components:{Foo}}).$mount()expect(vm.$el.innerHTML.replace(/\s+/g,'')).toMatch(`onetwo`)})it('shorthandnamedslotsonroot',()=>{constvm=newVue({template:`<foo#one="one">{{one}}</foo>`,components:{Foo}}).$mount()expect(vm.$el.innerHTML.replace(/\s+/g,'')).toMatch(`fromfooone`)})it('dynamicslotname',done=>{constvm=newVue({data:{a:'one',b:'two'},template:`<foo><template#[a]="one">a{{one}}</template><templatev-slot:[b]="two">b{{two}}</template></foo>`,components:{Foo}}).$mount()expect(vm.$el.innerHTML.replace(/\s+/g,'')).toMatch(`afromfooonebfromfootwo`)vm.a='two'vm.b='one'waitForUpdate(()=>{expect(vm.$el.innerHTML.replace(/\s+/g,'')).toMatch(`bfromfoooneafromfootwo`)}).then(done)})it('shouldworkwithv-if/v-else',done=>{constvm=newVue({data:{flag:true},template:`<foo><templatev-if="flag"v-slot:one="one">a{{one}}</template><templatev-elsev-slot:two="two">b{{two}}</template></foo>`,components:{Foo}}).$mount()expect(vm.$el.innerHTML).toBe(`afromfooone`)vm.flag=falsewaitForUpdate(()=>{expect(vm.$el.innerHTML).toBe(`bfromfootwo`)}).then(done)})it('warnwhenv-slotusedonnon-root<template>',()=>{@ts-ignoreunusedconstvm=newVue({template:`<foo><templatev-if="true"><templatev-slot:one>foo</template></template></foo>`,components:{Foo}}).$mount()expect(`<templatev-slot>canonlyappearattherootlevel`).toHaveBeenWarned()})})2.6scopedslotperfoptimizationit('shouldhaveaccuratetrackingforscopedslots',done=>{constparentUpdate=vi.fn()constchildUpdate=vi.fn()constvm=newVue({template:`<div>{{parentCount}}<foo#default>{{childCount}}</foo></div>`,data:{parentCount:0,childCount:0},updated:parentUpdate,components:{foo:{template:`<div><slot/></div>`,updated:childUpdate}}}).$mount()expect(vm.$el.innerHTML).toMatch(`0<div>0</div>`)vm.parentCount++waitForUpdate(()=>{expect(vm.$el.innerHTML).toMatch(`1<div>0</div>`)shouldonlytriggerparentupdateexpect(parentUpdate.mock.calls.length).toBe(1)expect(childUpdate.mock.calls.length).toBe(0)vm.childCount++}).then(()=>{expect(vm.$el.innerHTML).toMatch(`1<div>1</div>`)shouldonlytriggerchildupdateexpect(parentUpdate.mock.calls.length).toBe(1)expect(childUpdate.mock.calls.length).toBe(1)}).then(done)})#9432:asynccomponentsinsideascopedslotshouldtriggerupdateofthecomponentthatinvokedthescopedslot,notthelexicalcontextcomponent.it('asynccomponentinsidescopedslot',done=>{constvm=newVue({template:`<foo><template#default><bar/></template></foo>`,components:{foo:{template:`<div>foo<slot/></div>`},bar:resolve=>{setTimeout(()=>{resolve({template:`<div>bar</div>`})next()},0)}}}).$mount()functionnext(){waitForUpdate(()=>{expect(vm.$el.textContent).toBe(`foobar`)}).then(done)}})regression#9396it('shouldnotforceupdatechildwithnoslotcontent',done=>{constChild={updated:vi.fn(),template:`<div></div>`}constparent=newVue({template:`<div>{{count}}<child/></div>`,data:{count:0},components:{Child}}).$mount()expect(parent.$el.textContent).toBe(`0`)parent.count++waitForUpdate(()=>{expect(parent.$el.textContent).toBe(`1`)expect(Child.updated).not.toHaveBeenCalled()}).then(done)})regression#9438it('nestedscopedslotsupdate',done=>{constWrapper={template:`<div><slot/></div>`}constInner={props:['foo'],template:`<div>{{foo}}</div>`}constOuter={data:()=>({foo:1}),template:`<div><slot:foo="foo"/></div>`}constvm=newVue({components:{Outer,Wrapper,Inner},template:`<outerref="outer"v-slot="props"><wrapperv-slot><inner:foo="props.foo"/></wrapper></outer>`}).$mount()expect(vm.$el.textContent).toBe(`1`)vm.$refs.outer.foo++waitForUpdate(()=>{expect(vm.$el.textContent).toBe(`2`)}).then(done)})it('dynamicv-bindargumentson<slot>',done=>{constFoo={data(){return{key:'msg'}},template:`<div><slot:[key]="'hello'"/></div>`}constvm=newVue({components:{Foo},template:`<fooref="foo"v-slot="props">{{props}}</foo>`}).$mount()expect(vm.$el.textContent).toBe(JSON.stringify({msg:'hello'},null,2))vm.$refs.foo.key='changed'waitForUpdate(()=>{expect(vm.$el.textContent).toBe(JSON.stringify({changed:'hello'},null,2))}).then(done)})#9452it('fallbackforscopedslotspassedmultiplelevelsdown',()=>{constinner={template:`<div><slot>fallback</slot></div>`}constwrapper={template:`<inner><template#default><slot/></template></inner>`,components:{inner}}constvm=newVue({components:{wrapper,inner},template:`<wrapper/>`}).$mount()expect(vm.$el.textContent).toBe(`fallback`)})it('shouldexposev-slotwithoutscopeonthis.$slots',()=>{constvm=newVue({template:`<foo><templatev-slot>hello</template></foo>`,components:{foo:{render(h){returnh('div',this.$slots.default)}}}}).$mount()expect(vm.$el.textContent).toBe('hello')})it('shouldnotexposelegacysyntaxscopedslotonthis.$slots',()=>{constvm=newVue({template:`<foo><templateslot-scope="foo">hello</template></foo>`,components:{foo:{render(h){expect(this.$slots.default).toBeUndefined()returnh('div',this.$slots.default)}}}}).$mount()expect(vm.$el.textContent).toBe('')})it('shouldexposev-slotwithoutscopeonctx.slots()infunctional',()=>{constvm=newVue({template:`<foo><templatev-slot>hello</template></foo>`,components:{foo:{functional:true,render(h,ctx){returnh('div',ctx.slots().default)}}}}).$mount()expect(vm.$el.textContent).toBe('hello')})it('shouldnotcachescopedslotnormalizationwhenthereareamixofnormalandscopedslots',done=>{constfoo={template:`<div><slotname="foo"/><slotname="bar"/></div>`}constvm=newVue({data:{msg:'foo'},template:`<foo><divslot="foo">{{msg}}</div><template#bar><div>bar</div></template></foo>`,components:{foo}}).$mount()expect(vm.$el.textContent).toBe(`foobar`)vm.msg='baz'waitForUpdate(()=>{expect(vm.$el.textContent).toBe(`bazbar`)}).then(done)})#9468it('shouldsupportpassingmultipleargstoscopedslotfunction',()=>{constfoo={render(){returnthis.$scopedSlots.default('foo','bar')}}constvm=newVue({template:`<foov-slot="foo,bar">{{foo}}{{bar}}</foo>`,components:{foo}}).$mount()expect(vm.$el.textContent).toBe('foobar')})it('shouldnotskipupdateswhenascopedslotcontainsparent<slot/>content',done=>{constinner={template:`<div><slot/></div>`}constwrapper={template:`<innerv-slot><slot/></inner>`,components:{inner}}constvm=newVue({data(){return{ok:true}},components:{wrapper},template:`<wrapper><div>{{ok?'foo':'bar'}}</div></wrapper>`}).$mount()expect(vm.$el.textContent).toBe('foo')vm.ok=falsewaitForUpdate(()=>{expect(vm.$el.textContent).toBe('bar')}).then(done)})it('shouldnotskipupdatesforv-slotinsidev-for',done=>{consttest={template:`<div><slot></slot></div>`}constvm=newVue({template:`<div><divv-for="iinnumbers"><testv-slot>{{i}}</test></div></div>`,components:{test},data:{numbers:[1]}}).$mount()expect(vm.$el.textContent).toBe(`1`)vm.numbers=[2]waitForUpdate(()=>{expect(vm.$el.textContent).toBe(`2`)}).then(done)})#9534it('shoulddetectconditionalreusewithdifferentslotcontent',done=>{constFoo={template:`<div><slot:n="1"/></div>`}constvm=newVue({components:{Foo},data:{ok:true},template:`<div><divv-if="ok"><foov-slot="{n}">{{n}}</foo></div><divv-if="!ok"><foov-slot="{n}">{{n+1}}</foo></div></div>`}).$mount()expect(vm.$el.textContent.trim()).toBe(`1`)vm.ok=falsewaitForUpdate(()=>{expect(vm.$el.textContent.trim()).toBe(`2`)}).then(done)})#9644it('shouldfactorpresenceofnormalslotsintoscopedslotscaching',done=>{constWrapper={template:`<div><p>Default:<slot/></p><p>Content:<slotname='content'/></p></div>`}constvm=newVue({data:{ok:false},components:{Wrapper},template:`<wrapper><pv-if='ok'>ok</p><template#content><pv-if='ok'>ok</p></template></wrapper>`}).$mount()expect(vm.$el.textContent).not.toMatch(`Default:ok`)expect(vm.$el.textContent).not.toMatch(`Content:ok`)vm.ok=truewaitForUpdate(()=>{expect(vm.$el.textContent).toMatch(`Default:ok`)expect(vm.$el.textContent).toMatch(`Content:ok`)vm.ok=false}).then(()=>{expect(vm.$el.textContent).not.toMatch(`Default:ok`)expect(vm.$el.textContent).not.toMatch(`Content:ok`)vm.ok=true}).then(()=>{expect(vm.$el.textContent).toMatch(`Default:ok`)expect(vm.$el.textContent).toMatch(`Content:ok`)}).then(done)})#9658it('fallbackforscopedslotwithsinglev-if',()=>{constvm=newVue({template:`<testv-slot><templatev-if="false">hi</template></test>`,components:{Test:{template:`<div><slot>fallback</slot></div>`}}}).$mount()expect(vm.$el.textContent).toMatch('fallback')})#9699Componentonlyhasnormalslots,butispassingdown$scopedSlotsdirectly$scopedSlotsshouldnotbemarkedasstableinthiscaseit('renderfunctionpassing$scopedSlotsw/normalslotsdown',done=>{constone={template:`<div><slotname="footer"/></div>`}consttwo={render(h){returnh(one,{scopedSlots:this.$scopedSlots})}}constvm=newVue({data:{count:0},render(h){returnh(two,[h('span',{slot:'footer'},this.count)])}}).$mount()expect(vm.$el.textContent).toMatch(`0`)vm.count++waitForUpdate(()=>{expect(vm.$el.textContent).toMatch(`1`)}).then(done)})#11652it('shouldupdatewhenswitchingbetweentwocomponentswithslotandwithoutslot',done=>{constChild={template:`<div><slot/></div>`}constparent=newVue({template:`<div><childv-if="flag"><template#default>foo</template></child><childv-else></child></div>`,data:{flag:true},components:{Child}}).$mount()expect(parent.$el.textContent).toMatch(`foo`)parent.flag=falsewaitForUpdate(()=>{expect(parent.$el.textContent).toMatch(``)}).then(done)})})