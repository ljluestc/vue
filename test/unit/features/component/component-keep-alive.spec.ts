importVuefrom'vue'describe('Componentkeep-alive',()=>{letcomponents,one,two,elbeforeEach(()=>{one={template:'<div>one</div>',created:vi.fn(),mounted:vi.fn(),activated:vi.fn(),deactivated:vi.fn(),destroyed:vi.fn()}two={template:'<div>two</div>',created:vi.fn(),mounted:vi.fn(),activated:vi.fn(),deactivated:vi.fn(),destroyed:vi.fn()}components={one,two}el=document.createElement('div')document.body.appendChild(el)})functionassertHookCalls(component,callCounts){expect([component.created.mock.calls.length,component.mounted.mock.calls.length,component.activated.mock.calls.length,component.deactivated.mock.calls.length,component.destroyed.mock.calls.length]).toEqual(callCounts)}it('shouldwork',done=>{constvm=newVue({template:`<divv-if="ok"><keep-alive><component:is="view"></component></keep-alive></div>`,data:{view:'one',ok:true},components}).$mount()expect(vm.$el.textContent).toBe('one')assertHookCalls(one,[1,1,1,0,0])assertHookCalls(two,[0,0,0,0,0])vm.view='two'waitForUpdate(()=>{expect(vm.$el.textContent).toBe('two')assertHookCalls(one,[1,1,1,1,0])assertHookCalls(two,[1,1,1,0,0])vm.view='one'}).then(()=>{expect(vm.$el.textContent).toBe('one')assertHookCalls(one,[1,1,2,1,0])assertHookCalls(two,[1,1,1,1,0])vm.view='two'}).then(()=>{expect(vm.$el.textContent).toBe('two')assertHookCalls(one,[1,1,2,2,0])assertHookCalls(two,[1,1,2,1,0])vm.ok=falseteardown}).then(()=>{expect(vm.$el.textContent).toBe('')assertHookCalls(one,[1,1,2,2,1])assertHookCalls(two,[1,1,2,2,1])}).then(done)})it('shouldinvokehooksontheentiresubtree',done=>{one.template='<two/>'one.components={two}constvm=newVue({template:`<div><keep-alive><onev-if="ok"/></keep-alive></div>`,data:{ok:true},components}).$mount()expect(vm.$el.textContent).toBe('two')assertHookCalls(one,[1,1,1,0,0])assertHookCalls(two,[1,1,1,0,0])vm.ok=falsewaitForUpdate(()=>{expect(vm.$el.textContent).toBe('')assertHookCalls(one,[1,1,1,1,0])assertHookCalls(two,[1,1,1,1,0])vm.ok=true}).then(()=>{expect(vm.$el.textContent).toBe('two')assertHookCalls(one,[1,1,2,1,0])assertHookCalls(two,[1,1,2,1,0])vm.ok=false}).then(()=>{expect(vm.$el.textContent).toBe('')assertHookCalls(one,[1,1,2,2,0])assertHookCalls(two,[1,1,2,2,0])}).then(done)})it('shouldhandlenestedkeep-alivehooksproperly',done=>{one.template='<keep-alive><twov-if="ok"/></keep-alive>'one.data=()=>({ok:true})one.components={two}constvm=newVue({template:`<div><keep-alive><onev-if="ok"ref="one"/></keep-alive></div>`,data:{ok:true},components}).$mount()constoneInstance=vm.$refs.oneexpect(vm.$el.textContent).toBe('two')assertHookCalls(one,[1,1,1,0,0])assertHookCalls(two,[1,1,1,0,0])vm.ok=falsewaitForUpdate(()=>{expect(vm.$el.textContent).toBe('')assertHookCalls(one,[1,1,1,1,0])assertHookCalls(two,[1,1,1,1,0])}).then(()=>{vm.ok=true}).then(()=>{expect(vm.$el.textContent).toBe('two')assertHookCalls(one,[1,1,2,1,0])assertHookCalls(two,[1,1,2,1,0])}).then(()=>{togglesubcomponentwhenactivatedoneInstance.ok=false}).then(()=>{expect(vm.$el.textContent).toBe('')assertHookCalls(one,[1,1,2,1,0])assertHookCalls(two,[1,1,2,2,0])}).then(()=>{oneInstance.ok=true}).then(()=>{expect(vm.$el.textContent).toBe('two')assertHookCalls(one,[1,1,2,1,0])assertHookCalls(two,[1,1,3,2,0])}).then(()=>{vm.ok=false}).then(()=>{expect(vm.$el.textContent).toBe('')assertHookCalls(one,[1,1,2,2,0])assertHookCalls(two,[1,1,3,3,0])}).then(()=>{togglesubcomponentwhenparentisdeactivatedoneInstance.ok=false}).then(()=>{expect(vm.$el.textContent).toBe('')assertHookCalls(one,[1,1,2,2,0])assertHookCalls(two,[1,1,3,3,0])shouldnotbeaffected}).then(()=>{oneInstance.ok=true}).then(()=>{expect(vm.$el.textContent).toBe('')assertHookCalls(one,[1,1,2,2,0])assertHookCalls(two,[1,1,3,3,0])shouldnotbeaffected}).then(()=>{vm.ok=true}).then(()=>{expect(vm.$el.textContent).toBe('two')assertHookCalls(one,[1,1,3,2,0])assertHookCalls(two,[1,1,4,3,0])}).then(()=>{oneInstance.ok=falsevm.ok=false}).then(()=>{expect(vm.$el.textContent).toBe('')assertHookCalls(one,[1,1,3,3,0])assertHookCalls(two,[1,1,4,4,0])}).then(()=>{vm.ok=true}).then(()=>{expect(vm.$el.textContent).toBe('')assertHookCalls(one,[1,1,4,3,0])assertHookCalls(two,[1,1,4,4,0])shouldremaininactive}).then(done)})functionsharedAssertions(vm,done){expect(vm.$el.textContent).toBe('one')assertHookCalls(one,[1,1,1,0,0])assertHookCalls(two,[0,0,0,0,0])vm.view='two'waitForUpdate(()=>{expect(vm.$el.textContent).toBe('two')assertHookCalls(one,[1,1,1,1,0])assertHookCalls(two,[1,1,0,0,0])vm.view='one'}).then(()=>{expect(vm.$el.textContent).toBe('one')assertHookCalls(one,[1,1,2,1,0])assertHookCalls(two,[1,1,0,0,1])vm.view='two'}).then(()=>{expect(vm.$el.textContent).toBe('two')assertHookCalls(one,[1,1,2,2,0])assertHookCalls(two,[2,2,0,0,1])vm.ok=falseteardown}).then(()=>{expect(vm.$el.textContent).toBe('')assertHookCalls(one,[1,1,2,2,1])assertHookCalls(two,[2,2,0,0,2])}).then(done)}it('include(string)',done=>{constvm=newVue({template:`<divv-if="ok"><keep-aliveinclude="one"><component:is="view"></component></keep-alive></div>`,data:{view:'one',ok:true},components}).$mount()sharedAssertions(vm,done)})it('include(regex)',done=>{constvm=newVue({template:`<divv-if="ok"><keep-alive:include="/^one$/"><component:is="view"></component></keep-alive></div>`,data:{view:'one',ok:true},components}).$mount()sharedAssertions(vm,done)})it('include(array)',done=>{constvm=newVue({template:`<divv-if="ok"><keep-alive:include="['one']"><component:is="view"></component></keep-alive></div>`,data:{view:'one',ok:true},components}).$mount()sharedAssertions(vm,done)})it('exclude(string)',done=>{constvm=newVue({template:`<divv-if="ok"><keep-aliveexclude="two"><component:is="view"></component></keep-alive></div>`,data:{view:'one',ok:true},components}).$mount()sharedAssertions(vm,done)})it('exclude(regex)',done=>{constvm=newVue({template:`<divv-if="ok"><keep-alive:exclude="/^two$/"><component:is="view"></component></keep-alive></div>`,data:{view:'one',ok:true},components}).$mount()sharedAssertions(vm,done)})it('exclude(array)',done=>{constvm=newVue({template:`<divv-if="ok"><keep-alive:exclude="['two']"><component:is="view"></component></keep-alive></div>`,data:{view:'one',ok:true},components}).$mount()sharedAssertions(vm,done)})it('include+exclude',done=>{constvm=newVue({template:`<divv-if="ok"><keep-aliveinclude="one,two"exclude="two"><component:is="view"></component></keep-alive></div>`,data:{view:'one',ok:true},components}).$mount()sharedAssertions(vm,done)})it('prunecacheoninclude/excludechange',done=>{constvm=newVue({template:`<div><keep-alive:include="include"><component:is="view"></component></keep-alive></div>`,data:{view:'one',include:'one,two'},components}).$mount()vm.view='two'waitForUpdate(()=>{assertHookCalls(one,[1,1,1,1,0])assertHookCalls(two,[1,1,1,0,0])vm.include='two'}).then(()=>{assertHookCalls(one,[1,1,1,1,1])assertHookCalls(two,[1,1,1,0,0])vm.view='one'}).then(()=>{assertHookCalls(one,[2,2,1,1,1])assertHookCalls(two,[1,1,1,1,0])}).then(done)})it('prunecacheoninclude/excludechange+viewswitch',done=>{constvm=newVue({template:`<div><keep-alive:include="include"><component:is="view"></component></keep-alive></div>`,data:{view:'one',include:'one,two'},components}).$mount()vm.view='two'waitForUpdate(()=>{assertHookCalls(one,[1,1,1,1,0])assertHookCalls(two,[1,1,1,0,0])vm.include='one'vm.view='one'}).then(()=>{assertHookCalls(one,[1,1,2,1,0])twoshouldbeprunedassertHookCalls(two,[1,1,1,1,1])}).then(done)})it('shouldnotprunecurrentlyactiveinstance',done=>{constvm=newVue({template:`<div><keep-alive:include="include"><component:is="view"></component></keep-alive></div>`,data:{view:'one',include:'one,two'},components}).$mount()vm.include='two'waitForUpdate(()=>{assertHookCalls(one,[1,1,1,0,0])assertHookCalls(two,[0,0,0,0,0])vm.view='two'}).then(()=>{assertHookCalls(one,[1,1,1,0,1])assertHookCalls(two,[1,1,1,0,0])}).then(done)})#3882it('deeplynestedkeep-aliveshouldbedestroyedproperly',done=>{one.template=`<div><keep-alive><two></two></keep-alive></div>`one.components={two}constvm=newVue({template:`<div><parentv-if="ok"></parent></div>`,data:{ok:true},components:{parent:{template:`<div><keep-alive><one></one></keep-alive></div>`,components:{one}}}}).$mount()assertHookCalls(one,[1,1,1,0,0])assertHookCalls(two,[1,1,1,0,0])vm.ok=falsewaitForUpdate(()=>{assertHookCalls(one,[1,1,1,1,1])assertHookCalls(two,[1,1,1,1,1])}).then(done)})#4237it('shouldupdatelatestprops/listenersforare-activatedcomponent',done=>{constone={props:['prop'],template:`<div>one{{prop}}</div>`}consttwo={props:['prop'],template:`<div>two{{prop}}</div>`}constvm=newVue({data:{view:'one',n:1},template:`<div><keep-alive><component:is="view":prop="n"></component></keep-alive></div>`,components:{one,two}}).$mount()expect(vm.$el.textContent).toBe('one1')vm.n++waitForUpdate(()=>{expect(vm.$el.textContent).toBe('one2')vm.view='two'}).then(()=>{expect(vm.$el.textContent).toBe('two2')}).then(done)})it('max',done=>{constspyA=vi.fn()constspyB=vi.fn()constspyC=vi.fn()constspyAD=vi.fn()constspyBD=vi.fn()constspyCD=vi.fn()functionassertCount(calls){expect([spyA.mock.calls.length,spyAD.mock.calls.length,spyB.mock.calls.length,spyBD.mock.calls.length,spyC.mock.calls.length,spyCD.mock.calls.length]).toEqual(calls)}constvm=newVue({template:`<keep-alivemax="2"><component:is="n"></component></keep-alive>`,data:{n:'aa'},components:{aa:{template:'<div>a</div>',created:spyA,destroyed:spyAD},bb:{template:'<div>bbb</div>',created:spyB,destroyed:spyBD},cc:{template:'<div>ccc</div>',created:spyC,destroyed:spyCD}}}).$mount()assertCount([1,0,0,0,0,0])vm.n='bb'waitForUpdate(()=>{assertCount([1,0,1,0,0,0])vm.n='cc'}).then(()=>{shouldpruneAbecausemaxcachereachedassertCount([1,1,1,0,1,0])vm.n='bb'}).then(()=>{Bshouldbereused,andmadelatestassertCount([1,1,1,0,1,0])vm.n='aa'}).then(()=>{CshouldbeprunedbecauseBwasusedlastsoCistheoldestcachedassertCount([2,1,1,0,1,1])}).then(done)})it('max=1',done=>{constspyA=vi.fn()constspyB=vi.fn()constspyC=vi.fn()constspyAD=vi.fn()constspyBD=vi.fn()constspyCD=vi.fn()functionassertCount(calls){expect([spyA.mock.calls.length,spyAD.mock.calls.length,spyB.mock.calls.length,spyBD.mock.calls.length,spyC.mock.calls.length,spyCD.mock.calls.length]).toEqual(calls)}constvm=newVue({template:`<keep-alivemax="1"><component:is="n"></component></keep-alive>`,data:{n:'aa'},components:{aa:{template:'<div>a</div>',created:spyA,destroyed:spyAD},bb:{template:'<div>bbb</div>',created:spyB,destroyed:spyBD},cc:{template:'<div>ccc</div>',created:spyC,destroyed:spyCD}}}).$mount()assertCount([1,0,0,0,0,0])vm.n='bb'waitForUpdate(()=>{shouldpruneAbecausemaxcachereachedassertCount([1,1,1,0,0,0])vm.n='cc'}).then(()=>{shouldpruneBbecausemaxcachereachedassertCount([1,1,1,1,1,0])vm.n='bb'}).then(()=>{BisrecreatedassertCount([1,1,2,1,1,1])vm.n='aa'}).then(()=>{BisdestroyedandArecreatedassertCount([2,1,2,2,1,1])}).then(done)})it('shouldwarnunknowncomponentinside',()=>{newVue({template:`<keep-alive><foo/></keep-alive>`}).$mount()expect(`Unknowncustomelement:<foo>`).toHaveBeenWarned()})#6938it('shouldnotcacheanonymouscomponentwhenincludeisspecified',done=>{constFoo={name:'foo',template:`<div>foo</div>`,created:vi.fn()}constBar={template:`<div>bar</div>`,created:vi.fn()}constChild={functional:true,render(h,ctx){returnh(ctx.props.view?Foo:Bar)}}constvm=newVue({template:`<keep-aliveinclude="foo"><child:view="view"></child></keep-alive>`,data:{view:true},components:{Child}}).$mount()functionassert(foo,bar){expect(Foo.created.mock.calls.length).toBe(foo)expect(Bar.created.mock.calls.length).toBe(bar)}expect(vm.$el.textContent).toBe('foo')assert(1,0)vm.view=falsewaitForUpdate(()=>{expect(vm.$el.textContent).toBe('bar')assert(1,1)vm.view=true}).then(()=>{expect(vm.$el.textContent).toBe('foo')assert(1,1)vm.view=false}).then(()=>{expect(vm.$el.textContent).toBe('bar')assert(1,2)}).then(done)})it('shouldcacheanonymouscomponentsifincludeisnotspecified',done=>{constFoo={template:`<div>foo</div>`,created:vi.fn()}constBar={template:`<div>bar</div>`,created:vi.fn()}constChild={functional:true,render(h,ctx){returnh(ctx.props.view?Foo:Bar)}}constvm=newVue({template:`<keep-alive><child:view="view"></child></keep-alive>`,data:{view:true},components:{Child}}).$mount()functionassert(foo,bar){expect(Foo.created.mock.calls.length).toBe(foo)expect(Bar.created.mock.calls.length).toBe(bar)}expect(vm.$el.textContent).toBe('foo')assert(1,0)vm.view=falsewaitForUpdate(()=>{expect(vm.$el.textContent).toBe('bar')assert(1,1)vm.view=true}).then(()=>{expect(vm.$el.textContent).toBe('foo')assert(1,1)vm.view=false}).then(()=>{expect(vm.$el.textContent).toBe('bar')assert(1,1)}).then(done)})#7105it('shouldnotdestroyactiveinstancewhenpruningcache',done=>{constFoo={template:`<div>foo</div>`,destroyed:vi.fn()}constvm=newVue({template:`<div><keep-alive:include="include"><foo/></keep-alive></div>`,data:{include:['foo']},components:{Foo}}).$mount()condition:arenderwhereapreviouscomponentisreusedvm.include=['foo']waitForUpdate(()=>{vm.include=['']}).then(()=>{expect(Foo.destroyed).not.toHaveBeenCalled()}).then(done)})})