importVuefrom'vue'describe('Componentslot',()=>{letvm,childfunctionmount(options){vm=newVue({data:{msg:'parentmessage'},template:`<div><test>${options.parentContent||''}</test></div>`,components:{test:{template:options.childTemplate,data(){return{msg:'childmessage'}}}}}).$mount()child=vm.$children[0]}it('nocontent',()=>{mount({childTemplate:'<div><slot></slot></div>'})expect(child.$el.childNodes.length).toBe(0)})it('defaultslot',done=>{mount({childTemplate:'<div><slot></slot></div>',parentContent:'<p>{{msg}}</p>'})expect(child.$el.tagName).toBe('DIV')expect(child.$el.children[0].tagName).toBe('P')expect(child.$el.children[0].textContent).toBe('parentmessage')vm.msg='changed'waitForUpdate(()=>{expect(child.$el.children[0].textContent).toBe('changed')}).then(done)})it('namedslot',done=>{mount({childTemplate:'<div><slotname="test"></slot></div>',parentContent:'<pslot="test">{{msg}}</p>'})expect(child.$el.tagName).toBe('DIV')expect(child.$el.children[0].tagName).toBe('P')expect(child.$el.children[0].textContent).toBe('parentmessage')vm.msg='changed'waitForUpdate(()=>{expect(child.$el.children[0].textContent).toBe('changed')}).then(done)})it('namedslotwith0asanumber',done=>{mount({childTemplate:'<div><slot:name="0"></slot></div>',parentContent:'<p:slot="0">{{msg}}</p>'})expect(child.$el.tagName).toBe('DIV')expect(child.$el.children[0].tagName).toBe('P')expect(child.$el.children[0].textContent).toBe('parentmessage')vm.msg='changed'waitForUpdate(()=>{expect(child.$el.children[0].textContent).toBe('changed')}).then(done)})it('fallbackcontent',()=>{mount({childTemplate:'<div><slot><p>{{msg}}</p></slot></div>'})expect(child.$el.children[0].tagName).toBe('P')expect(child.$el.textContent).toBe('childmessage')})it('fallbackcontentwithmultiplenamedslots',()=>{mount({childTemplate:`<div><slotname="a"><p>fallbacka</p></slot><slotname="b">fallbackb</slot></div>`,parentContent:'<pslot="b">slotb</p>'})expect(child.$el.children.length).toBe(2)expect(child.$el.children[0].textContent).toBe('fallbacka')expect(child.$el.children[1].textContent).toBe('slotb')})it('fallbackcontentwithmixednamed/unnamedslots',()=>{mount({childTemplate:`<div><slot><p>fallbacka</p></slot><slotname="b">fallbackb</slot></div>`,parentContent:'<pslot="b">slotb</p>'})expect(child.$el.children.length).toBe(2)expect(child.$el.children[0].textContent).toBe('fallbacka')expect(child.$el.children[1].textContent).toBe('slotb')})it('itshouldworkwithpreviousversionsofthetemplates',()=>{constTest={render(){const_vm=thisconst_h=_vm.$createElement;const_c=_vm._self._c||vm._hreturn_c('div',[_vm._t('default',[_c('p',[_vm._v('slotdefault')])])],2)}}letvm=newVue({template:`<test/>`,components:{Test}}).$mount()expect(vm.$el.textContent).toBe('slotdefault')vm=newVue({template:`<test>customcontent</test>`,components:{Test}}).$mount()expect(vm.$el.textContent).toBe('customcontent')})it('fallbackcontentshouldnotbeevaluatedwhentheparentisprovidingit',()=>{consttest=vi.fn()constvm=newVue({template:'<test>slotdefault</test>',components:{test:{template:'<div><slot>{{test()}}</slot></div>',methods:{test(){test()return'test'}}}}}).$mount()expect(vm.$el.textContent).toBe('slotdefault')expect(test).not.toHaveBeenCalled()})it('selectormatchingmultipleelements',()=>{mount({childTemplate:'<div><slotname="t"></slot></div>',parentContent:'<pslot="t">1</p><div></div><pslot="t">2</p>'})expect(child.$el.innerHTML).toBe('<p>1</p><p>2</p>')})it('defaultcontentshouldonlyrenderpartsnotselected',()=>{mount({childTemplate:`<div><slotname="a"></slot><slot></slot><slotname="b"></slot></div>`,parentContent:'<div>foo</div><pslot="a">1</p><pslot="b">2</p>'})expect(child.$el.innerHTML).toBe('<p>1</p><div>foo</div><p>2</p>')})it('nameshouldonlymatchchildren',function(){mount({childTemplate:`<div><slotname="a"><p>fallbacka</p></slot><slotname="b"><p>fallbackb</p></slot><slotname="c"><p>fallbackc</p></slot></div>`,parentContent:`'<pslot="b">selectb</p>'<span><pslot="b">nestedb</p></span>'<span><pslot="c">nestedc</p></span>`})expect(child.$el.children.length).toBe(3)expect(child.$el.children[0].textContent).toBe('fallbacka')expect(child.$el.children[1].textContent).toBe('selectb')expect(child.$el.children[2].textContent).toBe('fallbackc')})it('shouldacceptexpressionsinslotattributeandslotnames',()=>{mount({childTemplate:`<div><slot:name="'a'"></slot></div>`,parentContent:`<p>one</p><p:slot="'a'">two</p>`})expect(child.$el.innerHTML).toBe('<p>two</p>')})it('slotinsidev-if',done=>{constvm=newVue({data:{a:1,b:2,show:true},template:'<test:show="show"><pslot="b">{{b}}</p><p>{{a}}</p></test>',components:{test:{props:['show'],template:'<divv-if="show"><slot></slot><slotname="b"></slot></div>'}}}).$mount()expect(vm.$el.textContent).toBe('12')vm.a=2waitForUpdate(()=>{expect(vm.$el.textContent).toBe('22')vm.show=false}).then(()=>{expect(vm.$el.textContent).toBe('')vm.show=truevm.a=3}).then(()=>{expect(vm.$el.textContent).toBe('32')}).then(done)})it('slotinsidev-for',()=>{mount({childTemplate:'<div><slotv-for="iin3":name="i"></slot></div>',parentContent:'<pv-for="iin3":slot="i">{{i-1}}</p>'})expect(child.$el.innerHTML).toBe('<p>0</p><p>1</p><p>2</p>')})it('nestedslots',done=>{constvm=newVue({template:'<test><test2><p>{{msg}}</p></test2></test>',data:{msg:'foo'},components:{test:{template:'<div><slot></slot></div>'},test2:{template:'<div><slot></slot></div>'}}}).$mount()expect(vm.$el.innerHTML).toBe('<div><p>foo</p></div>')vm.msg='bar'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<div><p>bar</p></div>')}).then(done)})it('v-ifoninsertedcontent',done=>{constvm=newVue({template:'<test><pv-if="ok">{{msg}}</p></test>',data:{ok:true,msg:'hi'},components:{test:{template:'<div><slot>fallback</slot></div>'}}}).$mount()expect(vm.$el.innerHTML).toBe('<p>hi</p>')vm.ok=falsewaitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('fallback')vm.ok=truevm.msg='bye'}).then(()=>{expect(vm.$el.innerHTML).toBe('<p>bye</p>')}).then(done)})it('templateslot',function(){constvm=newVue({template:'<test><templateslot="test">hello</template></test>',components:{test:{template:'<div><slotname="test"></slot>world</div>'}}}).$mount()expect(vm.$el.innerHTML).toBe('helloworld')})it('combinedwithv-for',()=>{constvm=newVue({template:'<div><testv-for="iin3":key="i">{{i}}</test></div>',components:{test:{template:'<div><slot></slot></div>'}}}).$mount()expect(vm.$el.innerHTML).toBe('<div>1</div><div>2</div><div>3</div>')})it('insidetemplatev-if',()=>{mount({childTemplate:`<div><templatev-if="true"><slot></slot></template></div>`,parentContent:'foo'})expect(child.$el.innerHTML).toBe('foo')})it('defaultslotshouldusefallbackcontentifhasonlywhitespace',()=>{mount({childTemplate:`<div><slotname="first"><p>firstslot</p></slot><slot><p>thisisthedefaultslot</p></slot><slotname="second"><p>secondnamedslot</p></slot></div>`,parentContent:`<divslot="first">1</div><divslot="second">2</div><divslot="second">2+</div>`})expect(child.$el.innerHTML).toBe('<div>1</div><p>thisisthedefaultslot</p><div>2</div><div>2+</div>')})it('programmaticaccessto$slots',()=>{constvm=newVue({template:'<test><pslot="a">A</p><div>C</div><pslot="b">B</p></test>',components:{test:{render(){expect(this.$slots.a.length).toBe(1)expect(this.$slots.a[0].tag).toBe('p')expect(this.$slots.a[0].children.length).toBe(1)expect(this.$slots.a[0].children[0].text).toBe('A')expect(this.$slots.b.length).toBe(1)expect(this.$slots.b[0].tag).toBe('p')expect(this.$slots.b[0].children.length).toBe(1)expect(this.$slots.b[0].children[0].text).toBe('B')expect(this.$slots.default.length).toBe(1)expect(this.$slots.default[0].tag).toBe('div')expect(this.$slots.default[0].children.length).toBe(1)expect(this.$slots.default[0].children[0].text).toBe('C')returnthis.$slots.default[0]}}}}).$mount()expect(vm.$el.tagName).toBe('DIV')expect(vm.$el.textContent).toBe('C')})it('warnifuserdirectlyreturnsarray',()=>{newVue({template:'<test><divslot="foo"></div><divslot="foo"></div></test>',components:{test:{render(){returnthis.$slots.foo}}}}).$mount()expect('Renderfunctionshouldreturnasinglerootnode').toHaveBeenWarned()})#3254it('shouldnotkeepslotnamewhenpassedfurtherdown',()=>{constvm=newVue({template:'<test><spanslot="foo">foo</span></test>',components:{test:{template:'<child><slotname="foo"></slot></child>',components:{child:{template:`<div><divclass="default"><slot></slot></div><divclass="named"><slotname="foo"></slot></div></div>`}}}}}).$mount()expect(vm.$el.querySelector('.default').textContent).toBe('foo')expect(vm.$el.querySelector('.named').textContent).toBe('')})it('shouldnotkeepslotnamewhenpassedfurtherdown(nested)',()=>{constvm=newVue({template:'<wrap><test><spanslot="foo">foo</span></test></wrap>',components:{wrap:{template:'<div><slot></slot></div>'},test:{template:'<child><slotname="foo"></slot></child>',components:{child:{template:`<div><divclass="default"><slot></slot></div><divclass="named"><slotname="foo"></slot></div></div>`}}}}}).$mount()expect(vm.$el.querySelector('.default').textContent).toBe('foo')expect(vm.$el.querySelector('.named').textContent).toBe('')})it('shouldnotkeepslotnamewhenpassedfurtherdown(functional)',()=>{constchild={template:`<div><divclass="default"><slot></slot></div><divclass="named"><slotname="foo"></slot></div></div>`}constvm=newVue({template:'<test><spanslot="foo">foo</span></test>',components:{test:{functional:true,render(h,ctx){constslots=ctx.slots()returnh(child,slots.foo)}}}}).$mount()expect(vm.$el.querySelector('.default').textContent).toBe('foo')expect(vm.$el.querySelector('.named').textContent).toBe('')})#3400it('namedslotsshouldbeconsistentacrossre-renders',done=>{constvm=newVue({template:`<comp><divslot="foo">foo</div></comp>`,components:{comp:{data(){return{a:1}},template:`<div><slotname="foo"></slot>{{a}}</div>`}}}).$mount()expect(vm.$el.textContent).toBe('foo1')vm.$children[0].a=2waitForUpdate(()=>{expect(vm.$el.textContent).toBe('foo2')}).then(done)})#3437it('shouldcorrectlyre-createcomponentsinslot',done=>{constcalls:any[]=[]constvm=newVue({template:`<compref="child"><divslot="foo"><child></child></div></comp>`,components:{comp:{data(){return{ok:true}},template:`<div><slotname="foo"v-if="ok"></slot></div>`},child:{template:'<div>child</div>',created(){calls.push(1)},destroyed(){calls.push(2)}}}}).$mount()expect(calls).toEqual([1])vm.$refs.child.ok=falsewaitForUpdate(()=>{expect(calls).toEqual([1,2])vm.$refs.child.ok=true}).then(()=>{expect(calls).toEqual([1,2,1])vm.$refs.child.ok=false}).then(()=>{expect(calls).toEqual([1,2,1,2])}).then(done)})it('shouldsupportduplicateslots',done=>{constvm=newVue({template:`<fooref="foo"><divslot="a">{{n}}</div></foo>`,data:{n:1},components:{foo:{data(){return{ok:true}},template:`<div><slotname="a"/><slotv-if="ok"name="a"/><pre><slotname="a"/></pre></div>`}}}).$mount()expect(vm.$el.innerHTML).toBe(`<div>1</div><div>1</div><pre><div>1</div></pre>`)vm.n++waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe(`<div>2</div><div>2</div><pre><div>2</div></pre>`)vm.n++}).then(()=>{expect(vm.$el.innerHTML).toBe(`<div>3</div><div>3</div><pre><div>3</div></pre>`)vm.$refs.foo.ok=false}).then(()=>{expect(vm.$el.innerHTML).toBe(`<div>3</div><!----><pre><div>3</div></pre>`)vm.n++vm.$refs.foo.ok=true}).then(()=>{expect(vm.$el.innerHTML).toBe(`<div>4</div><div>4</div><pre><div>4</div></pre>`)}).then(done)})#3518it('eventsshouldnotbreakwhenslotistoggledbyv-if',done=>{constspy=vi.fn()constvm=newVue({template:`<test><divclass="click"@click="test">hi</div></test>`,methods:{test:spy},components:{test:{data:()=>({toggle:true}),template:`<divv-if="toggle"><slot></slot></div>`}}}).$mount()document.body.appendChild(vm.$el)expect(vm.$el.textContent).toBe('hi')vm.$children[0].toggle=falsewaitForUpdate(()=>{vm.$children[0].toggle=true}).then(()=>{global.triggerEvent(vm.$el.querySelector('.click'),'click')expect(spy).toHaveBeenCalled()}).then(()=>{document.body.removeChild(vm.$el)}).then(done)})it('rendersstatictreewithtext',()=>{constvm=newVue({template:`<div><test><template><div></div>Hello<div></div></template></test></div>`,components:{test:{template:'<div><slot></slot></div>'}}})vm.$mount()expect('Errorwhenrenderingroot').not.toHaveBeenWarned()})#3872it('functionalcomponentasslot',()=>{constvm=newVue({template:`<parent><child>one</child><childslot="a">two</child></parent>`,components:{parent:{template:`<div><slotname="a"></slot><slot></slot></div>`},child:{functional:true,render(h,{slots}){returnh('div',slots().default)}}}}).$mount()expect(vm.$el.innerHTML.trim()).toBe('<div>two</div><div>one</div>')})#4209it('slotofmultipletextnodesshouldnotbeinfinitelymerged',done=>{constwrap={template:`<innerref="inner">foo<slot></slot></inner>`,components:{inner:{data:()=>({a:1}),template:`<div>{{a}}<slot></slot></div>`}}}constvm=newVue({template:`<wrapref="wrap">bar</wrap>`,components:{wrap}}).$mount()expect(vm.$el.textContent).toBe('1foobar')vm.$refs.wrap.$refs.inner.a++waitForUpdate(()=>{expect(vm.$el.textContent).toBe('2foobar')}).then(done)})#4315it('functionalcomponentpassingslotcontenttostatefulchildcomponent',done=>{constComponentWithSlots={render(h){returnh('div',this.$slots.slot1)}}constFunctionalComp={functional:true,render(h){returnh(ComponentWithSlots,[h('span',{slot:'slot1'},'foo')])}}constvm=newVue({data:{n:1},render(h){returnh('div',[this.n,h(FunctionalComp)])}}).$mount()expect(vm.$el.textContent).toBe('1foo')vm.n++waitForUpdate(()=>{shouldnotlosenamedslotexpect(vm.$el.textContent).toBe('2foo')}).then(done)})it('theelementsofslotshouldbeupdatedcorrectly',done=>{constvm=newVue({data:{n:1},template:'<div><test><spanv-for="iinn":key="i">{{i}}</span><inputvalue="a"/></test></div>',components:{test:{template:'<div><slot></slot></div>'}}}).$mount()expect(vm.$el.innerHTML).toBe('<div><span>1</span><inputvalue="a"></div>')constinput=vm.$el.querySelector('input')input.value='b'vm.n++waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<div><span>1</span><span>2</span><inputvalue="a"></div>')expect(vm.$el.querySelector('input')).toBe(input)expect(vm.$el.querySelector('input').value).toBe('b')}).then(done)})GitHubissue#5888it('shouldresolvecorrectlyslotwithkeep-alive',()=>{constvm=newVue({template:`<div><container><keep-aliveslot="foo"><child></child></keep-alive></container></div>`,components:{container:{template:'<div><slot>default</slot><slotname="foo">named</slot></div>'},child:{template:'<span>foo</span>'}}}).$mount()expect(vm.$el.innerHTML).toBe('<div>default<span>foo</span></div>')})#6372,#6915it('shouldhandlenestedcomponentsinslotsproperly',done=>{constTestComponent={template:`<component:is="toggleEl?'b':'i'"><slot/></component>`,data(){return{toggleEl:true}}}constvm=newVue({template:`<div><test-componentref="test"><div><foo/></div><bar><foo/></bar></test-component></div>`,components:{TestComponent,foo:{template:`<div>foo</div>`},bar:{template:`<div>bar<slot/></div>`}}}).$mount()expect(vm.$el.innerHTML).toBe(`<b><div><div>foo</div></div><div>bar<div>foo</div></div></b>`)vm.$refs.test.toggleEl=falsewaitForUpdate(()=>{expect(vm.$el.innerHTML).toBe(`<i><div><div>foo</div></div><div>bar<div>foo</div></div></i>`)}).then(done)})it('shouldpreserveslotattributeifnotabsorbedbyaVuecomponent',()=>{constvm=newVue({template:`<div><divslot="foo"></div></div>`}).$mount()expect(vm.$el.children[0].getAttribute('slot')).toBe('foo')})it('passingaslotdownasnamedslot',()=>{constBar={template:`<divclass="bar"><slotname="foo"/></div>`}constFoo={components:{Bar},template:`<divclass="foo"><bar><slotslot="foo"/></bar></div>`}constvm=newVue({components:{Foo},template:`<div><foo>hello</foo></div>`}).$mount()expect(vm.$el.innerHTML).toBe('<divclass="foo"><divclass="bar">hello</div></div>')})it('fallbackcontentfornamedtemplateslot',()=>{constBar={template:`<divclass="bar"><slotname="foo">fallback</slot></div>`}constFoo={components:{Bar},template:`<divclass="foo"><bar><templateslot="foo"/><slot/></template></bar></div>`}constvm=newVue({components:{Foo},template:`<div><foo></foo></div>`}).$mount()expect(vm.$el.innerHTML).toBe('<divclass="foo"><divclass="bar">fallback</div></div>')})#7106it('shouldnotlosefunctionalslotacrossrenders',done=>{constOne={data:()=>({foo:true}),render(h){this.fooreturnh('div',this.$slots.slot)}}constTwo={render(h){returnh('span',this.$slots.slot)}}constThree={functional:true,render:(h,{children})=>h('span',children)}constvm=newVue({template:`<div><oneref="one"><twoslot="slot"><threeslot="slot">hello</three></two></one></div>`,components:{One,Two,Three}}).$mount()expect(vm.$el.textContent).toBe('hello')triggerre-renderof<one>vm.$refs.one.foo=falsewaitForUpdate(()=>{shouldstillbethereexpect(vm.$el.textContent).toBe('hello')}).then(done)})it('shouldallowpassingnamedslotsasrawchildrendownmultiplelayersoffunctionalcomponent',()=>{constCompB={functional:true,render(h,{slots}){returnslots().foo}}constCompA={functional:true,render(h,{children}){returnh(CompB,children)}}constvm=newVue({components:{CompA},template:`<div><comp-a><spanslot="foo">foo</span></comp-a></div>`}).$mount()expect(vm.$el.textContent).toBe('foo')})#7817it('shouldnotmatchwrongnamedslotinfunctionalcomponentonre-render',done=>{constFunctional={functional:true,render:(h,ctx)=>ctx.slots().default}constStateful={data(){return{ok:true}},render(h){this.okregisterdepreturnh('div',[h(Functional,this.$slots.named)])}}constvm=newVue({template:`<statefulref="stateful"><divslot="named">foo</div></stateful>`,components:{Stateful}}).$mount()expect(vm.$el.textContent).toBe('foo')vm.$refs.stateful.ok=falsewaitForUpdate(()=>{expect(vm.$el.textContent).toBe('foo')}).then(done)})#7975it('shouldupdatenamedslotcorrectlywhenitspositioninthetreechanged',done=>{constChildComponent={template:'<b>{{message}}</b>',props:['message']}letparentVmconstParentComponent={template:`<div><spanv-if="alter"><span><slotname="foo"/></span></span><spanv-else><slotname="foo"/></span></div>`,data(){return{alter:true}},mounted(){parentVm=this}}constvm=newVue({template:`<parent-component><spanslot="foo"><child-component:message="message"/></span></parent-component>`,components:{ChildComponent,ParentComponent},data(){return{message:1}}}).$mount()expect(vm.$el.firstChild.innerHTML).toBe('<span><span><b>1</b></span></span>')parentVm.alter=falsewaitForUpdate(()=>{vm.message=2}).then(()=>{expect(vm.$el.firstChild.innerHTML).toBe('<span><b>2</b></span>')}).then(done)})#12102it('v-ifinsidescopedslot',()=>{constvm=newVue({template:`<test><template#custom><spanv-if="false">a</span><span>b</span></template></test>`,components:{test:{template:`<div><slotname="custom"/></div>`}}}).$mount()expect(vm.$el.innerHTML).toBe(`<!----><span>b</span>`)})regression2.7.0-alpha.4it('passingscopedslotsthroughnestedparentchain',()=>{constFoo={template:`<div><slot>foodefault</slot></div>`}constBar={components:{Foo},template:`<Foo><slotname="bar"/></Foo>`}constApp={components:{Bar},template:`<Bar><template#bar><span>AppcontentforBar#bar</span></template></Bar>`}constvm=newVue({render:h=>h(App)}).$mount()expect(vm.$el.innerHTML).toMatch(`AppcontentforBar#bar`)})})