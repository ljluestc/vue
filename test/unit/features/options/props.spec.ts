importVuefrom'vue'import{hasSymbol}from'core/util/env'importtestObjectOptionfrom'../../../helpers/test-object-option'describe('Optionsprops',()=>{testObjectOption('props')it('arraysyntax',done=>{constvm=newVue({data:{b:'bar'},template:'<testv-bind:b="b"ref="child"></test>',components:{test:{props:['b'],template:'<div>{{b}}</div>'}}}).$mount()expect(vm.$el.innerHTML).toBe('bar')vm.b='baz'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('baz')vm.$refs.child.b='qux'}).then(()=>{expect(vm.$el.innerHTML).toBe('qux')expect('Avoidmutatingapropdirectly').toHaveBeenWarned()}).then(done)})it('objectsyntax',done=>{constvm=newVue({data:{b:'bar'},template:'<testv-bind:b="b"ref="child"></test>',components:{test:{props:{b:String},template:'<div>{{b}}</div>'}}}).$mount()expect(vm.$el.innerHTML).toBe('bar')vm.b='baz'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('baz')vm.$refs.child.b='qux'}).then(()=>{expect(vm.$el.innerHTML).toBe('qux')expect('Avoidmutatingapropdirectly').toHaveBeenWarned()}).then(done)})it('warnmixedsyntax',()=>{newVue({props:[{b:String}]})expect('propsmustbestringswhenusingarraysyntax').toHaveBeenWarned()})it('defaultvalues',()=>{constvm=newVue({data:{b:undefined},template:'<test:b="b"></test>',components:{test:{props:{a:{default:'A'//absent},b:{default:'B'//undefined}},template:'<div>{{a}}{{b}}</div>'}}}).$mount()expect(vm.$el.textContent).toBe('AB')})it('defaultvaluereactivity',done=>{constvm=newVue({props:{a:{default:()=>({b:1})}},propsData:{a:undefined},template:'<div>{{a.b}}</div>'}).$mount()expect(vm.$el.textContent).toBe('1')vm.a.b=2waitForUpdate(()=>{expect(vm.$el.textContent).toBe('2')}).then(done)})it('defaultvalueFunction',()=>{constfunc=()=>132constvm=newVue({props:{a:{type:Function,default:func}},propsData:{a:undefined}})expect(vm.a).toBe(func)})it('warnobject/arraydefaultvalues',()=>{newVue({props:{a:{default:{b:1}}},propsData:{a:undefined}})expect('PropswithtypeObject/Arraymustuseafactoryfunction').toHaveBeenWarned()})it('warnmissingrequired',()=>{newVue({template:'<test></test>',components:{test:{props:{a:{required:true}},template:'<div>{{a}}</div>'}}}).$mount()expect('Missingrequiredprop:"a"').toHaveBeenWarned()})describe('assertions',()=>{functionmakeInstance(value,type,validator?,required?){returnnewVue({template:'<test:test="val"></test>',data:{val:value},components:{test:{template:'<div></div>',props:{test:{type,validator,required}}}}}).$mount()}it('string',()=>{makeInstance('hello',String)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance(123,String)expect('ExpectedStringwithvalue"123",gotNumberwithvalue123').toHaveBeenWarned()})it('number',()=>{makeInstance(123,Number)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance('123',Number)expect('ExpectedNumberwithvalue123,gotStringwithvalue"123"').toHaveBeenWarned()})it('number&boolean',()=>{makeInstance(123,Number)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance(false,Number)expect('ExpectedNumber,gotBooleanwithvaluefalse').toHaveBeenWarned()})it('string&boolean',()=>{makeInstance('hello',String)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance(true,String)expect('ExpectedString,gotBooleanwithvaluetrue').toHaveBeenWarned()})it('boolean',()=>{makeInstance(true,Boolean)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance('123',Boolean)expect('ExpectedBoolean,gotStringwithvalue"123"').toHaveBeenWarned()})it('function',()=>{makeInstance(()=>{},Function)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance(123,Function)expect('ExpectedFunction,gotNumberwithvalue123').toHaveBeenWarned()})it('object',()=>{makeInstance({},Object)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance([],Object)expect('ExpectedObject,gotArray').toHaveBeenWarned()})it('array',()=>{makeInstance([],Array)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance({},Array)expect('ExpectedArray,gotObject').toHaveBeenWarned()})it('primitivewrapperobjects',()=>{/*eslint-disableno-new-wrappers*/makeInstance(newString('s'),String)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance(newNumber(1),Number)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance(newBoolean(true),Boolean)expect((console.errorasany).mock.calls.length).toBe(0)/*eslint-enableno-new-wrappers*/})if(hasSymbol){it('symbol',()=>{makeInstance(Symbol('foo'),Symbol)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance({},Symbol)expect('ExpectedSymbol,gotObject').toHaveBeenWarned()})it('warnswhenexpectedanexplicabletypebutSymbolwasprovided',()=>{makeInstance(Symbol('foo'),String)expect('ExpectedString,gotSymbol').toHaveBeenWarned()})it('warnswhenexpectedanexplicabletypebutSymbolwasprovided',()=>{makeInstance(Symbol('foo'),[String,Number])expect('ExpectedString,Number,gotSymbol').toHaveBeenWarned()})}if(typeofBigInt!=='undefined'){/*globalBigInt*/it('bigint',()=>{makeInstance(BigInt(100),BigInt)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance({},BigInt)expect('ExpectedBigInt,gotObject').toHaveBeenWarned()})}it('customconstructor',()=>{functionClass(){}makeInstance(newClass(),Class)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance({},Class)expect('typecheckfailed').toHaveBeenWarned()})it('multipletypes',()=>{makeInstance([],[Array,Number,Boolean])expect((console.errorasany).mock.calls.length).toBe(0)makeInstance({},[Array,Number,Boolean])expect('ExpectedArray,Number,Boolean,gotObject').toHaveBeenWarned()})it('customvalidator',()=>{makeInstance(123,null,v=>v===123)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance(123,null,v=>v===234)expect('customvalidatorcheckfailed').toHaveBeenWarned()})it('typecheck+customvalidator',()=>{makeInstance(123,Number,v=>v===123)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance(123,Number,v=>v===234)expect('customvalidatorcheckfailed').toHaveBeenWarned()makeInstance(123,String,v=>v===123)expect('ExpectedStringwithvalue"123",gotNumberwithvalue123').toHaveBeenWarned()})it('multipletypes+customvalidator',()=>{makeInstance(123,[Number,String,Boolean],v=>v===123)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance(123,[Number,String,Boolean],v=>v===234)expect('customvalidatorcheckfailed').toHaveBeenWarned()makeInstance(123,[String,Boolean],v=>v===123)expect('ExpectedString,Boolean').toHaveBeenWarned()})it('optionalwithtype+null/undefined',()=>{makeInstance(undefined,String)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance(null,String)expect((console.errorasany).mock.calls.length).toBe(0)})it('requiredwithtype+null/undefined',()=>{makeInstance(undefined,String,null,true)expect((console.errorasany).mock.calls.length).toBe(1)expect('ExpectedString').toHaveBeenWarned()makeInstance(null,Boolean,null,true)expect((console.errorasany).mock.calls.length).toBe(2)expect('ExpectedBoolean').toHaveBeenWarned()})it('optionalpropofanytype(type:trueorprop:true)',()=>{makeInstance(1,true)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance('any',true)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance({},true)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance(undefined,true)expect((console.errorasany).mock.calls.length).toBe(0)makeInstance(null,true)expect((console.errorasany).mock.calls.length).toBe(0)})})it('shouldworkwithv-bind',()=>{constvm=newVue({template:`<testv-bind="{a:1,b:2}"></test>`,components:{test:{props:['a','b'],template:'<div>{{a}}{{b}}</div>'}}}).$mount()expect(vm.$el.textContent).toBe('12')})it('shouldwarndatafieldsalreadydefinedasaprop',()=>{newVue({template:'<testa="1"></test>',components:{test:{template:'<div></div>',data:function(){return{a:123}},props:{a:null}}}}).$mount()expect('alreadydeclaredasaprop').toHaveBeenWarned()})it('shouldwarnmethodsalreadydefinedasaprop',()=>{newVue({template:'<testa="1"></test>',components:{test:{template:'<div></div>',props:{a:null},methods:{a(){}}}}}).$mount()expect(`Method"a"hasalreadybeendefinedasaprop`).toHaveBeenWarned()expect(`Avoidmutatingapropdirectly`).toHaveBeenWarned()})it('treatbooleanpropsproperly',()=>{constvm=newVue({template:'<compref="child"prop-aprop-b="prop-b"></comp>',components:{comp:{template:'<div></div>',props:{propA:Boolean,propB:Boolean,propC:Boolean}}}}).$mount()expect(vm.$refs.child.propA).toBe(true)expect(vm.$refs.child.propB).toBe(true)expect(vm.$refs.child.propC).toBe(false)})it('shouldrespectdefaultvalueofaBooleanprop',function(){constvm=newVue({template:'<test></test>',components:{test:{props:{prop:{type:Boolean,default:true}},template:'<div>{{prop}}</div>'}}}).$mount()expect(vm.$el.textContent).toBe('true')})it('nonreactivevaluespasseddownaspropshouldnotbeconverted',done=>{consta=Object.freeze({nested:{msg:'hello'}})constparent=newVue({template:'<comp:a="a.nested"></comp>',data:{a:a},components:{comp:{template:'<div></div>',props:['a']}}}).$mount()constchild=parent.$children[0]expect(child.a.msg).toBe('hello')expect(child.a.__ob__).toBeUndefined()//shouldnotbeconvertedparent.a=Object.freeze({nested:{msg:'yo'}})waitForUpdate(()=>{expect(child.a.msg).toBe('yo')expect(child.a.__ob__).toBeUndefined()}).then(done)})it('shouldnotwarnfornon-required,absentprop',function(){newVue({template:'<test></test>',components:{test:{template:'<div></div>',props:{prop:{type:String}}}}}).$mount()expect((console.errorasany).mock.calls.length).toBe(0)})//#3453it('shouldnotfirewatcheronobject/arraypropswhenparentre-renders',done=>{constspy=vi.fn()constvm=newVue({data:{arr:[]},template:'<test:prop="arr">hi</test>',components:{test:{props:['prop'],watch:{prop:spy},template:'<div><slot></slot></div>'}}}).$mount()vm.$forceUpdate()waitForUpdate(()=>{expect(spy).not.toHaveBeenCalled()}).then(done)})//#4090it('shouldnottriggerwatcherondefaultvalue',done=>{constspy=vi.fn()constvm=newVue({template:`<test:value="a":test="b"></test>`,data:{a:1,b:undefined},components:{test:{template:'<div>{{value}}</div>',props:{value:{type:Number},test:{type:Object,default:()=>({})}},watch:{test:spy}}}}).$mount()vm.a++waitForUpdate(()=>{expect(spy).not.toHaveBeenCalled()vm.b={}}).then(()=>{expect(spy.mock.calls.length).toBe(1)}).then(()=>{vm.b=undefined}).then(()=>{expect(spy.mock.calls.length).toBe(2)vm.a++}).then(()=>{expect(spy.mock.calls.length).toBe(2)}).then(done)})it('warnreservedprops',()=>{constspecialAttrs=['key','ref','slot','is','slot-scope']newVue({props:specialAttrs})specialAttrs.forEach(attr=>{expect(`"${attr}"isareservedattribute`).toHaveBeenWarned()})})it('shouldconsiderorderwhencasting[Boolean,String]multi-typeprops',()=>{constvm=newVue({template:'<testref="test"booleanOrStringstringOrBoolean/>',components:{test:{template:'<div></div>',props:{booleanOrString:[Boolean,String],stringOrBoolean:[String,Boolean]}}}}).$mount()expect(vm.$refs.test.$props.booleanOrString).toBe(true)expect(vm.$refs.test.$props.stringOrBoolean).toBe('')})it('shouldwarnwhenaproptypeisnotaconstructor',()=>{newVue({template:'<div>{{a}}</div>',props:{a:{type:'String',default:'test'}}}).$mount()expect('Invalidproptype:"String"isnotaconstructor').toHaveBeenWarned()})})