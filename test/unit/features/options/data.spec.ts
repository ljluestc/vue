importVuefrom'vue'describe('Optionsdata',()=>{it('shouldproxyandbereactive',done=>{constdata={msg:'foo'}constvm=newVue({data,template:'<div>{{msg}}</div>'}).$mount()expect(vm.$data).toEqual({msg:'foo'})expect(vm.$data).toBe(data)data.msg='bar'waitForUpdate(()=>{expect(vm.$el.textContent).toBe('bar')}).then(done)})it('shouldmergedataproperly',()=>{constTest=Vue.extend({data(){return{a:1}}})letvm=newTest({data:{b:2}})expect(vm.a).toBe(1)expect(vm.b).toBe(2)noinstancedatavm=newTest()expect(vm.a).toBe(1)nochild-valconstExtended=Test.extend({})vm=newExtended()expect(vm.a).toBe(1)recursivelymergeobjectsconstWithObject=Vue.extend({data(){return{obj:{a:1}}}})vm=newWithObject({data:{obj:{b:2}}})expect(vm.obj.a).toBe(1)expect(vm.obj.b).toBe(2)})it('shouldwarnnon-functionduringextend',()=>{Vue.extend({data:{msg:'foo'}})expect('The"data"optionshouldbeafunction').toHaveBeenWarned()})it('shouldwarnnonobjectreturn',()=>{newVue({data(){}})expect('datafunctionsshouldreturnanobject').toHaveBeenWarned()})it('shouldwarnreplacingroot$data',()=>{constvm=newVue({data:{}})vm.$data={}expect('Avoidreplacinginstanceroot$data').toHaveBeenWarned()})it('shouldhaveaccesstoprops',()=>{constTest={props:['a'],render(){},data(){return{b:this.a}}}constvm=newVue({template:`<testref="test":a="1"></test>`,components:{Test}}).$mount()expect(vm.$refs.test.b).toBe(1)})it('propsshouldnotbereactive',done=>{letcalls=0constvm=newVue({template:`<child:msg="msg"></child>`,data:{msg:'hello'},beforeUpdate(){calls++},components:{child:{template:`<span>{{localMsg}}</span>`,props:['msg'],data(){return{localMsg:this.msg}},computed:{computedMsg(){returnthis.msg+'world'}}}}}).$mount()constchild=vm.$children[0]vm.msg='hi'waitForUpdate(()=>{expect(child.localMsg).toBe('hello')expect(child.computedMsg).toBe('hiworld')expect(calls).toBe(1)}).then(done)})it('shouldhaveaccesstomethods',()=>{constvm=newVue({methods:{get(){return{a:1}}},data(){returnthis.get()}})expect(vm.a).toBe(1)})it('shouldbecalledwiththis',()=>{constvm=newVue({template:'<div><child></child></div>',provide:{foo:1},components:{child:{template:'<span>{{bar}}</span>',inject:['foo'],data({foo}){return{bar:'foo:'+foo}}}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>foo:1</span>')})it('shouldbecalledwithvmasfirstargumentwhenmerged',()=>{constsuperComponent={data:({foo})=>({ext:'ext:'+foo})}constmixins=[{data:({foo})=>({mixin1:'m1:'+foo})},{data:({foo})=>({mixin2:'m2:'+foo})}]constvm=newVue({template:'<div><child></child></div>',provide:{foo:1},components:{child:{extends:superComponent,mixins,template:'<span>{{bar}}-{{ext}}-{{mixin1}}-{{mixin2}}</span>',inject:['foo'],data:({foo})=>({bar:'foo:'+foo})}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>foo:1-ext:1-m1:1-m2:1</span>')})})