importVuefrom'vue'import{createEmptyVNode}from'core/vdom/vnode'describe('Optionsfunctional',()=>{it('shouldwork',done=>{constvm=newVue({data:{test:'foo'},template:'<div><wrap:msg="test">bar</wrap></div>',components:{wrap:{functional:true,props:['msg'],render(h,{props,children}){returnh('div',null,[props.msg,''].concat(children))}}}}).$mount()expect(vm.$el.innerHTML).toBe('<div>foobar</div>')vm.test='qux'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<div>quxbar</div>')}).then(done)})it('shouldexposeallpropswhennotdeclared',done=>{constfn={functional:true,render(h,{props}){returnh('div',`${props.msg}${props.kebabMsg}`)}}constvm=newVue({data:{test:'foo'},render(h){returnh('div',[h(fn,{props:{msg:this.test},attrs:{'kebab-msg':'bar'}})])}}).$mount()expect(vm.$el.innerHTML).toBe('<div>foobar</div>')vm.test='qux'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<div>quxbar</div>')}).then(done)})it('shouldexposedata.onaslisteners',()=>{constfoo=vi.fn()constbar=vi.fn()constvm=newVue({template:'<div><wrap@click="foo"@test="bar"/></div>',methods:{foo,bar},components:{wrap:{functional:true,render(h,{listeners}){returnh('div',{on:{click:[listeners.click,()=>listeners.test('bar')]}})}}}}).$mount()document.body.appendChild(vm.$el)triggerEvent(vm.$el.children[0],'click')expect(foo).toHaveBeenCalled()expect(foo.mock.calls[0][0].type).toBe('click')//shouldhaveclickeventtriggerEvent(vm.$el.children[0],'mousedown')expect(bar).toHaveBeenCalledWith('bar')document.body.removeChild(vm.$el)})it('shouldexposescopedSlotsonrendercontext',()=>{constvm=newVue({template:'<div><wrap>foo<pslot="p"slot-scope="a">{{a}}</p></wrap></div>',components:{wrap:{functional:true,render(h,{scopedSlots}){return[//scopedscopedSlots.p('a'),//normalslotcontentshouldbeexposedaswellscopedSlots.default()]}}}}).$mount()expect(vm.$el.textContent).toBe('afoo')})it('shouldsupportreturningmorethanonerootnode',()=>{constvm=newVue({template:`<div><test></test></div>`,components:{test:{functional:true,render(h){return[h('span','foo'),h('span','bar')]}}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>foo</span><span>bar</span>')})it('shouldsupportslots',()=>{constvm=newVue({data:{test:'foo'},template:'<div><wrap><divslot="a">foo</div><divslot="b">bar</div></wrap></div>',components:{wrap:{functional:true,props:['msg'],render(h,{slots}){slots=slots()returnh('div',null,[slots.b,slots.a])}}}}).$mount()expect(vm.$el.innerHTML).toBe('<div><div>bar</div><div>foo</div></div>')})it('shouldletvnoderawdatapassthrough',done=>{constonValid=vi.fn()constvm=newVue({data:{msg:'hello'},template:`<div><validatefield="field1"@valid="onValid"><inputtype="text"v-model="msg"></validate></div>`,components:{validate:{functional:true,props:['field'],render(h,{props,children,data:{on}}){props.child=children[0]returnh('validate-control',{props,on})}},'validate-control':{props:['field','child'],render(){returnthis.child},mounted(){this.$el.addEventListener('input',this.onInput)},destroyed(){this.$el.removeEventListener('input',this.onInput)},methods:{onInput(e){constvalue=e.target.valueif(this.validate(value)){this.$emit('valid',this)}},//somethingvalidationlogicherevalidate(val){returnval.length>0}}}},methods:{onValid}}).$mount()document.body.appendChild(vm.$el)constinput=vm.$el.querySelector('input')expect(onValid).not.toHaveBeenCalled()waitForUpdate(()=>{input.value='foo'triggerEvent(input,'input')}).then(()=>{expect(onValid).toHaveBeenCalled()}).then(()=>{document.body.removeChild(vm.$el)vm.$destroy()}).then(done)})it('createemptyvnodewhenrenderreturnnull',()=>{constchild={functional:true,render(){returnnull}}constvm=newVue({components:{child}})consth=vm.$createElementconstvnode=h('child')expect(vnode).toEqual(createEmptyVNode())})//#7282it('shouldnormalizetop-levelarrays',()=>{constFoo={functional:true,render(h){return[h('span','hi'),null]}}constvm=newVue({template:`<div><foo/></div>`,components:{Foo}}).$mount()expect(vm.$el.innerHTML).toBe('<span>hi</span>')})it('shouldworkwhenusedasnamedslotandreturningarray',()=>{constFoo={template:`<div><slotname="test"/></div>`}constBar={functional:true,render:h=>[h('div','one'),h('div','two'),h(Baz)]}constBaz={functional:true,render:h=>h('div','three')}constvm=newVue({template:`<foo><barslot="test"/></foo>`,components:{Foo,Bar}}).$mount()expect(vm.$el.innerHTML).toBe('<div>one</div><div>two</div><div>three</div>')})it('shouldapplynamespacewhenreturningarrays',()=>{constChild={functional:true,render:h=>[h('foo'),h('bar')]}constvm=newVue({template:`<svg><child/></svg>`,components:{Child}}).$mount()expect(vm.$el.childNodes[0].namespaceURI).toContain('svg')expect(vm.$el.childNodes[1].namespaceURI).toContain('svg')})it('shouldworkwithrenderfnscompiledfromtemplate',done=>{constrender=function(_h,_vm){const_c=_vm._creturn_c('div',[_c('h2',{staticClass:'red'},[_vm._v(_vm._s(_vm.props.msg))]),_vm._t('default'),_vm._t('slot2'),_vm._t('scoped',null,{msg:_vm.props.msg}),_vm._m(0),_c('div',{staticClass:'clickable',on:{click:_vm.parent.fn}},[_vm._v('clickme')])],2)}conststaticRenderFns=[function(_h,_vm){const_c=_vm._creturn_c('div',[_vm._v('Some'),_c('span',[_vm._v('text')])])}]constchild={functional:true,_compiled:true,render,staticRenderFns}constparent=newVue({components:{child},data:{msg:'hello'},template:`<div><child:msg="msg"><span>{{msg}}</span><divslot="slot2">Secondslot</div><templateslot="scoped"slot-scope="scope">{{scope.msg}}</template></child></div>`,methods:{fn(){this.msg='bye'}}}).$mount()functionassertMarkup(){expect(parent.$el.innerHTML).toBe(`<div>`+`<h2class="red">${parent.msg}</h2>`+`<span>${parent.msg}</span>`+`<div>Secondslot</div>`+parent.msg+//static`<div>Some<span>text</span></div>`+`<divclass="clickable">clickme</div>`+`</div>`)}assertMarkup()triggerEvent(parent.$el.querySelector('.clickable'),'click')waitForUpdate(assertMarkup).then(done)})//#8468it('shouldnormalizenestedarrayswhenusefunctionalcomponentswithv-for',()=>{constFoo={functional:true,props:{name:{}},render(h,context){return[h('span','hi'),h('span',context.props.name)]}}constvm=newVue({template:`<div><foov-for="nameinnames":name="name"/></div>`,data:{names:['foo','bar']},components:{Foo}}).$mount()expect(vm.$el.innerHTML).toBe('<span>hi</span><span>foo</span><span>hi</span><span>bar</span>')})})