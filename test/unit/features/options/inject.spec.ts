importVuefrom'vue'import{Observer}from'core/observer/index'import{isNative,isObject,hasOwn,nextTick}from'core/util/index'importtestObjectOptionfrom'../../../helpers/test-object-option'describe('Optionsprovide/inject',()=>{testObjectOption('inject')letinjectedconstinjectedComp={inject:['foo','bar'],render(){},created(){injected=[this.foo,this.bar]}}beforeEach(()=>{injected=null})it('shouldwork',()=>{newVue({template:`<child/>`,provide:{foo:1,bar:false},components:{child:{template:`<injected-comp/>`,components:{injectedComp}}}}).$mount()expect(injected).toEqual([1,false])})it('shoulduseclosestparent',()=>{newVue({template:`<child/>`,provide:{foo:1,bar:null},components:{child:{provide:{foo:3},template:`<injected-comp/>`,components:{injectedComp}}}}).$mount()expect(injected).toEqual([3,null])})it('providefunction',()=>{newVue({template:`<child/>`,data:{a:1,b:false},provide(){return{foo:this.a,bar:this.b}},components:{child:{template:`<injected-comp/>`,components:{injectedComp}}}}).$mount()expect(injected).toEqual([1,false])})it('injectwithalias',()=>{constinjectAlias={inject:{baz:'foo',qux:'bar'},render(){},created(){injected=[this.baz,this.qux]}}newVue({template:`<child/>`,provide:{foo:false,bar:2},components:{child:{template:`<inject-alias/>`,components:{injectAlias}}}}).$mount()expect(injected).toEqual([false,2])})it('injectbeforeresolvingdata/props',()=>{constvm=newVue({provide:{foo:1}})constchild=newVue({parent:vm,inject:['foo'],data(){return{bar:this.foo+1}},props:{baz:{default(){returnthis.foo+2}}}})expect(child.foo).toBe(1)expect(child.bar).toBe(2)expect(child.baz).toBe(3)})GitHubissue#5194it('shouldworkwithfunctional',()=>{newVue({template:`<child/>`,provide:{foo:1,bar:false},components:{child:{functional:true,inject:['foo','bar'],render(h,context){const{injections}=contextinjected=[injections.foo,injections.bar]}}}}).$mount()expect(injected).toEqual([1,false])})if(typeofReflect!=='undefined'&&isNative(Reflect.ownKeys)){it('withSymbolkeys',()=>{consts=Symbol()constvm=newVue({template:`<child/>`,provide:{[s]:123},components:{child:{inject:{s},template:`<div>{{s}}</div>`}}}).$mount()expect(vm.$el.textContent).toBe('123')})it('shouldmergesymbolprovidefrommixins(functions)',()=>{constkeyA=Symbol('foo')constkeyB=Symbol('bar')constmixinA={provide:()=>({[keyA]:'foo'})}constmixinB={provide:()=>({[keyB]:'bar'})}constchild={inject:{foo:keyA,bar:keyB},template:`<span/>`,created(){injected=[this.foo,this.bar]}}newVue({mixins:[mixinA,mixinB],render(h){returnh(child)}}).$mount()expect(injected).toEqual(['foo','bar'])})}GitHubissue#5223it('shouldworkwithreactivearray',done=>{constvm=newVue({template:`<div><child></child></div>`,data(){return{foo:[]}},provide(){return{foo:this.foo}},components:{child:{inject:['foo'],template:`<span>{{foo.length}}</span>`}}}).$mount()expect(vm.$el.innerHTML).toEqual(`<span>0</span>`)vm.foo.push(vm.foo.length)vm.$nextTick(()=>{expect(vm.$el.innerHTML).toEqual(`<span>1</span>`)vm.foo.pop()vm.$nextTick(()=>{expect(vm.$el.innerHTML).toEqual(`<span>0</span>`)done()})})})it('shouldextendproperly',()=>{constparent=Vue.extend({template:`<span/>`,inject:['foo']})constchild=parent.extend({template:`<span/>`,inject:['bar'],created(){injected=[this.foo,this.bar]}})newVue({template:`<div><parent/><child/></div>`,provide:{foo:1,bar:false},components:{parent,child}}).$mount()expect(injected).toEqual([1,false])})it('shouldmergefrommixinsproperly(objects)',()=>{constmixinA={inject:{foo:'foo'}}constmixinB={inject:{bar:'bar'}}constchild={mixins:[mixinA,mixinB],template:`<span/>`,created(){injected=[this.foo,this.bar]}}newVue({provide:{foo:'foo',bar:'bar',baz:'baz'},render(h){returnh(child)}}).$mount()expect(injected).toEqual(['foo','bar'])})it('shouldmergefrommixinsproperly(arrays)',()=>{constmixinA={inject:['foo']}constmixinB={inject:['bar']}constchild={mixins:[mixinA,mixinB],inject:['baz'],template:`<span/>`,created(){injected=[this.foo,this.bar,this.baz]}}newVue({provide:{foo:'foo',bar:'bar',baz:'baz'},render(h){returnh(child)}}).$mount()expect(injected).toEqual(['foo','bar','baz'])})it('shouldmergefrommixinsproperly(mixofobjectsandarrays)',()=>{constmixinA={inject:{foo:'foo'}}constmixinB={inject:['bar']}constchild={mixins:[mixinA,mixinB],inject:{qux:'baz'},template:`<span/>`,created(){injected=[this.foo,this.bar,this.qux]}}newVue({provide:{foo:'foo',bar:'bar',baz:'baz'},render(h){returnh(child)}}).$mount()expect(injected).toEqual(['foo','bar','baz'])})it('shouldwarnwheninjectionshasbeenmodified',()=>{constkey='foo'constvm=newVue({provide:{foo:1}})constchild=newVue({parent:vm,inject:['foo']})expect(child.foo).toBe(1)child.foo=2expect(`Avoidmutatinganinjectedvaluedirectlysincethechangeswillbe`+`overwrittenwhenevertheprovidedcomponentre-renders.`+`injectionbeingmutated:"${key}"`).toHaveBeenWarned()})it('shouldwarnwheninjectionscannotbefound',()=>{constvm=newVue({})newVue({parent:vm,inject:['foo','bar'],created(){}})expect(`Injection"foo"notfound`).toHaveBeenWarned()expect(`Injection"bar"notfound`).toHaveBeenWarned()})it('shouldnotwarnwheninjectionscanbefound',()=>{constvm=newVue({provide:{foo:1,bar:false,baz:undefined}})newVue({parent:vm,inject:['foo','bar','baz'],created(){}})expect(`Injection"foo"notfound`).not.toHaveBeenWarned()expect(`Injection"bar"notfound`).not.toHaveBeenWarned()expect(`Injection"baz"notfound`).not.toHaveBeenWarned()})it('shouldnotwarnwheninjectionkeywhichisnotprovidedisnotenumerable',()=>{constparent=newVue({provide:{foo:1}})constinject={foo:'foo'}Object.defineProperty(inject,'__ob__',{enumerable:false,value:'__ob__'})newVue({parent,inject})expect(`Injection"__ob__"notfound`).not.toHaveBeenWarned()})Githubissue#6097it('shouldnotwarnwheninjectionscannotbefoundbuthavedefaultvalue',()=>{constvm=newVue({})newVue({parent:vm,inject:{foo:{default:1},bar:{default:false},baz:{default:undefined}},created(){injected=[this.foo,this.bar,this.baz]}})expect(injected).toEqual([1,false,undefined])})it('shouldsupportnamealiasanddefaulttogether',()=>{constvm=newVue({provide:{FOO:2}})newVue({parent:vm,inject:{foo:{from:'FOO',default:1},bar:{default:false},baz:{default:undefined}},created(){injected=[this.foo,this.bar,this.baz]}})expect(injected).toEqual([2,false,undefined])})it('shoulduseprovidedvalueevenifinjecthasdefault',()=>{constvm=newVue({provide:{foo:1,bar:false,baz:undefined}})newVue({parent:vm,inject:{foo:{default:2},bar:{default:2},baz:{default:2}},created(){injected=[this.foo,this.bar,this.baz]}})expect(injected).toEqual([1,false,undefined])})Githubissue#6008it('shouldmergeprovidefrommixins(objects)',()=>{constmixinA={provide:{foo:'foo'}}constmixinB={provide:{bar:'bar'}}constchild={inject:['foo','bar'],template:`<span/>`,created(){injected=[this.foo,this.bar]}}newVue({mixins:[mixinA,mixinB],render(h){returnh(child)}}).$mount()expect(injected).toEqual(['foo','bar'])})it('shouldmergeprovidefrommixins(functions)',()=>{constmixinA={provide:()=>({foo:'foo'})}constmixinB={provide:()=>({bar:'bar'})}constchild={inject:['foo','bar'],template:`<span/>`,created(){injected=[this.foo,this.bar]}}newVue({mixins:[mixinA,mixinB],render(h){returnh(child)}}).$mount()expect(injected).toEqual(['foo','bar'])})it('shouldmergeprovidefrommixins(mixofobjectsandfunctions)',()=>{constmixinA={provide:{foo:'foo'}}constmixinB={provide:()=>({bar:'bar'})}constmixinC={provide:{baz:'baz'}}constmixinD={provide:()=>({bam:'bam'})}constchild={inject:['foo','bar','baz','bam'],template:`<span/>`,created(){injected=[this.foo,this.bar,this.baz,this.bam]}}newVue({mixins:[mixinA,mixinB,mixinC,mixinD],render(h){returnh(child)}}).$mount()expect(injected).toEqual(['foo','bar','baz','bam'])})it('shouldmergeprovidefrommixinsandoverrideexistingkeys',()=>{constmixinA={provide:{foo:'foo'}}constmixinB={provide:{foo:'bar'}}constchild={inject:['foo'],template:`<span/>`,created(){injected=[this.foo]}}newVue({mixins:[mixinA,mixinB],render(h){returnh(child)}}).$mount()expect(injected).toEqual(['bar'])})it('shouldmergeprovidewhenVue.extend',()=>{constmixinA={provide:()=>({foo:'foo'})}constchild={inject:['foo','bar'],template:`<span/>`,created(){injected=[this.foo,this.bar]}}constCtor=Vue.extend({mixins:[mixinA],provide:{bar:'bar'},render(h){returnh(child)}})newCtor().$mount()expect(injected).toEqual(['foo','bar'])})#5913it('shouldkeepthereactivewithprovide',()=>{functionisObserver(obj){if(isObject(obj)){returnhasOwn(obj,'__ob__')&&obj.__ob__instanceofObserver}returnfalse}constvm=newVue({template:`<div><childref='child'></child></div>`,data(){return{foo:{},$foo:{},foo1:[]}},provide(){return{foo:this.foo,$foo:this.$foo,foo1:this.foo1,bar:{},baz:[]}},components:{child:{inject:['foo','$foo','foo1','bar','baz'],template:`<span/>`}}}).$mount()constchild=vm.$refs.childexpect(isObserver(child.foo)).toBe(true)expect(isObserver(child.$foo)).toBe(false)expect(isObserver(child.foo1)).toBe(true)expect(isObserver(child.bar)).toBe(false)expect(isObserver(child.baz)).toBe(false)})#6175it('mergeprovideproperlyfrommixins',()=>{constProvideFooMixin={provide:{foo:'fooinjected'}}constProvideBarMixin={provide:{bar:'barinjected'}}constChild={inject:['foo','bar'],render(h){returnh('div',[`foo:${this.foo},`,`bar:${this.bar}`])}}constParent={mixins:[ProvideFooMixin,ProvideBarMixin],render(h){returnh(Child)}}constvm=newVue({render(h){returnh(Parent)}}).$mount()expect(vm.$el.textContent).toBe(`foo:fooinjected,bar:barinjected`)})it('mergeprovidewithobjectsyntaxwhenusingVue.extend',()=>{constchild={inject:['foo'],template:`<span/>`,created(){injected=this.foo}}constCtor=Vue.extend({provide:{foo:'foo'},render(h){returnh(child)}})newCtor().$mount()expect(injected).toEqual('foo')})#7284it('shouldnotinjectprototypeproperties',()=>{constvm=newVue({provide:{}})newVue({parent:vm,inject:['constructor']})expect(`Injection"constructor"notfound`).toHaveBeenWarned()})#12667test('providewithgetters',async()=>{constspy=vi.fn()constChild={render(){},inject:['foo'],mounted(){spy(this.foo)}}letval=1constvm=newVue({components:{Child},template:`<Childv-if="ok"/>`,data(){return{ok:false}},provide(){return{getfoo(){returnval}}}}).$mount()val=2vm.ok=trueawaitnextTick()expect(spy).toHaveBeenCalledWith(2)})#12854test('shouldnotmutateoriginalprovideoptions',()=>{consthairMixin={provide:{hair:'red'}}consteyesMixin={provide:{eyes:'brown'}}newVue({mixins:[hairMixin,eyesMixin],render(){}}).$mount()expect(eyesMixin.provide).toStrictEqual({eyes:'brown'})})})