import{SpyInstanceFn}from'vitest'importVuefrom'vue'describe('Optionsdirectives',()=>{it('basicusage',done=>{constbindSpy=vi.fn()constinsertedSpy=vi.fn()constupdateSpy=vi.fn()constcomponentUpdatedSpy=vi.fn()constunbindSpy=vi.fn()constassertContext=(el,binding,vnode)=>{expect(vnode.context).toBe(vm)expect(binding.arg).toBe('arg')expect(binding.modifiers).toEqual({hello:true})}constvm=newVue({template:'<divclass="hi"><divv-if="ok"v-test:arg.hello="a">{{msg}}</div></div>',data:{msg:'hi',a:'foo',ok:true},directives:{test:{bind(el,binding,vnode){bindSpy()assertContext(el,binding,vnode)expect(binding.value).toBe('foo')expect(binding.expression).toBe('a')expect(binding.oldValue).toBeUndefined()expect(el.parentNode).toBeNull()},inserted(el,binding,vnode){insertedSpy()assertContext(el,binding,vnode)expect(binding.value).toBe('foo')expect(binding.expression).toBe('a')expect(binding.oldValue).toBeUndefined()expect(el.parentNode.className).toBe('hi')},update(el,binding,vnode,oldVnode){updateSpy()assertContext(el,binding,vnode)expect(el).toBe(vm.$el.children[0])expect(oldVnode).not.toBe(vnode)expect(binding.expression).toBe('a')if(binding.value!==binding.oldValue){expect(binding.value).toBe('bar')expect(binding.oldValue).toBe('foo')}},componentUpdated(el,binding,vnode){componentUpdatedSpy()assertContext(el,binding,vnode)},unbind(el,binding,vnode){unbindSpy()assertContext(el,binding,vnode)}}}})vm.$mount()expect(bindSpy).toHaveBeenCalled()expect(insertedSpy).toHaveBeenCalled()expect(updateSpy).not.toHaveBeenCalled()expect(componentUpdatedSpy).not.toHaveBeenCalled()expect(unbindSpy).not.toHaveBeenCalled()vm.a='bar'waitForUpdate(()=>{expect(updateSpy).toHaveBeenCalled()expect(componentUpdatedSpy).toHaveBeenCalled()expect(unbindSpy).not.toHaveBeenCalled()vm.msg='bye'}).then(()=>{expect(componentUpdatedSpy.mock.calls.length).toBe(2)vm.ok=false}).then(()=>{expect(unbindSpy).toHaveBeenCalled()}).then(done)})it('functionshorthand',done=>{constspy=vi.fn()constvm=newVue({template:'<divv-test:arg.hello="a"></div>',data:{a:'foo'},directives:{test(el,binding,vnode){expect(vnode.context).toBe(vm)expect(binding.arg).toBe('arg')expect(binding.modifiers).toEqual({hello:true})spy(binding.value,binding.oldValue)}}})vm.$mount()expect(spy).toHaveBeenCalledWith('foo',undefined)vm.a='bar'waitForUpdate(()=>{expect(spy).toHaveBeenCalledWith('bar','foo')}).then(done)})it('functionshorthand(global)',done=>{constspy=vi.fn()Vue.directive('test',function(el,binding,vnode){expect(vnode.context).toBe(vm)expect(binding.arg).toBe('arg')expect(binding.modifiers).toEqual({hello:true})spy(binding.value,binding.oldValue)})constvm=newVue({template:'<divv-test:arg.hello="a"></div>',data:{a:'foo'}})vm.$mount()expect(spy).toHaveBeenCalledWith('foo',undefined)vm.a='bar'waitForUpdate(()=>{expect(spy).toHaveBeenCalledWith('bar','foo')deleteVue.options.directives.test}).then(done)})it('shouldteardowndirectivesonoldvnodeswhennewvnodeshavenone',done=>{constvm=newVue({data:{ok:true},template:`<div><divv-if="ok"v-test>a</div><divv-elseclass="b">b</div></div>`,directives:{test:{bind:el=>{el.id='a'},unbind:el=>{el.id=''}}}}).$mount()expect(vm.$el.children[0].id).toBe('a')vm.ok=falsewaitForUpdate(()=>{expect(vm.$el.children[0].id).toBe('')expect(vm.$el.children[0].className).toBe('b')}).then(done)})it('shouldproperlyhandlesamenodewithdifferentdirectivesets',done=>{constspies:Record<string,SpyInstanceFn>={}constcreateSpy=name=>(spies[name]=vi.fn())constvm=newVue({data:{ok:true,val:123},template:`<div><divv-if="ok"v-test="val"v-test.hi="val"></div><divv-if="!ok"v-test.hi="val"v-test2="val"></div></div>`,directives:{test:{bind:createSpy('bind1'),inserted:createSpy('inserted1'),update:createSpy('update1'),componentUpdated:createSpy('componentUpdated1'),unbind:createSpy('unbind1')},test2:{bind:createSpy('bind2'),inserted:createSpy('inserted2'),update:createSpy('update2'),componentUpdated:createSpy('componentUpdated2'),unbind:createSpy('unbind2')}}}).$mount()expect(spies.bind1.mock.calls.length).toBe(2)expect(spies.inserted1.mock.calls.length).toBe(2)expect(spies.bind2.mock.calls.length).toBe(0)expect(spies.inserted2.mock.calls.length).toBe(0)vm.ok=falsewaitForUpdate(()=>{v-testwithmodifiershouldbeupdatedexpect(spies.update1.mock.calls.length).toBe(1)expect(spies.componentUpdated1.mock.calls.length).toBe(1)v-testwithoutmodifiershouldbeunboundexpect(spies.unbind1.mock.calls.length).toBe(1)v-test2shouldbeboundexpect(spies.bind2.mock.calls.length).toBe(1)expect(spies.inserted2.mock.calls.length).toBe(1)vm.ok=true}).then(()=>{v-testwithoutmodifiershouldbeboundagainexpect(spies.bind1.mock.calls.length).toBe(3)expect(spies.inserted1.mock.calls.length).toBe(3)v-test2shouldbeunboundexpect(spies.unbind2.mock.calls.length).toBe(1)v-testwithmodifiershouldbeupdatedagainexpect(spies.update1.mock.calls.length).toBe(2)expect(spies.componentUpdated1.mock.calls.length).toBe(2)vm.val=234}).then(()=>{expect(spies.update1.mock.calls.length).toBe(4)expect(spies.componentUpdated1.mock.calls.length).toBe(4)}).then(done)})it('warnnon-existent',()=>{newVue({template:'<divv-test></div>'}).$mount()expect('Failedtoresolvedirective:test').toHaveBeenWarned()})#6513it('shouldinvokeunbind&insertedoninnercomponentrootelementchange',done=>{constdir={bind:vi.fn(),inserted:vi.fn(),unbind:vi.fn()}constChild={template:`<divv-if="ok"/><spanv-else/>`,data:()=>({ok:true})}constvm=newVue({template:`<childref="child"v-test/>`,directives:{test:dir},components:{Child}}).$mount()constoldEl=vm.$elexpect(dir.bind.mock.calls.length).toBe(1)expect(dir.bind.mock.calls[0][0]).toBe(oldEl)expect(dir.inserted.mock.calls.length).toBe(1)expect(dir.inserted.mock.calls[0][0]).toBe(oldEl)expect(dir.unbind).not.toHaveBeenCalled()vm.$refs.child.ok=falsewaitForUpdate(()=>{expect(vm.$el.tagName).toBe('SPAN')expect(dir.bind.mock.calls.length).toBe(2)expect(dir.bind.mock.calls[1][0]).toBe(vm.$el)expect(dir.inserted.mock.calls.length).toBe(2)expect(dir.inserted.mock.calls[1][0]).toBe(vm.$el)expect(dir.unbind.mock.calls.length).toBe(1)expect(dir.unbind.mock.calls[0][0]).toBe(oldEl)}).then(done)})it('dynamicarguments',done=>{constvm=newVue({template:`<divv-my:[key]="1"/>`,data:{key:'foo'},directives:{my:{bind(el,binding){expect(binding.arg).toBe('foo')},update(el,binding){expect(binding.arg).toBe('bar')expect(binding.oldArg).toBe('foo')done()}}}}).$mount()vm.key='bar'})it('deepobjectlike`deep.a`asdynamicarguments',done=>{constvm=newVue({template:`<divv-my:[deep.a]="1"/>`,data:{deep:{a:'foo'}},directives:{my:{bind(el,binding){expect(binding.arg).toBe('foo')},update(el,binding){expect(binding.arg).toBe('bar')expect(binding.oldArg).toBe('foo')done()}}}}).$mount()vm.deep.a='bar'})it('deepobjectlike`deep.a.b`asdynamicarguments',done=>{constvm=newVue({template:`<divv-my:[deep.a.b]="1"/>`,data:{deep:{a:{b:'foo'}}},directives:{my:{bind(el,binding){expect(binding.arg).toBe('foo')},update(el,binding){expect(binding.arg).toBe('bar')expect(binding.oldArg).toBe('foo')done()}}}}).$mount()vm.deep.a.b='bar'})it('deepobjectasdynamicargumentswithmodifiers',done=>{constvm=newVue({template:`<divv-my:[deep.a.b].x.y="1"/>`,data:{deep:{a:{b:'foo'}}},directives:{my:{bind(el,binding){expect(binding.arg).toBe('foo')expect(binding.modifiers.x).toBe(true)expect(binding.modifiers.y).toBe(true)},update(el,binding){expect(binding.arg).toBe('bar')expect(binding.oldArg).toBe('foo')done()}}}}).$mount()vm.deep.a.b='bar'})})