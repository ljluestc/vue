importVuefrom'vue'import{hasSymbol}from'core/util/env'describe('Directivev-for',()=>{it('shouldrenderarrayofprimitivevalues',done=>{constvm=newVue({template:`<div><spanv-for="iteminlist">{{item}}</span></div>`,data:{list:['a','b','c']}}).$mount()expect(vm.$el.innerHTML).toBe('<span>a</span><span>b</span><span>c</span>')Vue.set(vm.list,0,'d')waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>d</span><span>b</span><span>c</span>')vm.list.push('d')}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>d</span><span>b</span><span>c</span><span>d</span>')vm.list.splice(1,2)}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>d</span><span>d</span>')vm.list=['x','y']}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>x</span><span>y</span>')}).then(done)})it('shouldrenderarrayofprimitivevalueswithindex',done=>{constvm=newVue({template:`<div><spanv-for="(item,i)inlist">{{i}}-{{item}}</span></div>`,data:{list:['a','b','c']}}).$mount()expect(vm.$el.innerHTML).toBe('<span>0-a</span><span>1-b</span><span>2-c</span>')Vue.set(vm.list,0,'d')waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>0-d</span><span>1-b</span><span>2-c</span>')vm.list.push('d')}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>0-d</span><span>1-b</span><span>2-c</span><span>3-d</span>')vm.list.splice(1,2)}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>0-d</span><span>1-d</span>')vm.list=['x','y']}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>0-x</span><span>1-y</span>')}).then(done)})it('shouldrenderarrayofobjectvalues',done=>{constvm=newVue({template:`<div><spanv-for="iteminlist">{{item.value}}</span></div>`,data:{list:[{value:'a'},{value:'b'},{value:'c'}]}}).$mount()expect(vm.$el.innerHTML).toBe('<span>a</span><span>b</span><span>c</span>')Vue.set(vm.list,0,{value:'d'})waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>d</span><span>b</span><span>c</span>')vm.list[0].value='e'}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>e</span><span>b</span><span>c</span>')vm.list.push({})}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>e</span><span>b</span><span>c</span><span></span>')vm.list.splice(1,2)}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>e</span><span></span>')vm.list=[{value:'x'},{value:'y'}]}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>x</span><span>y</span>')}).then(done)})it('shouldrenderarrayofobjectvalueswithindex',done=>{constvm=newVue({template:`<div><spanv-for="(item,i)inlist">{{i}}-{{item.value}}</span></div>`,data:{list:[{value:'a'},{value:'b'},{value:'c'}]}}).$mount()expect(vm.$el.innerHTML).toBe('<span>0-a</span><span>1-b</span><span>2-c</span>')Vue.set(vm.list,0,{value:'d'})waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>0-d</span><span>1-b</span><span>2-c</span>')vm.list[0].value='e'}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>0-e</span><span>1-b</span><span>2-c</span>')vm.list.push({})}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>0-e</span><span>1-b</span><span>2-c</span><span>3-</span>')vm.list.splice(1,2)}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>0-e</span><span>1-</span>')vm.list=[{value:'x'},{value:'y'}]}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>0-x</span><span>1-y</span>')}).then(done)})if(hasSymbol){it('shouldrendernativeiterables(Map)',()=>{constvm=newVue({template:`<div><spanv-for="[key,val]inlist">{{key}},{{val}}</span></div>`,data:{list:newMap([[1,'foo'],[2,'bar']])}}).$mount()expect(vm.$el.innerHTML).toBe(`<span>1,foo</span><span>2,bar</span>`)})it('shouldrendernativeiterables(Set)',()=>{constvm=newVue({template:`<div><spanv-for="valinlist">{{val}}</span></div>`,data:{list:newSet([1,2,3])}}).$mount()expect(vm.$el.innerHTML).toBe(`<span>1</span><span>2</span><span>3</span>`)})it('shouldrenderiterableofprimitivevalues',done=>{constiterable={models:['a','b','c'],index:0,[Symbol.iterator](){constiterator={index:0,models:this.models,next(){if(this.index<this.models.length){return{value:this.models[this.index++]}}else{return{done:true}}}}returniterator}}constvm=newVue({template:`<div><spanv-for="iteminlist">{{item}}</span></div>`,data:{list:iterable}}).$mount()expect(vm.$el.innerHTML).toBe('<span>a</span><span>b</span><span>c</span>')Vue.set(vm.list.models,0,'d')waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>d</span><span>b</span><span>c</span>')vm.list.models.push('d')}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>d</span><span>b</span><span>c</span><span>d</span>')vm.list.models.splice(1,2)}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>d</span><span>d</span>')vm.list.models=['x','y']}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>x</span><span>y</span>')}).then(done)})it('shouldrenderiterableofprimitivevalueswithindex',done=>{constiterable={models:['a','b','c'],index:0,[Symbol.iterator](){constiterator={index:0,models:this.models,next(){if(this.index<this.models.length){return{value:this.models[this.index++]}}else{return{done:true}}}}returniterator}}constvm=newVue({template:`<div><spanv-for="(item,i)inlist">{{i}}-{{item}}</span></div>`,data:{list:iterable}}).$mount()expect(vm.$el.innerHTML).toBe('<span>0-a</span><span>1-b</span><span>2-c</span>')Vue.set(vm.list.models,0,'d')waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>0-d</span><span>1-b</span><span>2-c</span>')vm.list.models.push('d')}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>0-d</span><span>1-b</span><span>2-c</span><span>3-d</span>')vm.list.models.splice(1,2)}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>0-d</span><span>1-d</span>')vm.list.models=['x','y']}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>0-x</span><span>1-y</span>')}).then(done)})it('shouldrenderiterableofobjectvalues',done=>{constiterable={models:[{value:'a'},{value:'b'},{value:'c'}],index:0,[Symbol.iterator](){constiterator={index:0,models:this.models,next(){if(this.index<this.models.length){return{value:this.models[this.index++]}}else{return{done:true}}}}returniterator}}constvm=newVue({template:`<div><spanv-for="iteminlist">{{item.value}}</span></div>`,data:{list:iterable}}).$mount()expect(vm.$el.innerHTML).toBe('<span>a</span><span>b</span><span>c</span>')Vue.set(vm.list.models,0,{value:'d'})waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>d</span><span>b</span><span>c</span>')vm.list.models[0].value='e'}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>e</span><span>b</span><span>c</span>')vm.list.models.push({})}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>e</span><span>b</span><span>c</span><span></span>')vm.list.models.splice(1,2)}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>e</span><span></span>')vm.list.models=[{value:'x'},{value:'y'}]}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>x</span><span>y</span>')}).then(done)})it('shouldrenderiterableofobjectvalueswithindex',done=>{constiterable={models:[{value:'a'},{value:'b'},{value:'c'}],index:0,[Symbol.iterator](){constiterator={index:0,models:this.models,next(){if(this.index<this.models.length){return{value:this.models[this.index++]}}else{return{done:true}}}}returniterator}}constvm=newVue({template:`<div><spanv-for="(item,i)inlist">{{i}}-{{item.value}}</span></div>`,data:{list:iterable}}).$mount()expect(vm.$el.innerHTML).toBe('<span>0-a</span><span>1-b</span><span>2-c</span>')Vue.set(vm.list.models,0,{value:'d'})waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>0-d</span><span>1-b</span><span>2-c</span>')vm.list.models[0].value='e'}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>0-e</span><span>1-b</span><span>2-c</span>')vm.list.models.push({})}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>0-e</span><span>1-b</span><span>2-c</span><span>3-</span>')vm.list.models.splice(1,2)}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>0-e</span><span>1-</span>')vm.list.models=[{value:'x'},{value:'y'}]}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>0-x</span><span>1-y</span>')}).then(done)})}it('shouldrenderanObject',done=>{constvm=newVue({template:`<div><spanv-for="valinobj">{{val}}</span></div>`,data:{obj:{a:0,b:1,c:2}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>0</span><span>1</span><span>2</span>')vm.obj.a=3waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>3</span><span>1</span><span>2</span>')Vue.set(vm.obj,'d',4)}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>3</span><span>1</span><span>2</span><span>4</span>')Vue.delete(vm.obj,'a')}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>1</span><span>2</span><span>4</span>')}).then(done)})it('shouldrenderanObjectwithkey',done=>{constvm=newVue({template:`<div><spanv-for="(val,key)inobj">{{val}}-{{key}}</span></div>`,data:{obj:{a:0,b:1,c:2}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>0-a</span><span>1-b</span><span>2-c</span>')vm.obj.a=3waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>3-a</span><span>1-b</span><span>2-c</span>')Vue.set(vm.obj,'d',4)}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>3-a</span><span>1-b</span><span>2-c</span><span>4-d</span>')Vue.delete(vm.obj,'a')}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>1-b</span><span>2-c</span><span>4-d</span>')}).then(done)})it('shouldrenderanObjectwithkeyandindex',done=>{constvm=newVue({template:`<div><spanv-for="(val,key,i)inobj">{{val}}-{{key}}-{{i}}</span></div>`,data:{obj:{a:0,b:1,c:2}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>0-a-0</span><span>1-b-1</span><span>2-c-2</span>')vm.obj.a=3waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>3-a-0</span><span>1-b-1</span><span>2-c-2</span>')Vue.set(vm.obj,'d',4)}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>3-a-0</span><span>1-b-1</span><span>2-c-2</span><span>4-d-3</span>')Vue.delete(vm.obj,'a')}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>1-b-0</span><span>2-c-1</span><span>4-d-2</span>')}).then(done)})it('shouldrendereachkeyofdata',done=>{constvm=newVue({template:`<div><spanv-for="(val,key)in$data">{{val}}-{{key}}</span></div>`,data:{a:0,b:1,c:2}}).$mount()expect(vm.$el.innerHTML).toBe('<span>0-a</span><span>1-b</span><span>2-c</span>')vm.a=3waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>3-a</span><span>1-b</span><span>2-c</span>')}).then(done)})it('checkpriorities:v-ifbeforev-for',function(){constvm=newVue({data:{items:[1,2,3]},template:'<div><divv-if="item<3"v-for="iteminitems">{{item}}</div></div>'}).$mount()expect(vm.$el.textContent).toBe('12')})it('checkpriorities:v-ifafterv-for',function(){constvm=newVue({data:{items:[1,2,3]},template:'<div><divv-for="iteminitems"v-if="item<3">{{item}}</div></div>'}).$mount()expect(vm.$el.textContent).toBe('12')})it('rangev-for',()=>{constvm=newVue({template:'<div><divv-for="nin3">{{n}}</div></div>'}).$mount()expect(vm.$el.textContent).toBe('123')})it('withoutkey',done=>{constvm=newVue({data:{items:[{id:1,msg:'a'},{id:2,msg:'b'},{id:3,msg:'c'}]},template:'<div><divv-for="iteminitems">{{item.msg}}</div></div>'}).$mount()expect(vm.$el.textContent).toBe('abc')constfirst=vm.$el.children[0]vm.items.reverse()waitForUpdate(()=>{expect(vm.$el.textContent).toBe('cba')assertreusingDOMelementinplaceexpect(vm.$el.children[0]).toBe(first)}).then(done)})it('withkey',done=>{constvm=newVue({data:{items:[{id:1,msg:'a'},{id:2,msg:'b'},{id:3,msg:'c'}]},template:'<div><divv-for="iteminitems":key="item.id">{{item.msg}}</div></div>'}).$mount()expect(vm.$el.textContent).toBe('abc')constfirst=vm.$el.children[0]vm.items.reverse()waitForUpdate(()=>{expect(vm.$el.textContent).toBe('cba')assertmovingDOMelementexpect(vm.$el.children[0]).not.toBe(first)expect(vm.$el.children[2]).toBe(first)}).then(done)})it('nestedloops',()=>{constvm=newVue({data:{items:[{items:[{a:1},{a:2}],a:1},{items:[{a:3},{a:4}],a:2}]},template:'<div>'+'<divv-for="(item,i)initems">'+'<pv-for="(subItem,j)initem.items">{{j}}{{subItem.a}}{{i}}{{item.a}}</p>'+'</div>'+'</div>'}).$mount()expect(vm.$el.innerHTML).toBe('<div><p>0101</p><p>1201</p></div>'+'<div><p>0312</p><p>1412</p></div>')})it('templatev-for',done=>{constvm=newVue({data:{list:[{a:1},{a:2},{a:3}]},template:'<div>'+'<templatev-for="iteminlist">'+'<p>{{item.a}}</p>'+'<p>{{item.a+1}}</p>'+'</template>'+'</div>'}).$mount()assertMarkup()vm.list.reverse()waitForUpdate(()=>{assertMarkup()vm.list.splice(1,1)}).then(()=>{assertMarkup()vm.list.splice(1,0,{a:2})}).then(done)functionassertMarkup(){constmarkup=vm.list.map(function(item){return'<p>'+item.a+'</p><p>'+(item.a+1)+'</p>'}).join('')expect(vm.$el.innerHTML).toBe(markup)}})it('componentv-for',done=>{constvm=newVue({data:{list:[{a:1},{a:2},{a:3}]},template:'<div>'+'<testv-for="iteminlist":msg="item.a":key="item.a">'+'<span>{{item.a}}</span>'+'</test>'+'</div>',components:{test:{props:['msg'],template:'<p>{{msg}}<slot></slot></p>'}}}).$mount()assertMarkup()vm.list.reverse()waitForUpdate(()=>{assertMarkup()vm.list.splice(1,1)}).then(()=>{assertMarkup()vm.list.splice(1,0,{a:2})}).then(done)functionassertMarkup(){constmarkup=vm.list.map(function(item){return`<p>${item.a}<span>${item.a}</span></p>`}).join('')expect(vm.$el.innerHTML).toBe(markup)}})it('dynamiccomponentv-for',done=>{constvm=newVue({data:{list:[{type:'one'},{type:'two'}]},template:'<div>'+'<componentv-for="iteminlist":key="item.type":is="item.type"></component>'+'</div>',components:{one:{template:'<p>One!</p>'},two:{template:'<div>Two!</div>'}}}).$mount()expect(vm.$el.innerHTML).toContain('<p>One!</p><div>Two!</div>')vm.list.reverse()waitForUpdate(()=>{expect(vm.$el.innerHTML).toContain('<div>Two!</div><p>One!</p>')}).then(done)})it('shouldwarncomponentv-forwithoutkeys',()=>{newVue({template:`<div><testv-for="iin3"></test></div>`,components:{test:{render(){}}}}).$mount()expect(`<testv-for="iin3">:componentlistsrenderedwithv-forshouldhaveexplicitkeys`).toHaveBeenTipped()})it('multinestedarrayreactivity',done=>{constvm=newVue({data:{list:[[['foo']]]},template:`<div><divv-for="iinlist"><divv-for="jini"><divv-for="kinj">{{k}}</div></div></div></div>`}).$mount()expect(vm.$el.textContent).toMatch(/\s+foo\s+/)vm.list[0][0].push('bar')waitForUpdate(()=>{expect(vm.$el.textContent).toMatch(/\s+foo\s+bar\s+/)}).then(done)})it('shouldworkwithstrings',done=>{constvm=newVue({data:{text:'foo'},template:`<div><spanv-for="letterintext">{{letter}}.</span></div>`}).$mount()expect(vm.$el.textContent).toMatch('f.o.o.')vm.text+='bar'waitForUpdate(()=>{expect(vm.$el.textContent).toMatch('f.o.o.b.a.r.')}).then(done)})#7792it('shouldworkwithmultilineexpressions',()=>{constvm=newVue({data:{a:[1],b:[2]},template:`<div><spanv-for="nin(a.concat(b))">{{n}}</span></div>`}).$mount()expect(vm.$el.textContent).toBe('12')})#9181it('componentswithv-forandemptylist',done=>{constvm=newVue({template:'<divattr>'+'<foov-for="iteminlist":key="item">{{item}}</foo>'+'</div>',data:{list:undefined},components:{foo:{template:'<div><slot></slot></div>'}}}).$mount()expect(vm.$el.innerHTML).toBe('')vm.list=[1,2,3]waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<div>1</div><div>2</div><div>3</div>')}).then(done)})it('elementswithv-forandemptylist',done=>{constvm=newVue({template:'<divattr>'+'<divv-for="iteminlist">{{item}}</div>'+'</div>',data:{list:undefined}}).$mount()expect(vm.$el.innerHTML).toBe('')vm.list=[1,2,3]waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<div>1</div><div>2</div><div>3</div>')}).then(done)})constsupportsDestructuring=(()=>{try{newFunction('var{foo}=bar')returntrue}catch(e){}})()if(supportsDestructuring){it('shouldsupportdestructuringsyntaxinaliasposition(object)',()=>{constvm=newVue({data:{list:[{foo:'hi',bar:'ho'}]},template:'<div><divv-for="({foo,bar},i)inlist">{{foo}}{{bar}}{{i}}</div></div>'}).$mount()expect(vm.$el.textContent).toBe('hiho0')})it('shouldsupportdestructuringsyntaxinaliasposition(array)',()=>{constvm=newVue({data:{list:[[1,2],[3,4]]},template:'<div><divv-for="([foo,bar],i)inlist">{{foo}}{{bar}}{{i}}</div></div>'}).$mount()expect(vm.$el.textContent).toBe('120341')})}})