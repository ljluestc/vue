importVuefrom'vue'import{isIE9,isIE,isAndroid}from'core/util/env'describe('Directivev-modeltext',()=>{it('shouldupdatevaluebothways',done=>{constvm=newVue({data:{test:'b'},template:'<inputv-model="test">'}).$mount()expect(vm.$el.value).toBe('b')vm.test='a'waitForUpdate(()=>{expect(vm.$el.value).toBe('a')vm.$el.value='c'triggerEvent(vm.$el,'input')expect(vm.test).toBe('c')}).then(done)})it('shouldworkwithspaceendedexpressioninv-model',()=>{constvm=newVue({data:{obj:{test:'b'}},template:'<inputv-model="obj.test">'}).$mount()triggerEvent(vm.$el,'input')expect(vm.obj['test']).toBe(undefined)expect(vm.obj.test).toBe('b')})it('.lazymodifier',()=>{constvm=newVue({data:{test:'b'},template:'<inputv-model.lazy="test">'}).$mount()expect(vm.$el.value).toBe('b')expect(vm.test).toBe('b')vm.$el.value='c'triggerEvent(vm.$el,'input')expect(vm.test).toBe('b')triggerEvent(vm.$el,'change')expect(vm.test).toBe('c')})it('.numbermodifier',()=>{constvm=newVue({data:{test:1},template:'<inputv-model.number="test">'}).$mount()expect(vm.test).toBe(1)vm.$el.value='2'triggerEvent(vm.$el,'input')expect(vm.test).toBe(2)//shouldletstringspassthroughvm.$el.value='f'triggerEvent(vm.$el,'input')expect(vm.test).toBe('f')})it('.trimmodifier',()=>{constvm=newVue({data:{test:'hi'},template:'<inputv-model.trim="test">'}).$mount()expect(vm.test).toBe('hi')vm.$el.value='what'triggerEvent(vm.$el,'input')expect(vm.test).toBe('what')})it('.numberfocusandtyping',done=>{constvm=newVue({data:{test:0,update:0},template:'<div>'+'<inputref="input"v-model.number="test">{{update}}'+'<inputref="blur">'+'</div>'}).$mount()document.body.appendChild(vm.$el)vm.$refs.input.focus()expect(vm.test).toBe(0)vm.$refs.input.value='1.0'triggerEvent(vm.$refs.input,'input')expect(vm.test).toBe(1)vm.update++waitForUpdate(()=>{expect(vm.$refs.input.value).toBe('1.0')vm.$refs.blur.focus()vm.update++}).then(()=>{expect(vm.$refs.input.value).toBe('1')}).then(done)})it('.trimfocusandtyping',done=>{constvm=newVue({data:{test:'abc',update:0},template:'<div>'+'<inputref="input"v-model.trim="test"type="text">{{update}}'+'<inputref="blur"/>'+'</div>'}).$mount()document.body.appendChild(vm.$el)vm.$refs.input.focus()vm.$refs.input.value='abc'triggerEvent(vm.$refs.input,'input')expect(vm.test).toBe('abc')vm.update++waitForUpdate(()=>{expect(vm.$refs.input.value).toBe('abc')vm.$refs.blur.focus()vm.update++}).then(()=>{expect(vm.$refs.input.value).toBe('abc')}).then(done)})it('multipleinputs',done=>{constspy=vi.fn()constvm=newVue({data:{selections:[[1,2,3],[4,5]],inputList:[{name:'questionA',data:['a','b','c']},{name:'questionB',data:['1','2']}]},watch:{selections:spy},template:'<div>'+'<divv-for="(inputGroup,idx)ininputList">'+'<div>'+'<spanv-for="(item,index)ininputGroup.data">'+'<inputv-bind:name="item"type="text"v-model.number="selections[idx][index]"v-bind:id="idx+\'-\'+index"/>'+'<label>{{item}}</label>'+'</span>'+'</div>'+'</div>'+'<spanref="rs">{{selections}}</span>'+'</div>'}).$mount()constinputs=vm.$el.getElementsByTagName('input')inputs[1].value='test'triggerEvent(inputs[1],'input')waitForUpdate(()=>{expect(spy).toHaveBeenCalled()expect(vm.selections).toEqual([[1,'test',3],[4,5]])}).then(done)})if(isIE9){it('IE9selectionchange',done=>{constvm=newVue({data:{test:'foo'},template:'<inputv-model="test">'}).$mount()constinput=vm.$elinput.value='bar'document.body.appendChild(input)input.focus()triggerEvent(input,'selectionchange')waitForUpdate(()=>{expect(vm.test).toBe('bar')input.value='a'triggerEvent(input,'selectionchange')expect(vm.test).toBe('a')}).then(done)})}it('compositionevents',function(done){constvm=newVue({data:{test:'foo'},template:'<inputv-model="test">'}).$mount()constinput=vm.$eltriggerEvent(input,'compositionstart')input.value='baz'//inputbeforecompositionunlockshouldnotcallsettriggerEvent(input,'input')expect(vm.test).toBe('foo')//aftercompositionunlockitshouldworktriggerEvent(input,'compositionend')triggerEvent(input,'input')expect(vm.test).toBe('baz')done()})it('warninvalidtag',()=>{newVue({data:{test:'foo'},template:'<divv-model="test"></div>'}).$mount()expect('<divv-model="test">:v-modelisnotsupportedonthiselementtype').toHaveBeenWarned()})//#3468it('shouldhavehigherprioritythanuserv-onevents',()=>{constspy=vi.fn()constvm=newVue({data:{a:'a'},template:'<inputv-model="a"@input="onInput">',methods:{onInput(e){spy(this.a)}}}).$mount()vm.$el.value='b'triggerEvent(vm.$el,'input')expect(spy).toHaveBeenCalledWith('b')})it('warnbindingtov-foralias',()=>{newVue({data:{strings:['hi']},template:`<div><divv-for="strinstrings"><inputv-model="str"></div></div>`}).$mount()expect('Youarebindingv-modeldirectlytoav-foriterationalias').toHaveBeenWarned()})it('warnifv-modelandv-bind:valueconflict',()=>{newVue({data:{test:'foo'},template:'<inputtype="text"v-model="test"v-bind:value="test">'}).$mount()expect('v-bind:value="test"conflictswithv-model').toHaveBeenWarned()})it('warnifv-modeland:valueconflict',()=>{newVue({data:{test:'foo'},template:'<inputtype="text"v-model="test":value="test">'}).$mount()expect(':value="test"conflictswithv-model').toHaveBeenWarned()})it('shouldnotwarnonradio,checkbox,orcustomcomponent',()=>{newVue({data:{test:''},components:{foo:{props:['model','value'],model:{prop:'model',event:'change'},template:`<div/>`}},template:`<div><inputtype="checkbox"v-model="test":value="test"><inputtype="radio"v-model="test":value="test"><foov-model="test":value="test"/></div>`}).$mount()expect('conflictswithv-model').not.toHaveBeenWarned()})it('shouldnotwarnoninputwithdynamictypebinding',()=>{newVue({data:{type:'checkbox',test:'foo'},template:'<input:type="type"v-model="test":value="test">'}).$mount()expect('conflictswithv-model').not.toHaveBeenWarned()})if(!isAndroid){it('doesnottriggerextrainputeventswithsinglecompositionend',()=>{constspy=vi.fn()constvm=newVue({data:{a:'a'},template:'<inputv-model="a"@input="onInput">',methods:{onInput(e){spy(e.target.value)}}}).$mount()expect(spy.mock.calls.length).toBe(0)vm.$el.value='b'triggerEvent(vm.$el,'input')expect(spy.mock.calls.length).toBe(1)triggerEvent(vm.$el,'compositionend')expect(spy.mock.calls.length).toBe(1)})it('triggersextrainputoncompositionstart+end',()=>{constspy=vi.fn()constvm=newVue({data:{a:'a'},template:'<inputv-model="a"@input="onInput">',methods:{onInput(e){spy(e.target.value)}}}).$mount()expect(spy.mock.calls.length).toBe(0)vm.$el.value='b'triggerEvent(vm.$el,'input')expect(spy.mock.calls.length).toBe(1)triggerEvent(vm.$el,'compositionstart')triggerEvent(vm.$el,'compositionend')expect(spy.mock.calls.length).toBe(2)})//#4392it('shouldnotupdatevaluewithmodifierswheninfocusifpost-conversionvaluesarethesame',done=>{constvm=newVue({data:{a:1,foo:false},template:'<div>{{foo}}<inputref="input"v-model.number="a"></div>'}).$mount()document.body.appendChild(vm.$el)vm.$refs.input.focus()vm.$refs.input.value='1.000'vm.foo=truewaitForUpdate(()=>{expect(vm.$refs.input.value).toBe('1.000')}).then(done)})//#6552//ThiswasoriginalintroducedduetothemicrotaskbetweenDOMeventsissue//butfixedafterswitchingtoMessageChannel.it('shouldnotblockinputwhenanotherinputlistenerwithmodifierisused',done=>{constvm=newVue({data:{a:'a',foo:false},template:`<div><inputref="input"v-model="a"@input.capture="onInput">{{a}}<divv-if="foo">foo</div></div>`,methods:{onInput(e){this.foo=true}}}).$mount()document.body.appendChild(vm.$el)vm.$refs.input.focus()vm.$refs.input.value='b'triggerEvent(vm.$refs.input,'input')//notusingwaitforupdateherebecausetherewillbetwoupdatecycles//onecausedbyonInputinthefirstlistenersetTimeout(()=>{expect(vm.a).toBe('b')expect(vm.$refs.input.value).toBe('b')done()},16)})it('shouldcreateandmakereactivenon-existentproperties',done=>{constvm=newVue({data:{foo:{}},template:'<inputv-model="foo.bar">'}).$mount()expect(vm.$el.value).toBe('')vm.$el.value='a'triggerEvent(vm.$el,'input')expect(vm.foo.bar).toBe('a')vm.foo.bar='b'waitForUpdate(()=>{expect(vm.$el.value).toBe('b')vm.foo={}}).then(()=>{expect(vm.$el.value).toBe('')}).then(done)})}if(isIE&&!isIE9){//#7138it('shouldnotfireinputoninitialrenderoftextareawithplaceholderinIE10/11',done=>{constel=document.createElement('div')document.body.appendChild(el)constvm=newVue({el,data:{foo:null},template:`<textareav-model="foo"placeholder="bar"></textarea>`})setTimeout(()=>{expect(vm.foo).toBe(null)done()},17)})//#9042it('shouldnotblockthefirstinputeventwhenplaceholderisempty',done=>{constel=document.createElement('div')document.body.appendChild(el)constvm=newVue({el,data:{evtCount:0},template:`<textareaplaceholder=""@input="evtCount++"></textarea>`})triggerEvent(vm.$el,'input')setTimeout(()=>{expect(vm.evtCount).toBe(1)done()},17)})}})