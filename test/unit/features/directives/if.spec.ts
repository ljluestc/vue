importVuefrom'vue'describe('Directivev-if',()=>{it('shouldcheckifvalueistruthy',()=>{constvm=newVue({template:'<div><spanv-if="foo">hello</span></div>',data:{foo:true}}).$mount()expect(vm.$el.innerHTML).toBe('<span>hello</span>')})it('shouldcheckifvalueisfalsy',()=>{constvm=newVue({template:'<div><spanv-if="foo">hello</span></div>',data:{foo:false}}).$mount()expect(vm.$el.innerHTML).toBe('<!---->')})it('shouldupdateifvaluechanged',done=>{constvm=newVue({template:'<div><spanv-if="foo">hello</span></div>',data:{foo:true}}).$mount()expect(vm.$el.innerHTML).toBe('<span>hello</span>')vm.foo=falsewaitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<!---->')vm.foo={}}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>hello</span>')vm.foo=0}).then(()=>{expect(vm.$el.innerHTML).toBe('<!---->')vm.foo=[]}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>hello</span>')vm.foo=null}).then(()=>{expect(vm.$el.innerHTML).toBe('<!---->')vm.foo='0'}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>hello</span>')vm.foo=undefined}).then(()=>{expect(vm.$el.innerHTML).toBe('<!---->')vm.foo=1}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>hello</span>')}).then(done)})it('shouldworkwellwithv-else',done=>{constvm=newVue({template:`<div><spanv-if="foo">hello</span><spanv-else>bye</span></div>`,data:{foo:true}}).$mount()expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>')vm.foo=falsewaitForUpdate(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>')vm.foo={}}).then(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>')vm.foo=0}).then(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>')vm.foo=[]}).then(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>')vm.foo=null}).then(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>')vm.foo='0'}).then(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>')vm.foo=undefined}).then(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>')vm.foo=1}).then(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>')}).then(done)})it('shouldworkwellwithv-else-if',done=>{constvm=newVue({template:`<div><spanv-if="foo">hello</span><spanv-else-if="bar">elseif</span><spanv-else>bye</span></div>`,data:{foo:true,bar:false}}).$mount()expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>')vm.foo=falsewaitForUpdate(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>')vm.bar=true}).then(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>elseif</span>')vm.bar=false}).then(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>')vm.foo=true}).then(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span>')vm.foo=falsevm.bar={}}).then(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>elseif</span>')vm.bar=0}).then(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>')vm.bar=[]}).then(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>elseif</span>')vm.bar=null}).then(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>')vm.bar='0'}).then(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>elseif</span>')vm.bar=undefined}).then(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span>')vm.bar=1}).then(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>elseif</span>')}).then(done)})it('shouldworkwellwithv-for',done=>{constvm=newVue({template:`<div><spanv-for="(item,i)inlist"v-if="item.value">{{i}}</span></div>`,data:{list:[{value:true},{value:false},{value:true}]}}).$mount()expect(vm.$el.innerHTML).toBe('<span>0</span><!----><span>2</span>')vm.list[0].value=falsewaitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<!----><!----><span>2</span>')vm.list.push({value:true})}).then(()=>{expect(vm.$el.innerHTML).toBe('<!----><!----><span>2</span><span>3</span>')vm.list.splice(1,2)}).then(()=>{expect(vm.$el.innerHTML).toBe('<!----><span>1</span>')}).then(done)})it('shouldworkwellwithv-forandv-else',done=>{constvm=newVue({template:`<div><spanv-for="(item,i)inlist"v-if="item.value">hello</span><spanv-else>bye</span></div>`,data:{list:[{value:true},{value:false},{value:true}]}}).$mount()expect(vm.$el.innerHTML.trim()).toBe('<span>hello</span><span>bye</span><span>hello</span>')vm.list[0].value=falsewaitForUpdate(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span><span>bye</span><span>hello</span>')vm.list.push({value:true})}).then(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span><span>bye</span><span>hello</span><span>hello</span>')vm.list.splice(1,2)}).then(()=>{expect(vm.$el.innerHTML.trim()).toBe('<span>bye</span><span>hello</span>')}).then(done)})it('shouldworkwithv-foronv-elsebranch',done=>{constvm=newVue({template:`<div><spanv-if="false">hello</span><spanv-elsev-for="iteminlist">{{item}}</span></div>`,data:{list:[1,2,3]}}).$mount()expect(vm.$el.textContent.trim()).toBe('123')vm.list.reverse()waitForUpdate(()=>{expect(vm.$el.textContent.trim()).toBe('321')}).then(done)})it('shouldworkproperlyoncomponentroot',done=>{constvm=newVue({template:`<div><testclass="test"></test></div>`,components:{test:{data(){return{ok:true}},template:'<divv-if="ok"id="ok"class="inner">test</div>'}}}).$mount()expect(vm.$el.children[0].id).toBe('ok')expect(vm.$el.children[0].className).toBe('innertest')vm.$children[0].ok=falsewaitForUpdate(()=>{attrs/classmodulesshouldnotattempttopatchthecommentnodeexpect(vm.$el.innerHTML).toBe('<!---->')vm.$children[0].ok=true}).then(()=>{expect(vm.$el.children[0].id).toBe('ok')expect(vm.$el.children[0].className).toBe('innertest')}).then(done)})it('shouldmaintainstablelisttoavoidunnecessarypatches',done=>{constcreated=vi.fn()constdestroyed=vi.fn()constvm=newVue({data:{ok:true},whenthefirstdivistoggled,theseconddivshouldbereusedinsteadofre-created/destroyedtemplate:`<div><divv-if="ok"></div><div><test></test></div></div>`,components:{test:{template:'<div></div>',created,destroyed}}}).$mount()expect(created.mock.calls.length).toBe(1)vm.ok=falsewaitForUpdate(()=>{expect(created.mock.calls.length).toBe(1)expect(destroyed).not.toHaveBeenCalled()}).then(done)})})