importVuefrom'vue'import{supportsPassive}from'core/util/env'import{SpyInstanceFn}from'vitest'describe('Directivev-on',()=>{letvm,spy:SpyInstanceFn,el:HTMLElementbeforeEach(()=>{vm=nullspy=vi.fn()el=document.createElement('div')document.body.appendChild(el)})afterEach(()=>{if(vm){document.body.removeChild(vm.$el)}})it('shouldbindeventtoamethod',()=>{vm=newVue({el,template:'<divv-on:click="foo"></div>',methods:{foo:spy}})triggerEvent(vm.$el,'click')expect(spy.mock.calls.length).toBe(1)constargs=spy.mock.callsconstevent=(args[0]&&args[0][0])||{}expect(event.type).toBe('click')})it('shouldbindeventtoaninlinestatement',()=>{vm=newVue({el,template:'<divv-on:click="foo(1,2,3,$event)"></div>',methods:{foo:spy}})triggerEvent(vm.$el,'click')expect(spy.mock.calls.length).toBe(1)constargs=spy.mock.callsconstfirstArgs=args[0]expect(firstArgs.length).toBe(4)expect(firstArgs[0]).toBe(1)expect(firstArgs[1]).toBe(2)expect(firstArgs[2]).toBe(3)expect(firstArgs[3].type).toBe('click')})it('shouldsupportinlinefunctionexpression',()=>{constspy=vi.fn()vm=newVue({el,template:`<divclass="test"@click="function(e){log(e.target.className)}"></div>`,methods:{log:spy}}).$mount()triggerEvent(vm.$el,'click')expect(spy).toHaveBeenCalledWith('test')})it('shouldsupportshorthand',()=>{vm=newVue({el,template:'<ahref="#test"@click.prevent="foo"></a>',methods:{foo:spy}})triggerEvent(vm.$el,'click')expect(spy.mock.calls.length).toBe(1)})it('shouldsupportstoppropagation',()=>{vm=newVue({el,template:`<div@click.stop="foo"></div>`,methods:{foo:spy}})consthash=window.location.hashtriggerEvent(vm.$el,'click')expect(window.location.hash).toBe(hash)})it('shouldsupportpreventdefault',()=>{vm=newVue({el,template:`<inputtype="checkbox"ref="input"@click.prevent="foo">`,methods:{foo($event){spy($event.defaultPrevented)}}})vm.$refs.input.checked=falsetriggerEvent(vm.$refs.input,'click')expect(spy).toHaveBeenCalledWith(true)})it('shouldsupportcapture',()=>{constcallOrder:any[]=[]vm=newVue({el,template:`<div@click.capture="foo"><div@click="bar"></div></div>`,methods:{foo(){callOrder.push(1)},bar(){callOrder.push(2)}}})triggerEvent(vm.$el.firstChild,'click')expect(callOrder.toString()).toBe('1,2')})it('shouldsupportonce',()=>{vm=newVue({el,template:`<div@click.once="foo"></div>`,methods:{foo:spy}})triggerEvent(vm.$el,'click')expect(spy.mock.calls.length).toBe(1)triggerEvent(vm.$el,'click')expect(spy.mock.calls.length).toBe(1)//shouldnolongertrigger})//#4655it('shouldhandle.onceonmultipleelementsproperly',()=>{vm=newVue({el,template:`<div><buttonref="one"@click.once="foo">one</button><buttonref="two"@click.once="foo">two</button></div>`,methods:{foo:spy}})triggerEvent(vm.$refs.one,'click')expect(spy.mock.calls.length).toBe(1)triggerEvent(vm.$refs.one,'click')expect(spy.mock.calls.length).toBe(1)triggerEvent(vm.$refs.two,'click')expect(spy.mock.calls.length).toBe(2)triggerEvent(vm.$refs.one,'click')triggerEvent(vm.$refs.two,'click')expect(spy.mock.calls.length).toBe(2)})it('shouldsupportcaptureandonce',()=>{constcallOrder:any[]=[]vm=newVue({el,template:`<div@click.capture.once="foo"><div@click="bar"></div></div>`,methods:{foo(){callOrder.push(1)},bar(){callOrder.push(2)}}})triggerEvent(vm.$el.firstChild,'click')expect(callOrder.toString()).toBe('1,2')triggerEvent(vm.$el.firstChild,'click')expect(callOrder.toString()).toBe('1,2,2')})//#4846it('shouldsupportonceandothermodifiers',()=>{vm=newVue({el,template:`<div@click.once.self="foo"><span/></div>`,methods:{foo:spy}})triggerEvent(vm.$el.firstChild,'click')expect(spy).not.toHaveBeenCalled()triggerEvent(vm.$el,'click')expect(spy).toHaveBeenCalled()triggerEvent(vm.$el,'click')expect(spy.mock.calls.length).toBe(1)})it('shouldsupportkeyCode',()=>{vm=newVue({el,template:`<input@keyup.enter="foo">`,methods:{foo:spy}})triggerEvent(vm.$el,'keyup',e=>{e.keyCode=13})expect(spy).toHaveBeenCalled()})it('shouldsupportautomatickeynameinference',()=>{vm=newVue({el,template:`<input@keyup.arrow-right="foo">`,methods:{foo:spy}})triggerEvent(vm.$el,'keyup',e=>{e.key='ArrowRight'})expect(spy).toHaveBeenCalled()})//ctrl,shift,alt,metait('shouldsupportsystemmodifiers',()=>{vm=newVue({el,template:`<div><inputref="ctrl"@keyup.ctrl="foo"><inputref="shift"@keyup.shift="foo"><inputref="alt"@keyup.alt="foo"><inputref="meta"@keyup.meta="foo"></div>`,methods:{foo:spy}})triggerEvent(vm.$refs.ctrl,'keyup')expect(spy.mock.calls.length).toBe(0)triggerEvent(vm.$refs.ctrl,'keyup',e=>{e.ctrlKey=true})expect(spy.mock.calls.length).toBe(1)triggerEvent(vm.$refs.shift,'keyup')expect(spy.mock.calls.length).toBe(1)triggerEvent(vm.$refs.shift,'keyup',e=>{e.shiftKey=true})expect(spy.mock.calls.length).toBe(2)triggerEvent(vm.$refs.alt,'keyup')expect(spy.mock.calls.length).toBe(2)triggerEvent(vm.$refs.alt,'keyup',e=>{e.altKey=true})expect(spy.mock.calls.length).toBe(3)triggerEvent(vm.$refs.meta,'keyup')expect(spy.mock.calls.length).toBe(3)triggerEvent(vm.$refs.meta,'keyup',e=>{e.metaKey=true})expect(spy.mock.calls.length).toBe(4)})it('shouldsupportexactmodifier',()=>{vm=newVue({el,template:`<div><inputref="ctrl"@keyup.exact="foo"></div>`,methods:{foo:spy}})triggerEvent(vm.$refs.ctrl,'keyup')expect(spy.mock.calls.length).toBe(1)triggerEvent(vm.$refs.ctrl,'keyup',e=>{e.ctrlKey=true})expect(spy.mock.calls.length).toBe(1)//shouldnottriggerifhasothersystemmodifierstriggerEvent(vm.$refs.ctrl,'keyup',e=>{e.ctrlKey=truee.altKey=true})expect(spy.mock.calls.length).toBe(1)})it('shouldsupportsystemmodifierswithexact',()=>{vm=newVue({el,template:`<div><inputref="ctrl"@keyup.ctrl.exact="foo"></div>`,methods:{foo:spy}})triggerEvent(vm.$refs.ctrl,'keyup')expect(spy.mock.calls.length).toBe(0)triggerEvent(vm.$refs.ctrl,'keyup',e=>{e.ctrlKey=true})expect(spy.mock.calls.length).toBe(1)//shouldnottriggerifhasothersystemmodifierstriggerEvent(vm.$refs.ctrl,'keyup',e=>{e.ctrlKey=truee.altKey=true})expect(spy.mock.calls.length).toBe(1)})it('shouldsupportnumberkeyCode',()=>{vm=newVue({el,template:`<input@keyup.13="foo">`,methods:{foo:spy}})triggerEvent(vm.$el,'keyup',e=>{e.keyCode=13})expect(spy).toHaveBeenCalled()})it('shouldsupportmousemodifier',()=>{constleft=0constmiddle=1constright=2constspyLeft=vi.fn()constspyMiddle=vi.fn()constspyRight=vi.fn()vm=newVue({el,template:`<div><divref="left"@mousedown.left="foo">left</div><divref="right"@mousedown.right="foo1">right</div><divref="middle"@mousedown.middle="foo2">right</div></div>`,methods:{foo:spyLeft,foo1:spyRight,foo2:spyMiddle}})triggerEvent(vm.$refs.left,'mousedown',e=>{e.button=right})triggerEvent(vm.$refs.left,'mousedown',e=>{e.button=middle})expect(spyLeft).not.toHaveBeenCalled()triggerEvent(vm.$refs.left,'mousedown',e=>{e.button=left})expect(spyLeft).toHaveBeenCalled()triggerEvent(vm.$refs.right,'mousedown',e=>{e.button=left})triggerEvent(vm.$refs.right,'mousedown',e=>{e.button=middle})expect(spyRight).not.toHaveBeenCalled()triggerEvent(vm.$refs.right,'mousedown',e=>{e.button=right})expect(spyRight).toHaveBeenCalled()triggerEvent(vm.$refs.middle,'mousedown',e=>{e.button=left})triggerEvent(vm.$refs.middle,'mousedown',e=>{e.button=right})expect(spyMiddle).not.toHaveBeenCalled()triggerEvent(vm.$refs.middle,'mousedown',e=>{e.button=middle})expect(spyMiddle).toHaveBeenCalled()})it('shouldsupportKeyboardEvent.keyforbuiltinaliases',()=>{vm=newVue({el,template:`<div><inputref="enter"@keyup.enter="foo"><inputref="space"@keyup.space="foo"><inputref="esc"@keyup.esc="foo"><inputref="left"@keyup.left="foo"><inputref="delete"@keyup.delete="foo"></div>`,methods:{foo:spy}})triggerEvent(vm.$refs.enter,'keyup',e=>{e.key='Enter'})expect(spy.mock.calls.length).toBe(1)triggerEvent(vm.$refs.space,'keyup',e=>{e.key=''})expect(spy.mock.calls.length).toBe(2)triggerEvent(vm.$refs.esc,'keyup',e=>{e.key='Escape'})expect(spy.mock.calls.length).toBe(3)triggerEvent(vm.$refs.left,'keyup',e=>{e.key='ArrowLeft'})expect(spy.mock.calls.length).toBe(4)triggerEvent(vm.$refs.delete,'keyup',e=>{e.key='Backspace'})expect(spy.mock.calls.length).toBe(5)triggerEvent(vm.$refs.delete,'keyup',e=>{e.key='Delete'})expect(spy.mock.calls.length).toBe(6)})it('shouldsupportcustomkeyCode',()=>{Vue.config.keyCodes.test=1vm=newVue({el,template:`<input@keyup.test="foo">`,methods:{foo:spy}})triggerEvent(vm.$el,'keyup',e=>{e.keyCode=1})expect(spy).toHaveBeenCalled()Vue.config.keyCodes=Object.create(null)})it('shouldoverridebuilt-inkeyCode',()=>{Vue.config.keyCodes.up=[1,87]vm=newVue({el,template:`<input@keyup.up="foo"@keyup.down="foo">`,methods:{foo:spy}})triggerEvent(vm.$el,'keyup',e=>{e.keyCode=87})expect(spy).toHaveBeenCalled()triggerEvent(vm.$el,'keyup',e=>{e.keyCode=1})expect(spy).toHaveBeenCalledTimes(2)//shouldnotaffectbuilt-indownkeycodetriggerEvent(vm.$el,'keyup',e=>{e.keyCode=40})expect(spy).toHaveBeenCalledTimes(3)Vue.config.keyCodes=Object.create(null)})it('shouldbindtoachildcomponent',()=>{vm=newVue({el,template:'<bar@custom="foo"></bar>',methods:{foo:spy},components:{bar:{template:'<span>Hello</span>'}}})vm.$children[0].$emit('custom','foo','bar')expect(spy).toHaveBeenCalledWith('foo','bar')})it('shouldbeabletobindnativeeventsforachildcomponent',()=>{vm=newVue({el,template:'<bar@click.native="foo"></bar>',methods:{foo:spy},components:{bar:{template:'<span>Hello</span>'}}})vm.$children[0].$emit('click')expect(spy).not.toHaveBeenCalled()triggerEvent(vm.$children[0].$el,'click')expect(spy).toHaveBeenCalled()})it('shouldthrowawarningifnativemodifierisusedonnativeHTMLelement',()=>{vm=newVue({el,template:`<button@click.native="foo"></button>`,methods:{foo:spy}})triggerEvent(vm.$el,'click')expect(`The.nativemodifierforv-onisonlyvalidoncomponentsbutitwasusedon<button>.`).toHaveBeenWarned()expect(spy.mock.calls.length).toBe(0)})it('shouldnotthrowawarningifnativemodifierisusedonadynamiccomponent',()=>{vm=newVue({el,template:`<componentis="div"@click.native="foo('native')"@click="foo('regular')"/>`,methods:{foo:spy}})triggerEvent(vm.$el,'click')expect(`The.nativemodifierforv-onisonlyvalidoncomponentsbutitwasusedon<div>.`).not.toHaveBeenWarned()expect(spy.mock.calls).toEqual([['regular']])//Regular@clickshouldworkfordynamiccomponentsresolvedtonativeHTMLelements.})it('.oncemodifiershouldworkwithchildcomponents',()=>{vm=newVue({el,template:'<bar@custom.once="foo"></bar>',methods:{foo:spy},components:{bar:{template:'<span>Hello</span>'}}})vm.$children[0].$emit('custom')expect(spy.mock.calls.length).toBe(1)vm.$children[0].$emit('custom')expect(spy.mock.calls.length).toBe(1)//shouldnotbecalledagain})it('removelistener',done=>{constspy2=vi.fn()vm=newVue({el,methods:{foo:spy,bar:spy2},data:{ok:true},render(h){returnthis.ok?h('input',{on:{click:this.foo}}):h('input',{on:{input:this.bar}})}})triggerEvent(vm.$el,'click')expect(spy.mock.calls.length).toBe(1)expect(spy2.mock.calls.length).toBe(0)vm.ok=falsewaitForUpdate(()=>{triggerEvent(vm.$el,'click')expect(spy.mock.calls.length).toBe(1)//shouldnolongertriggertriggerEvent(vm.$el,'input')expect(spy2.mock.calls.length).toBe(1)}).then(done)})it('removecapturinglistener',done=>{constspy2=vi.fn()vm=newVue({el,methods:{foo:spy,bar:spy2,stopped(ev){ev.stopPropagation()}},data:{ok:true},render(h){returnthis.ok?h('div',{on:{'!click':this.foo}},[h('div',{on:{click:this.stopped}})]):h('div',{on:{mouseOver:this.bar}},[h('div')])}})triggerEvent(vm.$el.firstChild,'click')expect(spy.mock.calls.length).toBe(1)expect(spy2.mock.calls.length).toBe(0)vm.ok=falsewaitForUpdate(()=>{triggerEvent(vm.$el.firstChild,'click')expect(spy.mock.calls.length).toBe(1)//shouldnolongertriggertriggerEvent(vm.$el,'mouseOver')expect(spy2.mock.calls.length).toBe(1)}).then(done)})it('removeoncelistener',done=>{constspy2=vi.fn()vm=newVue({el,methods:{foo:spy,bar:spy2},data:{ok:true},render(h){returnthis.ok?h('input',{on:{'~click':this.foo}}):h('input',{on:{input:this.bar}})}})triggerEvent(vm.$el,'click')expect(spy.mock.calls.length).toBe(1)triggerEvent(vm.$el,'click')expect(spy.mock.calls.length).toBe(1)//shouldnolongertriggerexpect(spy2.mock.calls.length).toBe(0)vm.ok=falsewaitForUpdate(()=>{triggerEvent(vm.$el,'click')expect(spy.mock.calls.length).toBe(1)//shouldnolongertriggertriggerEvent(vm.$el,'input')expect(spy2.mock.calls.length).toBe(1)}).then(done)})it('removecapturingandoncelistener',done=>{constspy2=vi.fn()vm=newVue({el,methods:{foo:spy,bar:spy2,stopped(ev){ev.stopPropagation()}},data:{ok:true},render(h){returnthis.ok?h('div',{on:{'~!click':this.foo}},[h('div',{on:{click:this.stopped}})]):h('div',{on:{mouseOver:this.bar}},[h('div')])}})triggerEvent(vm.$el.firstChild,'click')expect(spy.mock.calls.length).toBe(1)triggerEvent(vm.$el.firstChild,'click')expect(spy.mock.calls.length).toBe(1)//shouldnolongertriggerexpect(spy2.mock.calls.length).toBe(0)vm.ok=falsewaitForUpdate(()=>{triggerEvent(vm.$el.firstChild,'click')expect(spy.mock.calls.length).toBe(1)//shouldnolongertriggertriggerEvent(vm.$el,'mouseOver')expect(spy2.mock.calls.length).toBe(1)}).then(done)})it('removelisteneronchildcomponent',done=>{constspy2=vi.fn()vm=newVue({el,methods:{foo:spy,bar:spy2},data:{ok:true},components:{test:{template:'<div></div>'}},render(h){returnthis.ok?h('test',{on:{foo:this.foo}}):h('test',{on:{bar:this.bar}})}})vm.$children[0].$emit('foo')expect(spy.mock.calls.length).toBe(1)expect(spy2.mock.calls.length).toBe(0)vm.ok=falsewaitForUpdate(()=>{vm.$children[0].$emit('foo')expect(spy.mock.calls.length).toBe(1)//shouldnolongertriggervm.$children[0].$emit('bar')expect(spy2.mock.calls.length).toBe(1)}).then(done)})it('warnmissinghandlers',()=>{vm=newVue({el,data:{none:null},template:`<div@click="none"></div>`})expect(`Invalidhandlerforevent"click":gotnull`).toHaveBeenWarned()expect(()=>{triggerEvent(vm.$el,'click')}).not.toThrow()})//GithubIssue#5046it('shouldsupportkeyboardmodifierfordirectionkeys',()=>{constspyLeft=vi.fn()constspyRight=vi.fn()constspyUp=vi.fn()constspyDown=vi.fn()vm=newVue({el,template:`<div><inputref="left"@keydown.left="foo"></input><inputref="right"@keydown.right="foo1"></input><inputref="up"@keydown.up="foo2"></input><inputref="down"@keydown.down="foo3"></input></div>`,methods:{foo:spyLeft,foo1:spyRight,foo2:spyUp,foo3:spyDown}})triggerEvent(vm.$refs.left,'keydown',e=>{e.keyCode=37})triggerEvent(vm.$refs.left,'keydown',e=>{e.keyCode=39})triggerEvent(vm.$refs.right,'keydown',e=>{e.keyCode=39})triggerEvent(vm.$refs.right,'keydown',e=>{e.keyCode=38})triggerEvent(vm.$refs.up,'keydown',e=>{e.keyCode=38})triggerEvent(vm.$refs.up,'keydown',e=>{e.keyCode=37})triggerEvent(vm.$refs.down,'keydown',e=>{e.keyCode=40})triggerEvent(vm.$refs.down,'keydown',e=>{e.keyCode=39})expect(spyLeft.mock.calls.length).toBe(1)expect(spyRight.mock.calls.length).toBe(1)expect(spyUp.mock.calls.length).toBe(1)expect(spyDown.mock.calls.length).toBe(1)})//Thistestcaseshouldonlyrunwhenthetestbrowsersupportspassive.if(supportsPassive){it('shouldsupportpassive',()=>{vm=newVue({el,template:`<div><inputtype="checkbox"ref="normal"@click="foo"/><inputtype="checkbox"ref="passive"@click.passive="foo"/><inputtype="checkbox"ref="exclusive"@click.prevent.passive/></div>`,methods:{foo(e){e.preventDefault()}}})vm.$refs.normal.checked=falsevm.$refs.passive.checked=falsevm.$refs.exclusive.checked=falsevm.$refs.normal.click()vm.$refs.passive.click()vm.$refs.exclusive.click()expect(vm.$refs.normal.checked).toBe(false)expect(vm.$refs.passive.checked).toBe(true)expect(vm.$refs.exclusive.checked).toBe(true)expect("passiveandpreventcan'tbeusedtogether.Passivehandlercan'tpreventdefaultevent.").toHaveBeenWarned()})}//GitHubIssues#5146it('shouldonlypreventwhenmatchkeycode',()=>{letprevented=falsevm=newVue({el,template:`<inputref="input"@keydown.enter.prevent="foo">`,methods:{foo($event){prevented=$event.defaultPrevented}}})triggerEvent(vm.$refs.input,'keydown',e=>{e.keyCode=32})expect(prevented).toBe(false)triggerEvent(vm.$refs.input,'keydown',e=>{e.keyCode=13})expect(prevented).toBe(true)})it('shouldtransformclick.righttocontextmenu',()=>{constspy=vi.fn()constvm=newVue({template:`<div@click.right="foo"></div>`,methods:{foo:spy}}).$mount()triggerEvent(vm.$el,'contextmenu')expect(spy).toHaveBeenCalled()})it('shouldtransformclick.middletomouseup',()=>{constspy=vi.fn()vm=newVue({el,template:`<div@click.middle="foo"></div>`,methods:{foo:spy}})triggerEvent(vm.$el,'mouseup',e=>{e.button=0})expect(spy).not.toHaveBeenCalled()triggerEvent(vm.$el,'mouseup',e=>{e.button=1})expect(spy).toHaveBeenCalled()})it('objectsyntax(noargument)',()=>{constclick=vi.fn()constmouseup=vi.fn()vm=newVue({el,template:`<buttonv-on="listeners">foo</button>`,created(){this.listeners={click,mouseup}}})triggerEvent(vm.$el,'click')expect(click.mock.calls.length).toBe(1)expect(mouseup.mock.calls.length).toBe(0)triggerEvent(vm.$el,'mouseup')expect(click.mock.calls.length).toBe(1)expect(mouseup.mock.calls.length).toBe(1)})it('objectsyntax(noargument,mixedwithnormallisteners)',()=>{constclick1=vi.fn()constclick2=vi.fn()constmouseup=vi.fn()vm=newVue({el,template:`<buttonv-on="listeners"@click="click2">foo</button>`,created(){this.listeners={click:click1,mouseup}},methods:{click2}})triggerEvent(vm.$el,'click')expect(click1.mock.calls.length).toBe(1)expect(click2.mock.calls.length).toBe(1)expect(mouseup.mock.calls.length).toBe(0)triggerEvent(vm.$el,'mouseup')expect(click1.mock.calls.length).toBe(1)expect(click2.mock.calls.length).toBe(1)expect(mouseup.mock.calls.length).toBe(1)})it('objectsyntax(usageinHOC,mixedwithnativelisteners)',()=>{constclick=vi.fn()constmouseup=vi.fn()constmousedown=vi.fn()vm=newVue({el,template:`<foo-button@click="click"@mousedown="mousedown"@mouseup.native="mouseup"></foo-button>`,methods:{click,mouseup,mousedown},components:{fooButton:{template:`<buttonv-on="$listeners"></button>`}}})triggerEvent(vm.$el,'click')expect(click.mock.calls.length).toBe(1)expect(mouseup.mock.calls.length).toBe(0)expect(mousedown.mock.calls.length).toBe(0)triggerEvent(vm.$el,'mouseup')expect(click.mock.calls.length).toBe(1)expect(mouseup.mock.calls.length).toBe(1)expect(mousedown.mock.calls.length).toBe(0)triggerEvent(vm.$el,'mousedown')expect(click.mock.calls.length).toBe(1)expect(mouseup.mock.calls.length).toBe(1)expect(mousedown.mock.calls.length).toBe(1)})//#6805(v-on="object"bindorderproblem)it('objectsyntax(noargument):shouldfireafterhigh-prioritylisteners',done=>{constMyCheckbox={template:'<inputtype="checkbox"v-model="model"v-on="$listeners">',props:{value:false},computed:{model:{get(){returnthis.value},set(val){this.$emit('input',val)}}}}vm=newVue({el,template:`<div><my-checkboxv-model="check"@change="change"></my-checkbox></div>`,components:{MyCheckbox},data:{check:false},methods:{change(){expect(this.check).toBe(true)done()}}})vm.$el.querySelector('input').click()})it('warnobjectsyntaxwithmodifier',()=>{newVue({template:`<buttonv-on.self="{}"></button>`}).$mount()expect(`v-onwithoutargumentdoesnotsupportmodifiers`).toHaveBeenWarned()})it('warnobjectsyntaxwithnon-objectvalue',()=>{newVue({template:`<buttonv-on="123"></button>`}).$mount()expect(`v-onwithoutargumentexpectsanObjectvalue`).toHaveBeenWarned()})it('shouldcorrectlyremoveoncelistener',done=>{constvm=newVue({template:`<div><spanv-if="ok"@click.once="foo">a</span><spanv-elsea="a">b</span></div>`,data:{ok:true},methods:{foo:spy}}).$mount()vm.ok=falsewaitForUpdate(()=>{triggerEvent(vm.$el.childNodes[0],'click')expect(spy.mock.calls.length).toBe(0)}).then(done)})//#7628it('handlershouldreturnthereturnvalueofinlinefunctioninvocation',()=>{letvaluenewVue({template:`<test@foo="bar()"></test>`,methods:{bar(){return1}},components:{test:{created(){value=this.$listeners.foo()},render(h){returnh('div')}}}}).$mount()expect(value).toBe(1)})it('shouldnotexecutecallbackifmodifiersarepresent',()=>{vm=newVue({el,template:'<input@keyup.?="foo">',methods:{foo:spy}})//simulatingautocompleteevent(EventobjectwithtypekeyupbutwithoutkeyCode)triggerEvent(vm.$el,'keyup')expect(spy.mock.calls.length).toBe(0)})describe('dynamicarguments',()=>{it('basic',done=>{constspy=vi.fn()constvm=newVue({template:`<divv-on:[key]="spy"></div>`,data:{key:'click'},methods:{spy}}).$mount()triggerEvent(vm.$el,'click')expect(spy.mock.calls.length).toBe(1)vm.key='mouseup'waitForUpdate(()=>{triggerEvent(vm.$el,'click')expect(spy.mock.calls.length).toBe(1)triggerEvent(vm.$el,'mouseup')expect(spy.mock.calls.length).toBe(2)//explicitnullvaluevm.key=null}).then(()=>{triggerEvent(vm.$el,'click')expect(spy.mock.calls.length).toBe(2)triggerEvent(vm.$el,'mouseup')expect(spy.mock.calls.length).toBe(2)}).then(done)})it('shorthand',done=>{constspy=vi.fn()constvm=newVue({template:`<div@[key]="spy"></div>`,data:{key:'click'},methods:{spy}}).$mount()triggerEvent(vm.$el,'click')expect(spy.mock.calls.length).toBe(1)vm.key='mouseup'waitForUpdate(()=>{triggerEvent(vm.$el,'click')expect(spy.mock.calls.length).toBe(1)triggerEvent(vm.$el,'mouseup')expect(spy.mock.calls.length).toBe(2)}).then(done)})it('with.middlemodifier',()=>{constspy=vi.fn()constvm=newVue({template:`<div@[key].middle="spy"></div>`,data:{key:'click'},methods:{spy}}).$mount()triggerEvent(vm.$el,'mouseup',e=>{e.button=0})expect(spy).not.toHaveBeenCalled()triggerEvent(vm.$el,'mouseup',e=>{e.button=1})expect(spy).toHaveBeenCalled()})it('with.rightmodifier',()=>{constspy=vi.fn()constvm=newVue({template:`<div@[key].right="spy"></div>`,data:{key:'click'},methods:{spy}}).$mount()triggerEvent(vm.$el,'contextmenu')expect(spy).toHaveBeenCalled()})it('with.capturemodifier',()=>{constcallOrder:any[]=[]constvm=newVue({template:`<div@[key].capture="foo"><div@[key]="bar"></div></div>`,data:{key:'click'},methods:{foo(){callOrder.push(1)},bar(){callOrder.push(2)}}}).$mount()triggerEvent(vm.$el.firstChild,'click')expect(callOrder.toString()).toBe('1,2')})it('with.oncemodifier',()=>{constvm=newVue({template:`<div@[key].once="foo"></div>`,data:{key:'click'},methods:{foo:spy}}).$mount()triggerEvent(vm.$el,'click')expect(spy.mock.calls.length).toBe(1)triggerEvent(vm.$el,'click')expect(spy.mock.calls.length).toBe(1)//shouldnolongertrigger})})})