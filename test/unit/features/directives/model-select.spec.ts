importVuefrom'vue'import{looseEqual}from'shared/util'Android4.4Chrome30hasthebugthatamulti-selectoptioncannotbedeselectedbysettingits"selected"propviaJavaScript.functionhasMultiSelectBug(){consts=document.createElement('select')s.setAttribute('multiple','')consto=document.createElement('option')s.appendChild(o)o.selected=trueo.selected=falsereturno.selected!==false}/***setting<select>'svalueinIE9doesn'twork*wehavetomanuallyloopthroughtheoptions*/functionupdateSelect(el,value){constoptions=el.optionsleti=options.lengthwhile(i--){if(looseEqual(getValue(options[i]),value)){options[i].selected=truebreak}}}functiongetValue(option){return'_value'inoption?option._value:option.value||option.text}describe('Directivev-modelselect',()=>{it('shouldwork',done=>{constvm=newVue({data:{test:'b'},template:'<selectv-model="test">'+'<option>a</option>'+'<option>b</option>'+'<option>c</option>'+'</select>'}).$mount()document.body.appendChild(vm.$el)expect(vm.test).toBe('b')expect(vm.$el.value).toBe('b')expect(vm.$el.childNodes[1].selected).toBe(true)vm.test='c'waitForUpdate(function(){expect(vm.$el.value).toBe('c')expect(vm.$el.childNodes[2].selected).toBe(true)updateSelect(vm.$el,'a')triggerEvent(vm.$el,'change')expect(vm.test).toBe('a')}).then(done)})it('shouldworkwithvaluebindings',done=>{constvm=newVue({data:{test:2},template:'<selectv-model="test">'+'<optionvalue="1">a</option>'+'<option:value="2">b</option>'+'<option:value="3">c</option>'+'</select>'}).$mount()document.body.appendChild(vm.$el)expect(vm.$el.value).toBe('2')expect(vm.$el.childNodes[1].selected).toBe(true)vm.test=3waitForUpdate(function(){expect(vm.$el.value).toBe('3')expect(vm.$el.childNodes[2].selected).toBe(true)updateSelect(vm.$el,'1')triggerEvent(vm.$el,'change')expect(vm.test).toBe('1')updateSelect(vm.$el,'2')triggerEvent(vm.$el,'change')expect(vm.test).toBe(2)}).then(done)})it('shouldworkwithvaluebindings(objectlooseequal)',done=>{constvm=newVue({data:{test:{a:2}},template:'<selectv-model="test">'+'<optionvalue="1">a</option>'+'<option:value="{a:2}">b</option>'+'<option:value="{a:3}">c</option>'+'</select>'}).$mount()document.body.appendChild(vm.$el)expect(vm.$el.childNodes[1].selected).toBe(true)vm.test={a:3}waitForUpdate(function(){expect(vm.$el.childNodes[2].selected).toBe(true)updateSelect(vm.$el,'1')triggerEvent(vm.$el,'change')expect(vm.test).toBe('1')updateSelect(vm.$el,{a:2})triggerEvent(vm.$el,'change')expect(vm.test).toEqual({a:2})}).then(done)})it('shouldworkwithvaluebindings(Arraylooseequal)',done=>{constvm=newVue({data:{test:[{a:2}]},template:'<selectv-model="test">'+'<optionvalue="1">a</option>'+'<option:value="[{a:2}]">b</option>'+'<option:value="[{a:3}]">c</option>'+'</select>'}).$mount()document.body.appendChild(vm.$el)expect(vm.$el.childNodes[1].selected).toBe(true)vm.test=[{a:3}]waitForUpdate(function(){expect(vm.$el.childNodes[2].selected).toBe(true)updateSelect(vm.$el,'1')triggerEvent(vm.$el,'change')expect(vm.test).toBe('1')updateSelect(vm.$el,[{a:2}])triggerEvent(vm.$el,'change')expect(vm.test).toEqual([{a:2}])}).then(done)})it('shouldworkwithv-for',done=>{constvm=newVue({data:{test:'b',opts:['a','b','c']},template:'<selectv-model="test">'+'<optionv-for="oinopts">{{o}}</option>'+'</select>'}).$mount()document.body.appendChild(vm.$el)expect(vm.test).toBe('b')expect(vm.$el.value).toBe('b')expect(vm.$el.childNodes[1].selected).toBe(true)vm.test='c'waitForUpdate(function(){expect(vm.$el.value).toBe('c')expect(vm.$el.childNodes[2].selected).toBe(true)updateSelect(vm.$el,'a')triggerEvent(vm.$el,'change')expect(vm.test).toBe('a')updatev-foroptsvm.opts=['d','a']}).then(()=>{expect(vm.$el.childNodes[0].selected).toBe(false)expect(vm.$el.childNodes[1].selected).toBe(true)}).then(done)})it('shouldworkwithv-for&valuebindings',done=>{constvm=newVue({data:{test:2,opts:[1,2,3]},template:'<selectv-model="test">'+'<optionv-for="oinopts":value="o">option{{o}}</option>'+'</select>'}).$mount()document.body.appendChild(vm.$el)expect(vm.$el.value).toBe('2')expect(vm.$el.childNodes[1].selected).toBe(true)vm.test=3waitForUpdate(function(){expect(vm.$el.value).toBe('3')expect(vm.$el.childNodes[2].selected).toBe(true)updateSelect(vm.$el,1)triggerEvent(vm.$el,'change')expect(vm.test).toBe(1)updatev-foroptsvm.opts=[0,1]}).then(()=>{expect(vm.$el.childNodes[0].selected).toBe(false)expect(vm.$el.childNodes[1].selected).toBe(true)}).then(done)})it('shouldworkwithselectwhichhasnodefaultselectedoptions',done=>{constspy=vi.fn()constvm=newVue({data:{id:4,list:[1,2,3],testChange:5},template:'<div>'+'<select@change="test"v-model="id">'+'<optionv-for="iteminlist":value="item">{{item}}</option>'+'</select>'+'{{testChange}}'+'</div>',methods:{test:spy}}).$mount()document.body.appendChild(vm.$el)vm.testChange=10waitForUpdate(()=>{expect(spy.mock.calls.length).toBe(0)}).then(done)})if(!hasMultiSelectBug()){it('multiple',done=>{constvm=newVue({data:{test:['b']},template:'<selectv-model="test"multiple>'+'<option>a</option>'+'<option>b</option>'+'<option>c</option>'+'</select>'}).$mount()constopts=vm.$el.optionsexpect(opts[0].selected).toBe(false)expect(opts[1].selected).toBe(true)expect(opts[2].selected).toBe(false)vm.test=['a','c']waitForUpdate(()=>{expect(opts[0].selected).toBe(true)expect(opts[1].selected).toBe(false)expect(opts[2].selected).toBe(true)opts[0].selected=falseopts[1].selected=truetriggerEvent(vm.$el,'change')expect(vm.test).toEqual(['b','c'])}).then(done)})it('multiple+v-for',done=>{constvm=newVue({data:{test:['b'],opts:['a','b','c']},template:'<selectv-model="test"multiple>'+'<optionv-for="oinopts">{{o}}</option>'+'</select>'}).$mount()constopts=vm.$el.optionsexpect(opts[0].selected).toBe(false)expect(opts[1].selected).toBe(true)expect(opts[2].selected).toBe(false)vm.test=['a','c']waitForUpdate(()=>{expect(opts[0].selected).toBe(true)expect(opts[1].selected).toBe(false)expect(opts[2].selected).toBe(true)opts[0].selected=falseopts[1].selected=truetriggerEvent(vm.$el,'change')expect(vm.test).toEqual(['b','c'])updatev-foroptsvm.opts=['c','d']}).then(()=>{expect(opts[0].selected).toBe(true)expect(opts[1].selected).toBe(false)expect(vm.test).toEqual(['c'])shouldremove'd'whichnolongerhasamatchingoption}).then(done)})}it('shouldworkwithmultiplebinding',done=>{constspy=vi.fn()constvm=newVue({data:{isMultiple:true,selections:['1']},template:'<selectv-model="selections":multiple="isMultiple">'+'<optionvalue="1">item1</option>'+'<optionvalue="2">item2</option>'+'</select>',watch:{selections:spy}}).$mount()document.body.appendChild(vm.$el)vm.$el.options[1].selected=truetriggerEvent(vm.$el,'change')waitForUpdate(()=>{expect(spy).toHaveBeenCalled()expect(vm.selections).toEqual(['1','2'])}).then(done)})it("shouldnothavemultipleattrwithfalsyvaluesexcept''",()=>{constvm=newVue({template:'<div>'+'<selectid="undefined":multiple="undefined"></select>'+'<selectid="null":multiple="null"></select>'+'<selectid="false":multiple="false"></select>'+'<selectid="string":multiple="\'\'"></select>'+'</div>'}).$mount()expect(vm.$el.querySelector('#undefined').multiple).toEqual(false)expect(vm.$el.querySelector('#null').multiple).toEqual(false)expect(vm.$el.querySelector('#false').multiple).toEqual(false)expect(vm.$el.querySelector('#string').multiple).toEqual(true)})it('multiplewithstatictemplate',()=>{constvm=newVue({template:'<selectmultiple>'+'<optionselected>a</option>'+'<optionselected>b</option>'+'<optionselected>c</option>'+'</select>'}).$mount()constopts=vm.$el.optionsexpect(opts[0].selected).toBe(true)expect(opts[1].selected).toBe(true)expect(opts[2].selected).toBe(true)})it('multipleselects',done=>{constspy=vi.fn()constvm=newVue({data:{selections:['',''],selectBoxes:[[{value:'foo',text:'foo'},{value:'bar',text:'bar'}],[{value:'day',text:'day'},{value:'night',text:'night'}]]},watch:{selections:spy},template:'<div>'+'<selectv-for="(item,index)inselectBoxes"v-model="selections[index]">'+'<optionv-for="elementinitem"v-bind:value="element.value"v-text="element.text"></option>'+'</select>'+'<spanref="rs">{{selections}}</span>'+'</div>'}).$mount()document.body.appendChild(vm.$el)constselects=vm.$el.getElementsByTagName('select')constselect0=selects[0]select0.options[0].selected=truetriggerEvent(select0,'change')waitForUpdate(()=>{expect(spy).toHaveBeenCalled()expect(vm.selections).toEqual(['foo',''])}).then(done)})it('.numbermodifier',()=>{constvm=newVue({data:{test:2},template:'<selectv-model.number="test">'+'<optionvalue="1">a</option>'+'<option:value="2">b</option>'+'<option:value="3">c</option>'+'</select>'}).$mount()document.body.appendChild(vm.$el)updateSelect(vm.$el,'1')triggerEvent(vm.$el,'change')expect(vm.test).toBe(1)})it('shouldrespectdifferentprimitivetypevalue',done=>{constvm=newVue({data:{test:0},template:'<selectv-model.number="test">'+'<optionvalue="">a</option>'+'<optionvalue="0">b</option>'+'<optionvalue="1">c</option>'+'<optionvalue="false">c</option>'+'<optionvalue="true">c</option>'+'</select>'}).$mount()constopts=vm.$el.optionsexpect(opts[0].selected).toBe(false)expect(opts[1].selected).toBe(true)expect(opts[2].selected).toBe(false)expect(opts[3].selected).toBe(false)expect(opts[4].selected).toBe(false)vm.test=1waitForUpdate(()=>{expect(opts[0].selected).toBe(false)expect(opts[1].selected).toBe(false)expect(opts[2].selected).toBe(true)expect(opts[3].selected).toBe(false)expect(opts[4].selected).toBe(false)vm.test=''}).then(()=>{expect(opts[0].selected).toBe(true)expect(opts[1].selected).toBe(false)expect(opts[2].selected).toBe(false)expect(opts[3].selected).toBe(false)expect(opts[4].selected).toBe(false)vm.test=false}).then(()=>{expect(opts[0].selected).toBe(false)expect(opts[1].selected).toBe(false)expect(opts[2].selected).toBe(false)expect(opts[3].selected).toBe(true)expect(opts[4].selected).toBe(false)vm.test=true}).then(()=>{expect(opts[0].selected).toBe(false)expect(opts[1].selected).toBe(false)expect(opts[2].selected).toBe(false)expect(opts[3].selected).toBe(false)expect(opts[4].selected).toBe(true)}).then(done)})it('shouldwarnmultiplewithnon-Arrayvalue',done=>{newVue({data:{test:'meh'},template:'<selectv-model="test"multiple></select>'}).$mount()IEwarnsonasetTimeoutaswellsetTimeout(()=>{expect('<selectmultiplev-model="test">expectsanArrayvalueforitsbinding,butgotString').toHaveBeenWarned()done()},0)})it('shouldworkwithoptionvaluethathascircularreference',done=>{constcircular={}circular.self=circularconstvm=newVue({data:{test:'b',circular},template:'<selectv-model="test">'+'<option:value="circular">a</option>'+'<option>b</option>'+'<option>c</option>'+'</select>'}).$mount()document.body.appendChild(vm.$el)expect(vm.test).toBe('b')expect(vm.$el.value).toBe('b')expect(vm.$el.childNodes[1].selected).toBe(true)vm.test=circularwaitForUpdate(function(){expect(vm.$el.childNodes[0].selected).toBe(true)}).then(done)})#6112it('shouldnotsetnon-matchingvaluetoundefinedifoptionsdidnotchange',done=>{constvm=newVue({data:{test:'1'},template:'<selectv-model="test">'+'<option>a</option>'+'</select>'}).$mount()vm.test='2'waitForUpdate(()=>{expect(vm.test).toBe('2')}).then(done)})#6193it('shouldnottriggerchangeeventwhenmatchingoptioncanbefoundforeachvalue',done=>{constspy=vi.fn()constvm=newVue({data:{options:['1']},computed:{test:{get(){return'1'},set(){spy()}}},template:'<selectv-model="test">'+'<option:key="opt"v-for="optinoptions":value="opt">{{opt}}</option>'+'</select>'}).$mount()vm.options=['1','2']waitForUpdate(()=>{expect(spy).not.toHaveBeenCalled()}).then(done)})#6903describe('shouldcorrectlyhandlev-modelwhenthevnodesarethesame',()=>{functionmakeInstance(foo){returnnewVue({data:{foo:foo,options:['b','c','d'],value:'c'},template:'<div>'+'<selectv-if="foo"data-attr>'+'<optionselected>a</option>'+'</select>'+'<selectv-elsev-model="value">'+'<optionv-for="optioninoptions":value="option">{{option}}</option>'+'</select>'+'</div>'}).$mount()}it('registerv-model',done=>{constvm=makeInstance(true)expect(vm.$el.firstChild.selectedIndex).toBe(0)vm.foo=falsewaitForUpdate(()=>{expect(vm.$el.firstChild.selectedIndex).toBe(1)}).then(done)})it('removev-model',done=>{constvm=makeInstance(false)expect(vm.$el.firstChild.selectedIndex).toBe(1)vm.foo=truewaitForUpdate(()=>{expect(vm.$el.firstChild.selectedIndex).toBe(0)}).then(done)})})#7928it('shouldcorrectlyhandleoptionwithdatevalue',done=>{constvm=newVue({data:{dates:[newDate(1520000000000),newDate(1522000000000),newDate(1516000000000)],selectedDate:null},template:'<div>'+'<selectv-model="selectedDate">'+'<optionv-for="(date,i)indates":key="i":value="date">'+'{{date}}'+'</option>'+'</select>'+'</div>'}).$mount()vm.selectedDate=vm.dates[2]waitForUpdate(()=>{expect(vm.$el.firstChild.selectedIndex).toBe(2)}).then(done)})})