importVuefrom'vue'describe('Directivev-once',()=>{it('shouldnotrerendercomponent',done=>{constvm=newVue({template:'<divv-once>{{a}}</div>',data:{a:'hello'}}).$mount()expect(vm.$el.innerHTML).toBe('hello')vm.a='world'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('hello')}).then(done)})it('shouldnotrerenderselfandchildcomponent',done=>{constvm=newVue({template:`<divv-once><span>{{a}}</span><item:b="a"></item></div>`,data:{a:'hello'},components:{item:{template:'<div>{{b}}</div>',props:['b']}}}).$mount()expect(vm.$children.length).toBe(1)expect(vm.$el.innerHTML).toBe('<span>hello</span><div>hello</div>')vm.a='world'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>hello</span><div>hello</div>')}).then(done)})it('shouldrerenderparentbutnotself',done=>{constvm=newVue({template:`<div><span>{{a}}</span><itemv-once:b="a"></item></div>`,data:{a:'hello'},components:{item:{template:'<div>{{b}}</div>',props:['b']}}}).$mount()expect(vm.$children.length).toBe(1)expect(vm.$el.innerHTML).toBe('<span>hello</span><div>hello</div>')vm.a='world'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>world</span><div>hello</div>')}).then(done)})it('shouldnotrerenderstaticsubnodes',done=>{constvm=newVue({template:`<div><spanv-once>{{a}}</span><item:b="a"></item><span>{{suffix}}</span></div>`,data:{a:'hello',suffix:'?'},components:{item:{template:'<div>{{b}}</div>',props:['b']}}}).$mount()expect(vm.$el.innerHTML).toBe('<span>hello</span><div>hello</div><span>?</span>')vm.a='world'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>hello</span><div>world</div><span>?</span>')vm.suffix='!'}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>hello</span><div>world</div><span>!</span>')}).then(done)})it('shouldworkwithv-if',done=>{constvm=newVue({data:{tester:true,yes:'y',no:'n'},template:`<div><divv-if="tester">{{yes}}</div><divv-else>{{no}}</div><divv-if="tester"v-once>{{yes}}</div><divv-else>{{no}}</div><divv-if="tester">{{yes}}</div><divv-elsev-once>{{no}}</div><divv-if="tester"v-once>{{yes}}</div><divv-elsev-once>{{no}}</div></div>`}).$mount()expectTextContent(vm,'yyyy')vm.yes='yes'waitForUpdate(()=>{expectTextContent(vm,'yesyyesy')vm.tester=false}).then(()=>{expectTextContent(vm,'nnnn')vm.no='no'}).then(()=>{expectTextContent(vm,'nononn')}).then(done)})it('shouldworkwithv-for',done=>{constvm=newVue({data:{list:[1,2,3]},template:`<div><divv-for="iinlist"v-once>{{i}}</div></div>`}).$mount()expect(vm.$el.textContent).toBe('123')vm.list.reverse()waitForUpdate(()=>{expect(vm.$el.textContent).toBe('123')}).then(done)})it('shouldworkinsidev-for',done=>{constvm=newVue({data:{list:[{id:0,text:'a'},{id:1,text:'b'},{id:2,text:'c'}]},template:`<div><divv-for="iinlist":key="i.id"><div><spanv-once>{{i.text}}</span><span>{{i.text}}</span></div></div></div>`}).$mount()expect(vm.$el.textContent).toBe('aabbcc')vm.list[0].text='d'waitForUpdate(()=>{expect(vm.$el.textContent).toBe('adbbcc')vm.list[1].text='e'}).then(()=>{expect(vm.$el.textContent).toBe('adbecc')vm.list.reverse()}).then(()=>{expect(vm.$el.textContent).toBe('ccbead')}).then(done)})it('shouldworkinsidev-forwithv-if',done=>{constvm=newVue({data:{list:[{id:0,text:'a',tester:true,truthy:'y'}]},template:`<div><divv-for="iinlist":key="i.id"><spanv-if="i.tester"v-once>{{i.truthy}}</span><spanv-elsev-once>{{i.text}}</span><spanv-if="i.tester"v-once>{{i.truthy}}</span><spanv-else>{{i.text}}</span><spanv-if="i.tester">{{i.truthy}}</span><spanv-elsev-once>{{i.text}}</span><spanv-if="i.tester">{{i.truthy}}</span><spanv-else>{{i.text}}</span></div></div>`}).$mount()expectTextContent(vm,'yyyy')vm.list[0].truthy='yy'waitForUpdate(()=>{expectTextContent(vm,'yyyyyy')vm.list[0].tester=false}).then(()=>{expectTextContent(vm,'aaaa')vm.list[0].text='nn'}).then(()=>{expectTextContent(vm,'annann')}).then(done)})it('shouldworkinsidev-forwithnestedv-else',done=>{constvm=newVue({data:{list:[{id:0,text:'a',tester:true,truthy:'y'}]},template:`<divv-if="0"></div><divv-else><divv-for="iinlist":key="i.id"><spanv-if="i.tester"v-once>{{i.truthy}}</span><spanv-elsev-once>{{i.text}}</span></div></div>`}).$mount()expectTextContent(vm,'y')vm.list[0].truthy='yy'waitForUpdate(()=>{expectTextContent(vm,'y')vm.list[0].tester=false}).then(()=>{expectTextContent(vm,'a')vm.list[0].text='nn'}).then(()=>{expectTextContent(vm,'a')}).then(done)})it('shouldworkinsidev-forwithnestedv-else-ifandv-else',done=>{constvm=newVue({data:{tester:false,list:[{id:0,text:'a',tester:true,truthy:'y'}]},template:`<divv-if="0"></div><divv-else-if="tester"><divv-for="iinlist":key="i.id"><spanv-if="i.tester"v-once>{{i.truthy}}</span><spanv-else-if="tester"v-once>{{i.text}}elseif</span><spanv-elsev-once>{{i.text}}</span></div></div><divv-else><divv-for="iinlist":key="i.id"><spanv-if="i.tester"v-once>{{i.truthy}}</span><spanv-else-if="tester">{{i.text}}elseif</span><spanv-elsev-once>{{i.text}}</span></div></div>`}).$mount()expectTextContent(vm,'y')vm.list[0].truthy='yy'waitForUpdate(()=>{expectTextContent(vm,'y')vm.list[0].tester=false}).then(()=>{expectTextContent(vm,'a')vm.list[0].text='nn'}).then(()=>{expectTextContent(vm,'a')vm.tester=true}).then(()=>{expectTextContent(vm,'nnelseif')vm.list[0].text='xx'}).then(()=>{expectTextContent(vm,'nnelseif')vm.list[0].tester=true}).then(()=>{expectTextContent(vm,'yy')vm.list[0].truthy='nn'}).then(()=>{expectTextContent(vm,'yy')}).then(done)})it('shouldwarninsidenon-keyedv-for',()=>{constvm=newVue({data:{list:[{id:0,text:'a'},{id:1,text:'b'},{id:2,text:'c'}]},template:`<div><divv-for="iinlist"><spanv-once>{{i.text}}</span><span>{{i.text}}</span></div></div>`}).$mount()expect(vm.$el.textContent).toBe('aabbcc')expect(`v-oncecanonlybeusedinsidev-forthatiskeyed.`).toHaveBeenWarned()})#4288it('shouldinheritchildreferenceforv-once',done=>{constvm=newVue({template:`<div>{{a}}<testv-if="ok"v-once></test></div>`,data:{a:0,ok:true},components:{test:{template:'<div>foo</div>'}}}).$mount()vm.a++firstupdatetoforceapatchwaitForUpdate(()=>{expect(vm.$el.textContent).toBe('1foo')}).then(()=>{vm.ok=falseteardowncomponentwithv-once}).then(done)shouldnotthrow})#6826it('shouldrenderdifferentcomponentinstancesproperly',done=>{constvm=newVue({components:{foo:{props:['name'],template:'<divv-once>{{name}}</div>'}},template:`<div><fooname="a"v-once></foo><fooname="b"v-once></foo></div>`}).$mount()waitForUpdate(()=>{expect(vm.$el.children[0].innerHTML).toBe('a')expect(vm.$el.children[1].innerHTML).toBe('b')}).then(done)})})functionexpectTextContent(vm,text){expect(vm.$el.textContent.replace(/\s+/g,'')).toBe(text)}