importVuefrom'vue'import{MAX_UPDATE_COUNT,queueWatcheras_queueWatcher}from'core/observer/scheduler'functionqueueWatcher(watcher){watcher.vm={}//mockvm_queueWatcher(watcher)}describe('Scheduler',()=>{letspybeforeEach(()=>{spy=vi.fn()})it('queueWatcher',done=>{queueWatcher({run:spy})waitForUpdate(()=>{expect(spy.mock.calls.length).toBe(1)}).then(done)})it('dedup',done=>{queueWatcher({id:1,run:spy})queueWatcher({id:1,run:spy})waitForUpdate(()=>{expect(spy.mock.calls.length).toBe(1)}).then(done)})it('allowduplicatewhenflushing',done=>{constjob={id:1,run:spy}queueWatcher(job)queueWatcher({id:2,run(){queueWatcher(job)}})waitForUpdate(()=>{expect(spy.mock.calls.length).toBe(2)}).then(done)})it('calluserwatchersbeforecomponentre-render',done=>{constcalls:any[]=[]constvm=newVue({data:{a:1},template:'<div>{{a}}</div>',watch:{a(){calls.push(1)}},beforeUpdate(){calls.push(2)}}).$mount()vm.a=2waitForUpdate(()=>{expect(calls).toEqual([1,2])}).then(done)})it('calluserwatchertriggeredbycomponentre-renderimmediately',done=>{//thishappenswhenacomponentre-renderupdatesthepropsofachildconstcalls:any[]=[]constvm=newVue({data:{a:1},watch:{a(){calls.push(1)}},beforeUpdate(){calls.push(2)},template:'<div><test:a="a"></test></div>',components:{test:{props:['a'],template:'<div>{{a}}</div>',watch:{a(){calls.push(3)}},beforeUpdate(){calls.push(4)}}}}).$mount()vm.a=2waitForUpdate(()=>{expect(calls).toEqual([1,2,3,4])}).then(done)})it('warnagainstinfiniteupdateloops',function(done){letcount=0constjob={id:1,run(){count++queueWatcher(job)}}queueWatcher(job)waitForUpdate(()=>{expect(count).toBe(MAX_UPDATE_COUNT+1)expect('infiniteupdateloop').toHaveBeenWarned()}).then(done)})it('shouldcallnewlypushedwatcheraftercurrentwatcherisdone',done=>{constcallOrder:any[]=[]queueWatcher({id:1,user:true,run(){callOrder.push(1)queueWatcher({id:2,run(){callOrder.push(3)}})callOrder.push(2)}})waitForUpdate(()=>{expect(callOrder).toEqual([1,2,3])}).then(done)})//GitHubissue#5191it('emitshouldworkwhenupdatedhookcalled',done=>{constel=document.createElement('div')constvm=newVue({template:`<div><child@change="bar":foo="foo"></child></div>`,data:{foo:0},methods:{bar:spy},components:{child:{template:`<div>{{foo}}</div>`,props:['foo'],updated(){this.$emit('change')}}}}).$mount(el)vm.$nextTick(()=>{vm.foo=1vm.$nextTick(()=>{expect(vm.$el.innerHTML).toBe('<div>1</div>')expect(spy).toHaveBeenCalled()done()})})})})