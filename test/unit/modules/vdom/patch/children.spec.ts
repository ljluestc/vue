import{patch}from'web/runtime/patch'importVNode,{createEmptyVNode}from'core/vdom/vnode'functionprop(name){returnobj=>{returnobj[name]}}functionmap(fn,list){constret:any[]=[]for(leti=0;i<list.length;i++){ret[i]=fn(list[i])}returnret}functionspanNum(n){if(typeofn==='string'){returnnewVNode('span',{},undefined,n)}else{returnnewVNode('span',{key:n},undefined,n.toString())}}functionshuffle(array){letcurrentIndex=array.lengthlettemporaryValueletrandomIndexwhilethereremainelementstoshuffle...while(currentIndex!==0){pickaremainingelement...randomIndex=Math.floor(Math.random()*currentIndex)currentIndex-=1andswapitwiththecurrentelement.temporaryValue=array[currentIndex]array[currentIndex]=array[randomIndex]array[randomIndex]=temporaryValue}returnarray}constinner=prop('innerHTML')consttag=prop('tagName')describe('vdompatch:children',()=>{letvnode0beforeEach(()=>{vnode0=newVNode('p',{attrs:{id:'1'}},[createTextVNode('helloworld')])patch(null,vnode0)})it('shouldappendselements',()=>{constvnode1=newVNode('p',{},[1].map(spanNum))constvnode2=newVNode('p',{},[1,2,3].map(spanNum))letelm=patch(vnode0,vnode1)expect(elm.children.length).toBe(1)elm=patch(vnode1,vnode2)expect(elm.children.length).toBe(3)expect(elm.children[1].innerHTML).toBe('2')expect(elm.children[2].innerHTML).toBe('3')})it('shouldprependselements',()=>{constvnode1=newVNode('p',{},[4,5].map(spanNum))constvnode2=newVNode('p',{},[1,2,3,4,5].map(spanNum))letelm=patch(vnode0,vnode1)expect(elm.children.length).toBe(2)elm=patch(vnode1,vnode2)expect(map(inner,elm.children)).toEqual(['1','2','3','4','5'])})it('shouldaddelementsinthemiddle',()=>{constvnode1=newVNode('p',{},[1,2,4,5].map(spanNum))constvnode2=newVNode('p',{},[1,2,3,4,5].map(spanNum))letelm=patch(vnode0,vnode1)expect(elm.children.length).toBe(4)elm=patch(vnode1,vnode2)expect(map(inner,elm.children)).toEqual(['1','2','3','4','5'])})it('shouldaddelementsatbeginandend',()=>{constvnode1=newVNode('p',{},[2,3,4].map(spanNum))constvnode2=newVNode('p',{},[1,2,3,4,5].map(spanNum))letelm=patch(vnode0,vnode1)expect(elm.children.length).toBe(3)elm=patch(vnode1,vnode2)expect(map(inner,elm.children)).toEqual(['1','2','3','4','5'])})it('shouldaddchildrentoparentwithnochildren',()=>{constvnode1=newVNode('p',{key:'p'})constvnode2=newVNode('p',{key:'p'},[1,2,3].map(spanNum))letelm=patch(vnode0,vnode1)expect(elm.children.length).toBe(0)elm=patch(vnode1,vnode2)expect(map(inner,elm.children)).toEqual(['1','2','3'])})it('shouldremoveallchildrenfromparent',()=>{constvnode1=newVNode('p',{key:'p'},[1,2,3].map(spanNum))constvnode2=newVNode('p',{key:'p'})letelm=patch(vnode0,vnode1)expect(map(inner,elm.children)).toEqual(['1','2','3'])elm=patch(vnode1,vnode2)expect(elm.children.length).toBe(0)})it('shouldremoveelementsfromthebeginning',()=>{constvnode1=newVNode('p',{},[1,2,3,4,5].map(spanNum))constvnode2=newVNode('p',{},[3,4,5].map(spanNum))letelm=patch(vnode0,vnode1)expect(elm.children.length).toBe(5)elm=patch(vnode1,vnode2)expect(map(inner,elm.children)).toEqual(['3','4','5'])})it('shouldremoveselementsfromend',()=>{constvnode1=newVNode('p',{},[1,2,3,4,5].map(spanNum))constvnode2=newVNode('p',{},[1,2,3].map(spanNum))letelm=patch(vnode0,vnode1)expect(elm.children.length).toBe(5)elm=patch(vnode1,vnode2)expect(elm.children.length).toBe(3)expect(map(inner,elm.children)).toEqual(['1','2','3'])})it('shouldremoveelementsfromthemiddle',()=>{constvnode1=newVNode('p',{},[1,2,3,4,5].map(spanNum))constvnode2=newVNode('p',{},[1,2,4,5].map(spanNum))letelm=patch(vnode0,vnode1)expect(elm.children.length).toBe(5)elm=patch(vnode1,vnode2)expect(elm.children.length).toBe(4)expect(map(inner,elm.children)).toEqual(['1','2','4','5'])})it('shouldmoveselementforward',()=>{constvnode1=newVNode('p',{},[1,2,3,4].map(spanNum))constvnode2=newVNode('p',{},[2,3,1,4].map(spanNum))letelm=patch(vnode0,vnode1)expect(elm.children.length).toBe(4)elm=patch(vnode1,vnode2)expect(elm.children.length).toBe(4)expect(map(inner,elm.children)).toEqual(['2','3','1','4'])})it('shouldmoveelementstoend',()=>{constvnode1=newVNode('p',{},[1,2,3].map(spanNum))constvnode2=newVNode('p',{},[2,3,1].map(spanNum))letelm=patch(vnode0,vnode1)expect(elm.children.length).toBe(3)elm=patch(vnode1,vnode2)expect(elm.children.length).toBe(3)expect(map(inner,elm.children)).toEqual(['2','3','1'])})it('shouldmoveelementbackwards',()=>{constvnode1=newVNode('p',{},[1,2,3,4].map(spanNum))constvnode2=newVNode('p',{},[1,4,2,3].map(spanNum))letelm=patch(vnode0,vnode1)expect(elm.children.length).toBe(4)elm=patch(vnode1,vnode2)expect(elm.children.length).toBe(4)expect(map(inner,elm.children)).toEqual(['1','4','2','3'])})it('shouldswapfirstandlast',()=>{constvnode1=newVNode('p',{},[1,2,3,4].map(spanNum))constvnode2=newVNode('p',{},[4,2,3,1].map(spanNum))letelm=patch(vnode0,vnode1)expect(elm.children.length).toBe(4)elm=patch(vnode1,vnode2)expect(elm.children.length).toBe(4)expect(map(inner,elm.children)).toEqual(['4','2','3','1'])})it('shouldmovetoleftandreplace',()=>{constvnode1=newVNode('p',{},[1,2,3,4,5].map(spanNum))constvnode2=newVNode('p',{},[4,1,2,3,6].map(spanNum))letelm=patch(vnode0,vnode1)expect(elm.children.length).toBe(5)elm=patch(vnode1,vnode2)expect(elm.children.length).toBe(5)expect(map(inner,elm.children)).toEqual(['4','1','2','3','6'])})it('shouldmovetoleftandleaveshold',()=>{constvnode1=newVNode('p',{},[1,4,5].map(spanNum))constvnode2=newVNode('p',{},[4,6].map(spanNum))letelm=patch(vnode0,vnode1)expect(elm.children.length).toBe(3)elm=patch(vnode1,vnode2)expect(map(inner,elm.children)).toEqual(['4','6'])})it('shouldhandlemovedandsettoundefinedelementendingattheend',()=>{constvnode1=newVNode('p',{},[2,4,5].map(spanNum))constvnode2=newVNode('p',{},[4,5,3].map(spanNum))letelm=patch(vnode0,vnode1)expect(elm.children.length).toBe(3)elm=patch(vnode1,vnode2)expect(elm.children.length).toBe(3)expect(map(inner,elm.children)).toEqual(['4','5','3'])})it('shouldmoveakeyinnon-keyednodeswithasizeup',()=>{constvnode1=newVNode('p',{},[1,'a','b','c'].map(spanNum))constvnode2=newVNode('p',{},['d','a','b','c',1,'e'].map(spanNum))letelm=patch(vnode0,vnode1)expect(elm.children.length).toBe(4)expect(elm.textContent,'1abc')elm=patch(vnode1,vnode2)expect(elm.children.length).toBe(6)expect(elm.textContent,'dabc1e')})it('shouldreverseelement',()=>{constvnode1=newVNode('p',{},[1,2,3,4,5,6,7,8].map(spanNum))constvnode2=newVNode('p',{},[8,7,6,5,4,3,2,1].map(spanNum))letelm=patch(vnode0,vnode1)expect(elm.children.length).toBe(8)elm=patch(vnode1,vnode2)expect(map(inner,elm.children)).toEqual(['8','7','6','5','4','3','2','1'])})it('something',()=>{constvnode1=newVNode('p',{},[0,1,2,3,4,5].map(spanNum))constvnode2=newVNode('p',{},[4,3,2,1,5,0].map(spanNum))letelm=patch(vnode0,vnode1)expect(elm.children.length).toBe(6)elm=patch(vnode1,vnode2)expect(map(inner,elm.children)).toEqual(['4','3','2','1','5','0'])})it('shouldhandlerandomshuffle',()=>{letnleticonstarr:any[]=[]constopacities:any[]=[]constelms=14constsamples=5functionspanNumWithOpacity(n,o){returnnewVNode('span',{key:n,style:{opacity:o}},undefined,n.toString())}for(n=0;n<elms;++n){arr[n]=n}for(n=0;n<samples;++n){constvnode1=newVNode('span',{},arr.map(n=>{returnspanNumWithOpacity(n,'1')}))constshufArr=shuffle(arr.slice(0))letelm=patch(vnode0,vnode1)for(i=0;i<elms;++i){expect(elm.children[i].innerHTML).toBe(i.toString())opacities[i]=Math.random().toFixed(5).toString()}constvnode2=newVNode('span',{},arr.map(n=>{returnspanNumWithOpacity(shufArr[n],opacities[n])}))elm=patch(vnode1,vnode2)for(i=0;i<elms;++i){expect(elm.children[i].innerHTML).toBe(shufArr[i].toString())expect(opacities[i].indexOf(elm.children[i].style.opacity)).toBe(0)}}})it('shouldappendelementswithupdatingchildrenwithoutkeys',()=>{constvnode1=newVNode('div',{},[newVNode('span',{},undefined,'hello')])constvnode2=newVNode('div',{},[newVNode('span',{},undefined,'hello'),newVNode('span',{},undefined,'world')])letelm=patch(vnode0,vnode1)expect(map(inner,elm.children)).toEqual(['hello'])elm=patch(vnode1,vnode2)expect(map(inner,elm.children)).toEqual(['hello','world'])})it('shouldhandleunmovedtextnodeswithupdatingchildrenwithoutkeys',()=>{constvnode1=newVNode('div',{},[createTextVNode('text'),newVNode('span',{},undefined,'hello')])constvnode2=newVNode('div',{},[createTextVNode('text'),newVNode('span',{},undefined,'hello')])letelm=patch(vnode0,vnode1)expect(elm.childNodes[0].textContent).toBe('text')elm=patch(vnode1,vnode2)expect(elm.childNodes[0].textContent).toBe('text')})it('shouldhandlechangingtextchildrenwithupdatingchildrenwithoutkeys',()=>{constvnode1=newVNode('div',{},[createTextVNode('text'),newVNode('span',{},undefined,'hello')])constvnode2=newVNode('div',{},[createTextVNode('text2'),newVNode('span',{},undefined,'hello')])letelm=patch(vnode0,vnode1)expect(elm.childNodes[0].textContent).toBe('text')elm=patch(vnode1,vnode2)expect(elm.childNodes[0].textContent).toBe('text2')})it('shouldprependelementwithupdatingchildrenwithoutkeys',()=>{constvnode1=newVNode('div',{},[newVNode('span',{},undefined,'world')])constvnode2=newVNode('div',{},[newVNode('span',{},undefined,'hello'),newVNode('span',{},undefined,'world')])letelm=patch(vnode0,vnode1)expect(map(inner,elm.children)).toEqual(['world'])elm=patch(vnode1,vnode2)expect(map(inner,elm.children)).toEqual(['hello','world'])})it('shouldprependelementofdifferenttagtypewithupdatingchildrenwithoutkeys',()=>{constvnode1=newVNode('div',{},[newVNode('span',{},undefined,'world')])constvnode2=newVNode('div',{},[newVNode('div',{},undefined,'hello'),newVNode('span',{},undefined,'world')])letelm=patch(vnode0,vnode1)expect(map(inner,elm.children)).toEqual(['world'])elm=patch(vnode1,vnode2)expect(map(prop('tagName'),elm.children)).toEqual(['DIV','SPAN'])expect(map(inner,elm.children)).toEqual(['hello','world'])})it('shouldremoveelementswithupdatingchildrenwithoutkeys',()=>{constvnode1=newVNode('div',{},[newVNode('span',{},undefined,'one'),newVNode('span',{},undefined,'two'),newVNode('span',{},undefined,'three')])constvnode2=newVNode('div',{},[newVNode('span',{},undefined,'one'),newVNode('span',{},undefined,'three')])letelm=patch(vnode0,vnode1)expect(map(inner,elm.children)).toEqual(['one','two','three'])elm=patch(vnode1,vnode2)expect(map(inner,elm.children)).toEqual(['one','three'])})it('shouldremoveasingletextnodewithupdatingchildrenwithoutkeys',()=>{constvnode1=newVNode('div',{},undefined,'one')constvnode2=newVNode('div',{})letelm=patch(vnode0,vnode1)expect(elm.textContent).toBe('one')elm=patch(vnode1,vnode2)expect(elm.textContent).toBe('')})it('shouldremoveasingletextnodewhenchildrenareupdated',()=>{constvnode1=newVNode('div',{},undefined,'one')constvnode2=newVNode('div',{},[newVNode('div',{},undefined,'two'),newVNode('span',{},undefined,'three')])letelm=patch(vnode0,vnode1)expect(elm.textContent).toBe('one')elm=patch(vnode1,vnode2)expect(map(prop('textContent'),elm.childNodes)).toEqual(['two','three'])})it('shouldremoveatextnodeamongotherelements',()=>{constvnode1=newVNode('div',{},[createTextVNode('one'),newVNode('span',{},undefined,'two')])constvnode2=newVNode('div',{},[newVNode('div',{},undefined,'three')])letelm=patch(vnode0,vnode1)expect(map(prop('textContent'),elm.childNodes)).toEqual(['one','two'])elm=patch(vnode1,vnode2)expect(elm.childNodes.length).toBe(1)expect(elm.childNodes[0].tagName).toBe('DIV')expect(elm.childNodes[0].textContent).toBe('three')})it('shouldreorderelements',()=>{constvnode1=newVNode('div',{},[newVNode('span',{},undefined,'one'),newVNode('div',{},undefined,'two'),newVNode('b',{},undefined,'three')])constvnode2=newVNode('div',{},[newVNode('b',{},undefined,'three'),newVNode('span',{},undefined,'two'),newVNode('div',{},undefined,'one')])letelm=patch(vnode0,vnode1)expect(map(inner,elm.children)).toEqual(['one','two','three'])elm=patch(vnode1,vnode2)expect(map(inner,elm.children)).toEqual(['three','two','one'])})it('shouldhandlechildrenwiththesamekeybutwithdifferenttag',()=>{constvnode1=newVNode('div',{},[newVNode('div',{key:1},undefined,'one'),newVNode('div',{key:2},undefined,'two'),newVNode('div',{key:3},undefined,'three'),newVNode('div',{key:4},undefined,'four')])constvnode2=newVNode('div',{},[newVNode('div',{key:4},undefined,'four'),newVNode('span',{key:3},undefined,'three'),newVNode('span',{key:2},undefined,'two'),newVNode('div',{key:1},undefined,'one')])letelm=patch(vnode0,vnode1)expect(map(tag,elm.children)).toEqual(['DIV','DIV','DIV','DIV'])expect(map(inner,elm.children)).toEqual(['one','two','three','four'])elm=patch(vnode1,vnode2)expect(map(tag,elm.children)).toEqual(['DIV','SPAN','SPAN','DIV'])expect(map(inner,elm.children)).toEqual(['four','three','two','one'])})it('shouldhandlechildrenwiththesametag,samekey,butonewithdataandonewithoutdata',()=>{constvnode1=newVNode('div',{},[newVNode('div',{class:'hi'},undefined,'one')])constvnode2=newVNode('div',{},[newVNode('div',undefined,undefined,'four')])letelm=patch(vnode0,vnode1)constchild1=elm.children[0]expect(child1.className).toBe('hi')elm=patch(vnode1,vnode2)constchild2=elm.children[0]expect(child1).not.toBe(child2)expect(child2.className).toBe('')})it('shouldhandlestaticvnodesproperly',()=>{functionmakeNode(text){returnnewVNode('div',undefined,[newVNode(undefined,undefined,undefined,text)])}constb=makeNode('B')b.isStatic=trueb.key=`__static__1`constvnode1=newVNode('div',{},[makeNode('A'),b,makeNode('C')])constvnode2=newVNode('div',{},[b])constvnode3=newVNode('div',{},[makeNode('A'),b,makeNode('C')])letelm=patch(vnode0,vnode1)expect(elm.textContent).toBe('ABC')elm=patch(vnode1,vnode2)expect(elm.textContent).toBe('B')elm=patch(vnode2,vnode3)expect(elm.textContent).toBe('ABC')})it('shouldhandlestaticvnodesinside',()=>{functionmakeNode(text){returnnewVNode('div',undefined,[newVNode(undefined,undefined,undefined,text)])}constb=makeNode('B')b.isStatic=trueb.key=`__static__1`constvnode1=newVNode('div',{},[makeNode('A'),b,makeNode('C')])constvnode2=newVNode('div',{},[b])constvnode3=newVNode('div',{},[makeNode('A'),b,makeNode('C')])letelm=patch(vnode0,vnode1)expect(elm.textContent).toBe('ABC')elm=patch(vnode1,vnode2)expect(elm.textContent).toBe('B')elm=patch(vnode2,vnode3)expect(elm.textContent).toBe('ABC')})#6502it('shouldnotde-optwhenbothheadandtailarechanged',()=>{constvnode1=newVNode('div',{},[createEmptyVNode(),newVNode('div'),createEmptyVNode()])constvnode2=newVNode('div',{},[newVNode('p'),newVNode('div'),newVNode('p')])letroot=patch(null,vnode1)constoriginal=root.childNodes[1]root=patch(vnode1,vnode2)constpostPatch=root.childNodes[1]expect(postPatch).toBe(original)})it('shouldwarnwithduplicatekeys:createChildren',()=>{functionmakeNode(key){returnnewVNode('div',{key:key})}constvnode=newVNode('p',{},['b','a','c','b'].map(makeNode))patch(null,vnode)expect(`Duplicatekeysdetected:'b'`).toHaveBeenWarned()})it('shouldwarnwithduplicatekeys:updateChildren',()=>{functionmakeNode(key){returnnewVNode('div',{key:key})}constvnode2=newVNode('p',{},['b','a','c','b'].map(makeNode))constvnode3=newVNode('p',{},['b','x','d','b'].map(makeNode))patch(vnode0,vnode2)expect(`Duplicatekeysdetected:'b'`).toHaveBeenWarned()patch(vnode2,vnode3)expect(`Duplicatekeysdetected:'b'`).toHaveBeenWarned()})it('shouldwarnwithduplicatekeys:patchVnodewithemptyoldVnode',()=>{functionmakeNode(key){returnnewVNode('li',{key:key})}constvnode1=newVNode('div')constvnode2=newVNode('div',undefined,['1','2','3','4','4'].map(makeNode))patch(vnode1,vnode2)expect(`Duplicatekeysdetected:'4'`).toHaveBeenWarned()})})