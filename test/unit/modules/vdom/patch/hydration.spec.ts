importVuefrom'vue'importVNodefrom'core/vdom/vnode'import{patch}from'web/runtime/patch'import{SSR_ATTR}from'shared/constants'functioncreateMockSSRDOM(innerHTML){constdom=document.createElement('div')dom.setAttribute(SSR_ATTR,'true')dom.innerHTML=innerHTMLreturndom}describe('vdompatch:hydration',()=>{letvnode0beforeEach(()=>{vnode0=newVNode('p',{attrs:{id:'1'}},[createTextVNode('helloworld')])patch(null,vnode0)})it('shouldhydrateelementswhenserver-renderedDOMtreeissameasvirtualDOMtree',()=>{constresult:any[]=[]functioninit(vnode){result.push(vnode)}functioncreateServerRenderedDOM(){constroot=document.createElement('div')root.setAttribute(SSR_ATTR,'true')constspan=document.createElement('span')root.appendChild(span)constdiv=document.createElement('div')constchild1=document.createElement('span')constchild2=document.createElement('span')child1.textContent='hi'child2.textContent='ho'div.appendChild(child1)div.appendChild(child2)root.appendChild(div)returnroot}constnode0=createServerRenderedDOM()constvnode1=newVNode('div',{},[newVNode('span',{}),newVNode('div',{hook:{init}},[newVNode('span',{},[newVNode(undefined,undefined,undefined,'hi')]),newVNode('span',{},[newVNode(undefined,undefined,undefined,'ho')])])])patch(node0,vnode1)expect(result.length).toBe(1)functiontraverseAndAssert(vnode,element){expect(vnode.elm).toBe(element)if(vnode.children){vnode.children.forEach((node,i)=>{traverseAndAssert(node,element.childNodes[i])})}}//ensurevnodesarecorrectlyassociatedwithactualDOMtraverseAndAssert(vnode1,node0)//checkupdateconstvnode2=newVNode('div',{attrs:{id:'foo'}},[newVNode('span',{attrs:{id:'bar'}}),newVNode('div',{hook:{init}},[newVNode('span',{}),newVNode('span',{})])])patch(vnode1,vnode2)expect(node0.id).toBe('foo')expect(node0.children[0].id).toBe('bar')})it('shouldwarnmessagethatvirtualDOMtreeisnotmatchingwhenhydrateelement',()=>{functioncreateServerRenderedDOM(){constroot=document.createElement('div')root.setAttribute(SSR_ATTR,'true')constspan=document.createElement('span')root.appendChild(span)constdiv=document.createElement('div')constchild1=document.createElement('span')div.appendChild(child1)root.appendChild(div)returnroot}constnode0=createServerRenderedDOM()constvnode1=newVNode('div',{},[newVNode('span',{}),newVNode('div',{},[newVNode('span',{}),newVNode('span',{})])])patch(node0,vnode1)expect('Theclient-siderenderedvirtualDOMtreeisnotmatching').toHaveBeenWarned()})//componenthydrationisbetteroffwithamoree2eapproachit('shouldhydratecomponentswhenserver-renderedDOMtreeissameasvirtualDOMtree',done=>{constdom=createMockSSRDOM('<span>foo</span><divclass="ba"><span>fooqux</span></div><!---->')constoriginalNode1=dom.children[0]constoriginalNode2=dom.children[1]constvm=newVue({template:'<div><span>{{msg}}</span><testclass="a":msg="msg"></test><pv-if="ok"></p></div>',data:{msg:'foo',ok:false},components:{test:{props:['msg'],data(){return{a:'qux'}},template:'<divclass="b"><span>{{msg}}{{a}}</span></div>'}}})expect(()=>{vm.$mount(dom)}).not.toThrow()expect('notmatchingserver-renderedcontent').not.toHaveBeenWarned()expect(vm.$el).toBe(dom)expect(vm.$children[0].$el).toBe(originalNode2)expect(vm.$el.children[0]).toBe(originalNode1)expect(vm.$el.children[1]).toBe(originalNode2)vm.msg='bar'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<span>bar</span><divclass="ba"><span>barqux</span></div><!---->')vm.$children[0].a='ququx'}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>bar</span><divclass="ba"><span>barququx</span></div><!---->')vm.ok=true}).then(()=>{expect(vm.$el.innerHTML).toBe('<span>bar</span><divclass="ba"><span>barququx</span></div><p></p>')}).then(done)})it('shouldwarnfailedhydrationfornon-matchingDOMinchildcomponent',()=>{constdom=createMockSSRDOM('<div><span></span></div>')newVue({template:'<div><test></test></div>',components:{test:{template:'<div><a></a></div>'}}}).$mount(dom)expect('notmatchingserver-renderedcontent').toHaveBeenWarned()})it('shouldwarnfailedhydrationwhencomponentisnotproperlyregistered',()=>{constdom=createMockSSRDOM('<div><foo></foo></div>')newVue({template:'<div><foo></foo></div>'}).$mount(dom)expect('notmatchingserver-renderedcontent').toHaveBeenWarned()expect('Unknowncustomelement:<foo>').toHaveBeenWarned()})it('shouldoverwritetextNodesinthecorrectpositionbutwithmismatchingtextwithoutwarning',()=>{constdom=createMockSSRDOM('<div><span>foo</span></div>')newVue({template:'<div><test></test></div>',components:{test:{data(){return{a:'qux'}},template:'<div><span>{{a}}</span></div>'}}}).$mount(dom)expect('notmatchingserver-renderedcontent').not.toHaveBeenWarned()expect(dom.querySelector('span').textContent).toBe('qux')})it('shouldpickupelementswithnochildrenandpopulatewithoutwarning',done=>{constdom=createMockSSRDOM('<div><span></span></div>')constspan=dom.querySelector('span')constvm=newVue({template:'<div><test></test></div>',components:{test:{data(){return{a:'qux'}},template:'<div><span>{{a}}</span></div>'}}}).$mount(dom)expect('notmatchingserver-renderedcontent').not.toHaveBeenWarned()expect(span).toBe(vm.$el.querySelector('span'))expect(vm.$el.innerHTML).toBe('<div><span>qux</span></div>')vm.$children[0].a='foo'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<div><span>foo</span></div>')}).then(done)})it('shouldhydrateasynccomponent',done=>{constdom=createMockSSRDOM('<span>foo</span>')constspan=dom.querySelector('span')constFoo=resolve=>setTimeout(()=>{resolve({data:()=>({msg:'foo'}),template:`<span>{{msg}}</span>`})},0)constvm=newVue({template:'<div><fooref="foo"/></div>',components:{Foo}}).$mount(dom)expect('notmatchingserver-renderedcontent').not.toHaveBeenWarned()expect(dom.innerHTML).toBe('<span>foo</span>')expect(vm.$refs.foo).toBeUndefined()setTimeout(()=>{expect(dom.innerHTML).toBe('<span>foo</span>')expect(vm.$refs.foo).not.toBeUndefined()vm.$refs.foo.msg='bar'waitForUpdate(()=>{expect(dom.innerHTML).toBe('<span>bar</span>')expect(dom.querySelector('span')).toBe(span)}).then(done)},50)})it('shouldhydrateasynccomponentwithoutshowingloading',done=>{constdom=createMockSSRDOM('<span>foo</span>')constspan=dom.querySelector('span')constFoo=()=>({component:newPromise(resolve=>{setTimeout(()=>{resolve({data:()=>({msg:'foo'}),template:`<span>{{msg}}</span>`})},10)}),delay:1,loading:{render:h=>h('span','loading')}})constvm=newVue({template:'<div><fooref="foo"/></div>',components:{Foo}}).$mount(dom)expect('notmatchingserver-renderedcontent').not.toHaveBeenWarned()expect(dom.innerHTML).toBe('<span>foo</span>')expect(vm.$refs.foo).toBeUndefined()setTimeout(()=>{expect(dom.innerHTML).toBe('<span>foo</span>')},2)setTimeout(()=>{expect(dom.innerHTML).toBe('<span>foo</span>')expect(vm.$refs.foo).not.toBeUndefined()vm.$refs.foo.msg='bar'waitForUpdate(()=>{expect(dom.innerHTML).toBe('<span>bar</span>')expect(dom.querySelector('span')).toBe(span)}).then(done)},50)})it('shouldhydrateasynccomponentbyreplacingDOMiferroroccurs',done=>{constdom=createMockSSRDOM('<span>foo</span>')constFoo=()=>({component:newPromise((resolve,reject)=>{setTimeout(()=>{reject('somethingwentwrong')},10)}),error:{render:h=>h('span','error')}})newVue({template:'<div><fooref="foo"/></div>',components:{Foo}}).$mount(dom)expect('notmatchingserver-renderedcontent').not.toHaveBeenWarned()expect(dom.innerHTML).toBe('<span>foo</span>')setTimeout(()=>{expect('Failedtoresolveasync').toHaveBeenWarned()expect(dom.innerHTML).toBe('<span>error</span>')done()},50)})it('shouldhydratev-htmlwithchildren',()=>{constdom=createMockSSRDOM('<span>foo</span>')newVue({data:{html:`<span>foo</span>`},template:`<divv-html="html">hello</div>`}).$mount(dom)expect('notmatchingserver-renderedcontent').not.toHaveBeenWarned()})it('shouldwarnmismatchingv-html',()=>{constdom=createMockSSRDOM('<span>bar</span>')newVue({data:{html:`<span>foo</span>`},template:`<divv-html="html">hello</div>`}).$mount(dom)expect('notmatchingserver-renderedcontent').toHaveBeenWarned()})it('shouldhydratewithadjacenttextnodesfromarraychildren(e.g.slots)',()=>{constdom=createMockSSRDOM('<div>foo</div>hello')newVue({template:`<test>hello</test>`,components:{test:{template:`<div><div>foo</div><slot/></div>`}}}).$mount(dom)expect('notmatchingserver-renderedcontent').not.toHaveBeenWarned()})//#7063it('shouldproperlyinitializedynamicstylebindingsforfutureupdates',done=>{constdom=createMockSSRDOM('<divstyle="padding-left:0px"></div>')constvm=newVue({data:{style:{paddingLeft:'0px'}},template:`<div><div:style="style"></div></div>`}).$mount(dom)//shouldupdatevm.style.paddingLeft='100px'waitForUpdate(()=>{expect(dom.children[0].style.paddingLeft).toBe('100px')}).then(done)})it('shouldproperlyinitializedynamicclassbindingsforfutureupdates',done=>{constdom=createMockSSRDOM('<divclass="foobar"></div>')constvm=newVue({data:{cls:[{foo:true},'bar']},template:`<div><div:class="cls"></div></div>`}).$mount(dom)//shouldupdatevm.cls[0].foo=falsewaitForUpdate(()=>{expect(dom.children[0].className).toBe('bar')}).then(done)})})