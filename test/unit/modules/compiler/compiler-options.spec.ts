importVuefrom'vue'import{compile}from'web/compiler'import{getAndRemoveAttr}from'compiler/helpers'describe('compileoptions',()=>{it('shouldbecompiled',()=>{const{render,staticRenderFns,errors}=compile(`<div><inputtype="text"v-model="msg"requiredmax="8"v-validate:field1.group1.group2></div>`,{directives:{validate(el,dir){if(dir.name==='validate'&&dir.arg){el.validate={field:dir.arg,groups:dir.modifiers?Object.keys(dir.modifiers):[]}}}},modules:[{transformNode(el){el.validators=el.validators||[]constvalidators=['required','min','max','pattern','maxlength','minlength']validators.forEach(name=>{construle=getAndRemoveAttr(el,name)if(rule!==undefined){el.validators.push({name,rule})}})},genData(el){letdata=''if(el.validate){data+=`validate:${JSON.stringify(el.validate)},`}if(el.validators){data+=`validators:${JSON.stringify(el.validators)},`}returndata},transformCode(el,code){//checkif(!el.validate||!el.validators){returncode}//setupvalidationresultpropsconstresult={dirty:false}//definesomethingotherpropel.validators.forEach(validator=>{result[validator.name]=null})//generatecodereturn`_c('validate',{props:{field:${JSON.stringify(el.validate.field)},groups:${JSON.stringify(el.validate.groups)},validators:${JSON.stringify(el.validators)},result:${JSON.stringify(result)},child:${code}}})`}}]})expect(render).not.toBeUndefined()expect(staticRenderFns).toEqual([])expect(errors).toEqual([])constrenderFn=newFunction(render)constvm=newVue({data:{msg:'hello'},components:{validate:{props:['field','groups','validators','result','child'],render(h){returnthis.child},computed:{valid(){letret=truefor(leti=0;i<this.validators.length;i++){const{name}=this.validators[i]if(!this.result[name]){ret=falsebreak}}returnret}},mounted(){//initializevalidationconstvalue=this.$el.valuethis.validators.forEach(validator=>{constret=this[validator.name](value,validator.rule)this.result[validator.name]=ret})},methods:{//somethingvalidatorslogicrequired(val){returnval.length>0},max(val,rule){return!(parseInt(val,10)>parseInt(rule,10))}}}},render:renderFn,staticRenderFns}).$mount()expect(vm.$el.innerHTML).toBe('<inputtype="text">')expect(vm.$children[0].valid).toBe(true)})it('shouldcollecterrors',()=>{letcompiled=compile('hello')expect(compiled.errors.length).toBe(1)expect(compiled.errors[0]).toContain('rootelement')compiled=compile('<divv-if="a----">{{b++++}}</div>')expect(compiled.errors.length).toBe(2)expect(compiled.errors[0]).toContain('Rawexpression:v-if="a----"')expect(compiled.errors[1]).toContain('Rawexpression:{{b++++}}')})it('shouldcollecterrorswithsourcerange',()=>{letcompiled=compile('hello',{outputSourceRange:true})expect(compiled.errors.length).toBe(1)expect(compiled.errors[0].start).toBe(0)expect(compiled.errors[0].end).toBeUndefined()compiled=compile('<divv-if="a----">{{b++++}}</div>',{outputSourceRange:true})expect(compiled.errors.length).toBe(2)expect(compiled.errors[0].start).toBe(5)expect(compiled.errors[0].end).toBe(17)expect(compiled.errors[1].start).toBe(18)expect(compiled.errors[1].end).toBe(29)compiled=compile('<div><span></div>',{outputSourceRange:true})expect(compiled.errors.length).toBe(1)expect(compiled.errors[0].start).toBe(5)expect(compiled.errors[0].end).toBe(11)})it('shouldcollectsourcerangeforbindingkeys',()=>{constcompiled=compile('<div><slotv-bind:key="key"/></div>',{outputSourceRange:true})expect(compiled.errors.length).toBe(1)expect(compiled.errors[0].start).toBe(11)expect(compiled.errors[0].end).toBe(27)})})