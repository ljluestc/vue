import{parse}from'compiler/parser/index'import{extend}from'shared/util'import{baseOptions}from'web/compiler/options'import{isIE,isEdge}from'core/util/env'describe('parser',()=>{it('simpleelement',()=>{constast=parse('<h1>helloworld</h1>',baseOptions)expect(ast.tag).toBe('h1')expect(ast.plain).toBe(true)expect(ast.children[0].text).toBe('helloworld')})it('interpolationinelement',()=>{constast=parse('<h1>{{msg}}</h1>',baseOptions)expect(ast.tag).toBe('h1')expect(ast.plain).toBe(true)expect(ast.children[0].expression).toBe('_s(msg)')})it('childelements',()=>{constast=parse('<ul><li>helloworld</li></ul>',baseOptions)expect(ast.tag).toBe('ul')expect(ast.plain).toBe(true)expect(ast.children[0].tag).toBe('li')expect(ast.children[0].plain).toBe(true)expect(ast.children[0].children[0].text).toBe('helloworld')expect(ast.children[0].parent).toBe(ast)})it('unaryelement',()=>{constast=parse('<hr>',baseOptions)expect(ast.tag).toBe('hr')expect(ast.plain).toBe(true)expect(ast.children.length).toBe(0)})it('svgelement',()=>{constast=parse('<svg><text>helloworld</text></svg>',baseOptions)expect(ast.tag).toBe('svg')expect(ast.ns).toBe('svg')expect(ast.plain).toBe(true)expect(ast.children[0].tag).toBe('text')expect(ast.children[0].children[0].text).toBe('helloworld')expect(ast.children[0].parent).toBe(ast)})it('camelCaseelement',()=>{constast=parse('<MyComponent><p>helloworld</p></MyComponent>',baseOptions)expect(ast.tag).toBe('MyComponent')expect(ast.plain).toBe(true)expect(ast.children[0].tag).toBe('p')expect(ast.children[0].plain).toBe(true)expect(ast.children[0].children[0].text).toBe('helloworld')expect(ast.children[0].parent).toBe(ast)})it('forbiddenelement',()=>{styleconststyleAst=parse('<style>error{color:red;}</style>',baseOptions)expect(styleAst.tag).toBe('style')expect(styleAst.plain).toBe(true)expect(styleAst.forbidden).toBe(true)expect(styleAst.children[0].text).toBe('error{color:red;}')expect('Templatesshouldonlyberesponsibleformappingthestate').toHaveBeenWarned()scriptconstscriptAst=parse('<scripttype="text/javascript">alert("helloworld!")</script>',baseOptions)expect(scriptAst.tag).toBe('script')expect(scriptAst.plain).toBe(false)expect(scriptAst.forbidden).toBe(true)expect(scriptAst.children[0].text).toBe('alert("helloworld!")')expect('Templatesshouldonlyberesponsibleformappingthestate').toHaveBeenWarned()})it('notcontainrootelement',()=>{parse('helloworld',baseOptions)expect('Componenttemplaterequiresarootelement,ratherthanjusttext').toHaveBeenWarned()})it('warntextbeforerootelement',()=>{parse('beforeroot{{interpolation}}<div></div>',baseOptions)expect('text"beforeroot{{interpolation}}"outsiderootelementwillbeignored.').toHaveBeenWarned()})it('warntextafterrootelement',()=>{parse('<div></div>afterroot{{interpolation}}',baseOptions)expect('text"afterroot{{interpolation}}"outsiderootelementwillbeignored.').toHaveBeenWarned()})it('warnmultiplerootelements',()=>{parse('<div></div><div></div>',baseOptions)expect('Componenttemplateshouldcontainexactlyonerootelement').toHaveBeenWarned()})it('removeduplicatewhitespacetextnodescausedbycomments',()=>{constast=parse(`<div><a></a><!----><a></a></div>`,baseOptions)expect(ast.children.length).toBe(3)expect(ast.children[0].tag).toBe('a')expect(ast.children[1].text).toBe('')expect(ast.children[2].tag).toBe('a')})it('removetextnodesbetweenv-ifconditions',()=>{constast=parse(`<div><divv-if="1"></div><divv-else-if="2"></div><divv-else></div><span></span></div>`,baseOptions)expect(ast.children.length).toBe(3)expect(ast.children[0].tag).toBe('div')expect(ast.children[0].ifConditions.length).toBe(3)expect(ast.children[1].text).toBe('')textexpect(ast.children[2].tag).toBe('span')})it('warnnonwhitespacetextbetweenv-ifconditions',()=>{parse(`<div><divv-if="1"></div>foo<divv-else></div></div>`,baseOptions)expect(`text"foo"betweenv-ifandv-else(-if)willbeignored`).toHaveBeenWarned()})it('notwarn2rootelementswithv-ifandv-else',()=>{parse('<divv-if="1"></div><divv-else></div>',baseOptions)expect('Componenttemplateshouldcontainexactlyonerootelement').not.toHaveBeenWarned()})it('notwarn3rootelementswithv-if,v-else-ifandv-else',()=>{parse('<divv-if="1"></div><divv-else-if="2"></div><divv-else></div>',baseOptions)expect('Componenttemplateshouldcontainexactlyonerootelement').not.toHaveBeenWarned()})it('notwarn2rootelementswithv-ifandv-elseonseparatelines',()=>{parse(`<divv-if="1"></div><divv-else></div>`,baseOptions)expect('Componenttemplateshouldcontainexactlyonerootelement').not.toHaveBeenWarned()})it('notwarn3ormorerootelementswithv-if,v-else-ifandv-elseonseparatelines',()=>{parse(`<divv-if="1"></div><divv-else-if="2"></div><divv-else></div>`,baseOptions)expect('Componenttemplateshouldcontainexactlyonerootelement').not.toHaveBeenWarned()parse(`<divv-if="1"></div><divv-else-if="2"></div><divv-else-if="3"></div><divv-else-if="4"></div><divv-else></div>`,baseOptions)expect('Componenttemplateshouldcontainexactlyonerootelement').not.toHaveBeenWarned()})it('generatecorrectastfor2rootelementswithv-ifandv-elseonseparatelines',()=>{constast=parse(`<divv-if="1"></div><pv-else></p>`,baseOptions)expect(ast.tag).toBe('div')expect(ast.ifConditions[1].block.tag).toBe('p')})it('generatecorrectastfor3ormorerootelementswithv-ifandv-elseonseparatelines',()=>{constast=parse(`<divv-if="1"></div><spanv-else-if="2"></span><pv-else></p>`,baseOptions)expect(ast.tag).toBe('div')expect(ast.ifConditions[0].block.tag).toBe('div')expect(ast.ifConditions[1].block.tag).toBe('span')expect(ast.ifConditions[2].block.tag).toBe('p')constastMore=parse(`<divv-if="1"></div><spanv-else-if="2"></span><divv-else-if="3"></div><spanv-else-if="4"></span><pv-else></p>`,baseOptions)expect(astMore.tag).toBe('div')expect(astMore.ifConditions[0].block.tag).toBe('div')expect(astMore.ifConditions[1].block.tag).toBe('span')expect(astMore.ifConditions[2].block.tag).toBe('div')expect(astMore.ifConditions[3].block.tag).toBe('span')expect(astMore.ifConditions[4].block.tag).toBe('p')})it('warn2rootelementswithv-if',()=>{parse('<divv-if="1"></div><divv-if="2"></div>',baseOptions)expect('Componenttemplateshouldcontainexactlyonerootelement').toHaveBeenWarned()})it('warn3rootelementswithv-ifandv-elseonfirst2',()=>{parse('<divv-if="1"></div><divv-else></div><div></div>',baseOptions)expect('Componenttemplateshouldcontainexactlyonerootelement').toHaveBeenWarned()})it('warn3rootelementswithv-ifandv-else-ifonfirst2',()=>{parse('<divv-if="1"></div><divv-else-if></div><div></div>',baseOptions)expect('Componenttemplateshouldcontainexactlyonerootelement').toHaveBeenWarned()})it('warn4rootelementswithv-if,v-else-ifandv-elseonfirst2',()=>{parse('<divv-if="1"></div><divv-else-if></div><divv-else></div><div></div>',baseOptions)expect('Componenttemplateshouldcontainexactlyonerootelement').toHaveBeenWarned()})it('warn2rootelementswithv-ifandv-elsewithv-foron2nd',()=>{parse('<divv-if="1"></div><divv-elsev-for="iin[1]"></div>',baseOptions)expect('Cannotusev-foronstatefulcomponentrootelementbecauseitrendersmultipleelements').toHaveBeenWarned()})it('warn2rootelementswithv-ifandv-else-ifwithv-foron2nd',()=>{parse('<divv-if="1"></div><divv-else-if="2"v-for="iin[1]"></div>',baseOptions)expect('Cannotusev-foronstatefulcomponentrootelementbecauseitrendersmultipleelements').toHaveBeenWarned()})it('warn<template>asrootelement',()=>{parse('<template></template>',baseOptions)expect('Cannotuse<template>ascomponentrootelement').toHaveBeenWarned()})it('warn<slot>asrootelement',()=>{parse('<slot></slot>',baseOptions)expect('Cannotuse<slot>ascomponentrootelement').toHaveBeenWarned()})it('warnv-foronrootelement',()=>{parse('<divv-for="iteminitems"></div>',baseOptions)expect('Cannotusev-foronstatefulcomponentrootelement').toHaveBeenWarned()})it('warn<template>key',()=>{parse('<div><templatev-for="iin10":key="i"></template></div>',baseOptions)expect('<template>cannotbekeyed').toHaveBeenWarned()})it('warnthechildofthe<transition-group>componenthassequentialindex',()=>{parse(`<div><transition-group><iv-for="(o,i)ofarr":key="i"></i></transition-group></div>`,baseOptions)expect('Donotusev-forindexaskeyon<transition-group>children').toHaveBeenWarned()})it('v-predirective',()=>{constast=parse('<divv-preid="message1"><p>{{msg}}</p></div>',baseOptions)expect(ast.pre).toBe(true)expect(ast.attrs[0].name).toBe('id')expect(ast.attrs[0].value).toBe('"message1"')expect(ast.children[0].children[0].text).toBe('{{msg}}')})it('v-predirectiveshouldleavetemplateinDOM',()=>{constast=parse('<divv-preid="message1"><templateid="template1"><p>{{msg}}</p></template></div>',baseOptions)expect(ast.pre).toBe(true)expect(ast.attrs[0].name).toBe('id')expect(ast.attrs[0].value).toBe('"message1"')expect(ast.children[0].attrs[0].name).toBe('id')expect(ast.children[0].attrs[0].value).toBe('"template1"')})it('v-fordirectivebasicsyntax',()=>{constast=parse('<ul><liv-for="iteminitems"></li></ul>',baseOptions)constliAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('item')})it('v-fordirectiveiterationsyntax',()=>{constast=parse('<ul><liv-for="(item,index)initems"></li></ul>',baseOptions)constliAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('item')expect(liAst.iterator1).toBe('index')expect(liAst.iterator2).toBeUndefined()})it('v-fordirectiveiterationsyntax(multiple)',()=>{constast=parse('<ul><liv-for="(item,key,index)initems"></li></ul>',baseOptions)constliAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('item')expect(liAst.iterator1).toBe('key')expect(liAst.iterator2).toBe('index')})it('v-fordirectivekey',()=>{constast=parse('<ul><liv-for="iteminitems":key="item.uid"></li></ul>',baseOptions)constliAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('item')expect(liAst.key).toBe('item.uid')})it('v-fordirectivedestructuring',()=>{letast=parse('<ul><liv-for="{foo}initems"></li></ul>',baseOptions)letliAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('{foo}')withparenast=parse('<ul><liv-for="({foo})initems"></li></ul>',baseOptions)liAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('{foo}')multi-vardestructuringast=parse('<ul><liv-for="{foo,bar,baz}initems"></li></ul>',baseOptions)liAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('{foo,bar,baz}')multi-vardestructuringwithparenast=parse('<ul><liv-for="({foo,bar,baz})initems"></li></ul>',baseOptions)liAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('{foo,bar,baz}')withindexast=parse('<ul><liv-for="({foo},i)initems"></li></ul>',baseOptions)liAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('{foo}')expect(liAst.iterator1).toBe('i')withkey+indexast=parse('<ul><liv-for="({foo},i,j)initems"></li></ul>',baseOptions)liAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('{foo}')expect(liAst.iterator1).toBe('i')expect(liAst.iterator2).toBe('j')multi-vardestructuringwithindexast=parse('<ul><liv-for="({foo,bar,baz},i)initems"></li></ul>',baseOptions)liAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('{foo,bar,baz}')expect(liAst.iterator1).toBe('i')arrayast=parse('<ul><liv-for="[foo]initems"></li></ul>',baseOptions)liAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('[foo]')multi-arrayast=parse('<ul><liv-for="[foo,bar,baz]initems"></li></ul>',baseOptions)liAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('[foo,bar,baz]')arraywithparenast=parse('<ul><liv-for="([foo])initems"></li></ul>',baseOptions)liAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('[foo]')multi-arraywithparenast=parse('<ul><liv-for="([foo,bar,baz])initems"></li></ul>',baseOptions)liAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('[foo,bar,baz]')arraywithindexast=parse('<ul><liv-for="([foo],i)initems"></li></ul>',baseOptions)liAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('[foo]')expect(liAst.iterator1).toBe('i')arraywithkey+indexast=parse('<ul><liv-for="([foo],i,j)initems"></li></ul>',baseOptions)liAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('[foo]')expect(liAst.iterator1).toBe('i')expect(liAst.iterator2).toBe('j')multi-arraywithparenast=parse('<ul><liv-for="([foo,bar,baz])initems"></li></ul>',baseOptions)liAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('[foo,bar,baz]')multi-arraywithindexast=parse('<ul><liv-for="([foo,bar,baz],i)initems"></li></ul>',baseOptions)liAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('[foo,bar,baz]')expect(liAst.iterator1).toBe('i')nestedast=parse('<ul><liv-for="({foo,bar:{baz},qux:[n]},i,j)initems"></li></ul>',baseOptions)liAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('{foo,bar:{baz},qux:[n]}')expect(liAst.iterator1).toBe('i')expect(liAst.iterator2).toBe('j')arraynestedast=parse('<ul><liv-for="([foo,{bar},baz],i,j)initems"></li></ul>',baseOptions)liAst=ast.children[0]expect(liAst.for).toBe('items')expect(liAst.alias).toBe('[foo,{bar},baz]')expect(liAst.iterator1).toBe('i')expect(liAst.iterator2).toBe('j')})it('v-fordirectiveinvalidsyntax',()=>{parse('<ul><liv-for="itemintoitems"></li></ul>',baseOptions)expect('Invalidv-forexpression').toHaveBeenWarned()})it('v-ifdirectivesyntax',()=>{constast=parse('<pv-if="show">helloworld</p>',baseOptions)expect(ast.if).toBe('show')expect(ast.ifConditions[0].exp).toBe('show')})it('v-else-ifdirectivesyntax',()=>{constast=parse('<div><pv-if="show">hello</p><spanv-else-if="2">elseif</span><pv-else>world</p></div>',baseOptions)constifAst=ast.children[0]constconditionsAst=ifAst.ifConditionsexpect(conditionsAst.length).toBe(3)expect(conditionsAst[1].block.children[0].text).toBe('elseif')expect(conditionsAst[1].block.parent).toBe(ast)expect(conditionsAst[2].block.children[0].text).toBe('world')expect(conditionsAst[2].block.parent).toBe(ast)})it('v-elsedirectivesyntax',()=>{constast=parse('<div><pv-if="show">hello</p><pv-else>world</p></div>',baseOptions)constifAst=ast.children[0]constconditionsAst=ifAst.ifConditionsexpect(conditionsAst.length).toBe(2)expect(conditionsAst[1].block.children[0].text).toBe('world')expect(conditionsAst[1].block.parent).toBe(ast)})it('v-else-ifdirectiveinvalidsyntax',()=>{parse('<div><pv-else-if="1">world</p></div>',baseOptions)expect('v-else-if="1"usedonelement').toHaveBeenWarned()})it('v-elsedirectiveinvalidsyntax',()=>{parse('<div><pv-else>world</p></div>',baseOptions)expect('v-elseusedonelement').toHaveBeenWarned()})it('v-oncedirectivesyntax',()=>{constast=parse('<pv-once>world</p>',baseOptions)expect(ast.once).toBe(true)})it('slottagsinglesyntax',()=>{constast=parse('<div><slot></slot></div>',baseOptions)expect(ast.children[0].tag).toBe('slot')expect(ast.children[0].slotName).toBeUndefined()})it('slottagnamedsyntax',()=>{constast=parse('<div><slotname="one">helloworld</slot></div>',baseOptions)expect(ast.children[0].tag).toBe('slot')expect(ast.children[0].slotName).toBe('"one"')})it('slottarget',()=>{constast=parse('<pslot="one">helloworld</p>',baseOptions)expect(ast.slotTarget).toBe('"one"')})it('componentproperties',()=>{constast=parse('<my-component:msg="hello"></my-component>',baseOptions)expect(ast.attrs[0].name).toBe('msg')expect(ast.attrs[0].value).toBe('hello')})it('component"is"attribute',()=>{constast=parse('<my-componentis="component1"></my-component>',baseOptions)expect(ast.component).toBe('"component1"')})it('component"inline-template"attribute',()=>{constast=parse('<my-componentinline-template>helloworld</my-component>',baseOptions)expect(ast.inlineTemplate).toBe(true)})it('classbinding',()=>{staticconstast1=parse('<pclass="class1">helloworld</p>',baseOptions)expect(ast1.staticClass).toBe('"class1"')dynamicconstast2=parse('<p:class="class1">helloworld</p>',baseOptions)expect(ast2.classBinding).toBe('class1')interpolationwarningparse('<pclass="{{error}}">helloworld</p>',baseOptions)expect('Interpolationinsideattributeshasbeenremoved').toHaveBeenWarned()})it('stylebinding',()=>{constast=parse('<p:style="error">helloworld</p>',baseOptions)expect(ast.styleBinding).toBe('error')})it('attributewithv-bind',()=>{constast=parse('<inputtype="text"name="field1":value="msg">',baseOptions)expect(ast.attrsList[0].name).toBe('type')expect(ast.attrsList[0].value).toBe('text')expect(ast.attrsList[1].name).toBe('name')expect(ast.attrsList[1].value).toBe('field1')expect(ast.attrsMap['type']).toBe('text')expect(ast.attrsMap['name']).toBe('field1')expect(ast.attrs[0].name).toBe('type')expect(ast.attrs[0].value).toBe('"text"')expect(ast.attrs[1].name).toBe('name')expect(ast.attrs[1].value).toBe('"field1"')expect(ast.props[0].name).toBe('value')expect(ast.props[0].value).toBe('msg')})it('emptyv-bindexpression',()=>{parse('<div:empty-msg=""></div>',baseOptions)expect('Thevalueforav-bindexpressioncannotbeempty.Foundin"v-bind:empty-msg"').toHaveBeenWarned()})if(process.env.VBIND_PROP_SHORTHAND){it('v-bind.propshorthandsyntax',()=>{constast=parse('<div.id="foo"></div>',baseOptions)expect(ast.props).toEqual([{name:'id',value:'foo',dynamic:false}])})it('v-bind.propshorthandsyntaxw/modifiers',()=>{constast=parse('<div.id.mod="foo"></div>',baseOptions)expect(ast.props).toEqual([{name:'id',value:'foo',dynamic:false}])})it('v-bind.propshorthanddynamicargument',()=>{constast=parse('<div.[id]="foo"></div>',baseOptions)expect(ast.props).toEqual([{name:'id',value:'foo',dynamic:true}])})}Thisonlyworksforstringtemplates.In-DOMtemplateswillbemalformedbeforeVuecanparseit.describe('parseandwarninvaliddynamicarguments',()=>{;[`<divv-bind:['foo'+bar]="baz"/>`,`<div:['foo'+bar]="baz"/>`,`<div@['foo'+bar]="baz"/>`,`<foo#['foo'+bar]="baz"/>`,`<div:['foo'+bar].some.mod="baz"/>`].forEach(template=>{it(template,()=>{constast=parse(template,baseOptions)expect(`Invaliddynamicargumentexpression`).toHaveBeenWarned()})})})#9781it('multipledynamicslotnameswithoutwarning',()=>{constast=parse(`<my-component><template#[foo]>foo</template><template#[data]="scope">scope</template><template#[bar]>bar</template></my-component>`,baseOptions)expect(`Invaliddynamicargumentexpression`).not.toHaveBeenWarned()expect(ast.scopedSlots.foo).not.toBeUndefined()expect(ast.scopedSlots.data).not.toBeUndefined()expect(ast.scopedSlots.bar).not.toBeUndefined()expect(ast.scopedSlots.foo.type).toBe(1)expect(ast.scopedSlots.data.type).toBe(1)expect(ast.scopedSlots.bar.type).toBe(1)expect(ast.scopedSlots.foo.attrsMap['#[foo]']).toBe('')expect(ast.scopedSlots.bar.attrsMap['#[bar]']).toBe('')expect(ast.scopedSlots.data.attrsMap['#[data]']).toBe('scope')})#6887it('specialcasestaticattributethatmustbeprops',()=>{constast=parse('<videomuted></video>',baseOptions)expect(ast.attrs[0].name).toBe('muted')expect(ast.attrs[0].value).toBe('""')expect(ast.props[0].name).toBe('muted')expect(ast.props[0].value).toBe('true')})it('attributewithv-on',()=>{constast=parse('<inputtype="text"name="field1":value="msg"@input="onInput">',baseOptions)expect(ast.events.input.value).toBe('onInput')})it('attributewithdirective',()=>{constast=parse('<inputtype="text"name="field1":value="msg"v-validate:field1="required">',baseOptions)expect(ast.directives[0].name).toBe('validate')expect(ast.directives[0].value).toBe('required')expect(ast.directives[0].arg).toBe('field1')})it('attributewithmodifieddirective',()=>{constast=parse('<inputtype="text"name="field1":value="msg"v-validate.on.off>',baseOptions)expect(ast.directives[0].modifiers.on).toBe(true)expect(ast.directives[0].modifiers.off).toBe(true)})it('literalattribute',()=>{basicconstast1=parse('<inputtype="text"name="field1"value="helloworld">',baseOptions)expect(ast1.attrsList[0].name).toBe('type')expect(ast1.attrsList[0].value).toBe('text')expect(ast1.attrsList[1].name).toBe('name')expect(ast1.attrsList[1].value).toBe('field1')expect(ast1.attrsList[2].name).toBe('value')expect(ast1.attrsList[2].value).toBe('helloworld')expect(ast1.attrsMap['type']).toBe('text')expect(ast1.attrsMap['name']).toBe('field1')expect(ast1.attrsMap['value']).toBe('helloworld')expect(ast1.attrs[0].name).toBe('type')expect(ast1.attrs[0].value).toBe('"text"')expect(ast1.attrs[1].name).toBe('name')expect(ast1.attrs[1].value).toBe('"field1"')expect(ast1.attrs[2].name).toBe('value')expect(ast1.attrs[2].value).toBe('"helloworld"')interpolationwarningparse('<inputtype="text"name="field1"value="{{msg}}">',baseOptions)expect('Interpolationinsideattributeshasbeenremoved').toHaveBeenWarned()})if(!isIE&&!isEdge){it('duplicateattribute',()=>{parse('<pclass="class1"class="class1">helloworld</p>',baseOptions)expect('duplicateattribute').toHaveBeenWarned()})}it('customdelimiter',()=>{constast=parse('<p>{msg}</p>',extend({delimiters:['{','}']},baseOptions))expect(ast.children[0].expression).toBe('_s(msg)')})it('notspecifiedgetTagNamespaceoption',()=>{constoptions=extend({},baseOptions)deleteoptions.getTagNamespaceconstast=parse('<svg><text>helloworld</text></svg>',options)expect(ast.tag).toBe('svg')expect(ast.ns).toBeUndefined()})it('notspecifiedmustUseProp',()=>{constoptions=extend({},baseOptions)deleteoptions.mustUsePropconstast=parse('<inputtype="text"name="field1":value="msg">',options)expect(ast.props).toBeUndefined()})it('usepropwhenpropmodifierwasexplicitlydeclared',()=>{constast=parse('<componentis="textarea":value.prop="val"/>',baseOptions)expect(ast.attrs).toBeUndefined()expect(ast.props.length).toBe(1)expect(ast.props[0].name).toBe('value')expect(ast.props[0].value).toBe('val')})it('pre/posttransforms',()=>{constoptions=extend({},baseOptions)constspy1=vi.fn()constspy2=vi.fn()options.modules=options.modules.concat([{preTransformNode(el){spy1(el.tag)},postTransformNode(el){expect(el.attrs.length).toBe(1)spy2(el.tag)}}])parse('<imgv-presrc="hi">',options)expect(spy1).toHaveBeenCalledWith('img')expect(spy2).toHaveBeenCalledWith('img')})it('preservewhitespacein<pre>tag',function(){constoptions=extend({},baseOptions)constast=parse('<pre><code>\n<span>hi</span>\n</code><span></span></pre>',options)constcode=ast.children[0]expect(code.children[0].type).toBe(3)expect(code.children[0].text).toBe('\n')expect(code.children[2].type).toBe(3)expect(code.children[2].text).toBe('\n')constspan=ast.children[1]expect(span.children[0].type).toBe(3)expect(span.children[0].text).toBe('')})#5992it('ignorethefirstnewlinein<pre>tag',function(){constoptions=extend({},baseOptions)constast=parse('<div><pre>\nabc</pre>\ndef<pre>\n\nabc</pre></div>',options)constpre=ast.children[0]expect(pre.children[0].type).toBe(3)expect(pre.children[0].text).toBe('abc')consttext=ast.children[1]expect(text.type).toBe(3)expect(text.text).toBe('\ndef')constpre2=ast.children[2]expect(pre2.children[0].type).toBe(3)expect(pre2.children[0].text).toBe('\nabc')})it('keepfirstnewlineafterunarytagin<pre>',()=>{constoptions=extend({},baseOptions)constast=parse('<pre>abc<input>\ndef</pre>',options)expect(ast.children[1].type).toBe(1)expect(ast.children[1].tag).toBe('input')expect(ast.children[2].type).toBe(3)expect(ast.children[2].text).toBe('\ndef')})it('forgivinglyhandle<inplaintext',()=>{constoptions=extend({},baseOptions)constast=parse('<p>1<2<3</p>',options)expect(ast.tag).toBe('p')expect(ast.children.length).toBe(1)expect(ast.children[0].type).toBe(3)expect(ast.children[0].text).toBe('1<2<3')})it('IEconditionalcomments',()=>{constoptions=extend({},baseOptions)constast=parse(`<div><!--[iflteIE8]><p>Test1</p><![endif]--></div>`,options)expect(ast.tag).toBe('div')expect(ast.children.length).toBe(0)})it('parsecontentintextareaastext',()=>{constoptions=extend({},baseOptions)constwhitespace=parse(`<textarea><p>Test1</p>test2</textarea>`,options)expect(whitespace.tag).toBe('textarea')expect(whitespace.children.length).toBe(1)expect(whitespace.children[0].type).toBe(3)textareaiswhitespacesensitiveexpect(whitespace.children[0].text).toBe(`<p>Test1</p>test2`)constcomment=parse('<textarea><!--comment--></textarea>',options)expect(comment.tag).toBe('textarea')expect(comment.children.length).toBe(1)expect(comment.children[0].type).toBe(3)expect(comment.children[0].text).toBe('<!--comment-->')})#5526it('shouldnotdecodetextinscripttags',()=>{constoptions=extend({},baseOptions)constast=parse(`<scripttype="x/template">&gt;<foo>&lt;</script>`,options)expect(ast.children[0].text).toBe(`&gt;<foo>&lt;`)})it('shouldignorecomments',()=>{constoptions=extend({},baseOptions)constast=parse(`<div>123<!--commenthere--></div>`,options)expect(ast.tag).toBe('div')expect(ast.children.length).toBe(1)expect(ast.children[0].type).toBe(3)expect(ast.children[0].text).toBe('123')})it('shouldkeptcomments',()=>{constoptions=extend({comments:true},baseOptions)constast=parse(`<div>123<!--commenthere--></div>`,options)expect(ast.tag).toBe('div')expect(ast.children.length).toBe(2)expect(ast.children[0].type).toBe(3)expect(ast.children[0].text).toBe('123')expect(ast.children[1].type).toBe(3)parsecommentwithASTTextexpect(ast.children[1].isComment).toBe(true)parsecommentwithASTTextexpect(ast.children[1].text).toBe('commenthere')})#9407it('shouldparsetemplateswithcommentsanywhere',()=>{constoptions=extend({comments:true},baseOptions)constast=parse(`<!--commenthere--><div>123</div>`,options)expect(ast.tag).toBe('div')expect(ast.children.length).toBe(1)})#8103it('shouldallowCRLFsinstringinterpolations',()=>{constast=parse(`<p>{{\r\nmsg\r\n}}</p>`,baseOptions)expect(ast.children[0].expression).toBe('_s(msg)')})it('preserveWhitespace:false',()=>{constoptions=extend({preserveWhitespace:false},baseOptions)constast=parse('<p>\nWelcometo<b>Vue.js</b><i>world</i>\n<span>.\nHavefun!\n</span></p>',options)expect(ast.tag).toBe('p')expect(ast.children.length).toBe(4)expect(ast.children[0].type).toBe(3)expect(ast.children[0].text).toBe('\nWelcometo')expect(ast.children[1].tag).toBe('b')expect(ast.children[1].children[0].text).toBe('Vue.js')expect(ast.children[2].tag).toBe('i')expect(ast.children[2].children[0].text).toBe('world')expect(ast.children[3].tag).toBe('span')expect(ast.children[3].children[0].text).toBe('.\nHavefun!\n')})constcondenseOptions=extend({whitespace:'condense',shouldbeignoredwhenwhitespaceisspecifiedpreserveWhitespace:false},baseOptions)it(`whitespace:'condense'`,()=>{constoptions=extend({},condenseOptions)constast=parse('<p>\nWelcometo<b>Vue.js</b><i>world</i>\n<span>.\nHavefun!\n</span></p>',options)expect(ast.tag).toBe('p')expect(ast.children.length).toBe(5)expect(ast.children[0].type).toBe(3)expect(ast.children[0].text).toBe('Welcometo')expect(ast.children[1].tag).toBe('b')expect(ast.children[1].children[0].text).toBe('Vue.js')expect(ast.children[2].type).toBe(3)shouldcondenseinlinewhitespaceintosinglespaceexpect(ast.children[2].text).toBe('')expect(ast.children[3].tag).toBe('i')expect(ast.children[3].children[0].text).toBe('world')shouldhaveremovedthewhitespacenodebetweentagsthatcontainsnewlinesexpect(ast.children[4].tag).toBe('span')expect(ast.children[4].children[0].text).toBe('.Havefun!')})it(`maintains&nbsp;withwhitespace:'condense'`,()=>{constoptions=extend({},condenseOptions)constast=parse('<span>&nbsp;</span>',options)constcode=ast.children[0]expect(code.type).toBe(3)expect(code.text).toBe('\xA0')})it(`preservewhitespacein<pre>tagwithwhitespace:'condense'`,function(){constoptions=extend({},condenseOptions)constast=parse('<pre><code>\n<span>hi</span>\n</code><span></span></pre>',options)constcode=ast.children[0]expect(code.children[0].type).toBe(3)expect(code.children[0].text).toBe('\n')expect(code.children[2].type).toBe(3)expect(code.children[2].text).toBe('\n')constspan=ast.children[1]expect(span.children[0].type).toBe(3)expect(span.children[0].text).toBe('')})it(`ignorethefirstnewlinein<pre>tagwithwhitespace:'condense'`,function(){constoptions=extend({},condenseOptions)constast=parse('<div><pre>\nabc</pre>\ndef<pre>\n\nabc</pre></div>',options)constpre=ast.children[0]expect(pre.children[0].type).toBe(3)expect(pre.children[0].text).toBe('abc')consttext=ast.children[1]expect(text.type).toBe(3)expect(text.text).toBe('def')constpre2=ast.children[2]expect(pre2.children[0].type).toBe(3)expect(pre2.children[0].text).toBe('\nabc')})it(`keepfirstnewlineafterunarytagin<pre>withwhitespace:'condense'`,()=>{constoptions=extend({},condenseOptions)constast=parse('<pre>abc<input>\ndef</pre>',options)expect(ast.children[1].type).toBe(1)expect(ast.children[1].tag).toBe('input')expect(ast.children[2].type).toBe(3)expect(ast.children[2].text).toBe('\ndef')})#10152it('notwarnwhenscopedslotusedinsideofdynamiccomponentonregularelement',()=>{parse(`<div><divis="customComp"v-slot="slotProps"></div><div:is="'customComp'"v-slot="slotProps"></div><divv-bind:is="'customComp'"v-slot="slotProps"></div></div>`,baseOptions)expect('v-slotcanonlybeusedoncomponentsor<template>').not.toHaveBeenWarned()parse(`<divis="customComp"><templatev-slot="slotProps"></template></div>`,baseOptions)expect(`<templatev-slot>canonlyappearattherootlevelinsidethereceivingthecomponent`).not.toHaveBeenWarned()})})