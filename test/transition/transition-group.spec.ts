importVuefrom'vue'import{injectStyles,waitForUpdate,nextFrame}from'./helpers'describe('Transitiongroup',()=>{const{duration,buffer}=injectStyles()letelbeforeEach(()=>{el=document.createElement('div')document.body.appendChild(el)})functioncreateBasicVM(useIs?,appear=false){constvm=newVue({template:`<div>${useIs?`<spanis="transition-group">`:`<transition-group${appear?`appear`:``}>`}<divv-for="iteminitems":key="item"class="test">{{item}}</div>${useIs?`</span>`:`</transition-group>`}</div>`,data:{items:['a','b','c']}}).$mount(el)if(!appear){expect(vm.$el.innerHTML).toBe(`<span>`+vm.items.map(i=>`<divclass="test">${i}</div>`).join('')+`</span>`)}returnvm}it('enter',done=>{constvm=createBasicVM()vm.items.push('d','e')waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe(`<span>`+['a','b','c'].map(i=>`<divclass="test">${i}</div>`).join('')+`<divclass="testv-enterv-enter-active">d</div>`+`<divclass="testv-enterv-enter-active">e</div>`+`</span>`)}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe(`<span>`+['a','b','c'].map(i=>`<divclass="test">${i}</div>`).join('')+`<divclass="testv-enter-activev-enter-to">d</div>`+`<divclass="testv-enter-activev-enter-to">e</div>`+`</span>`)}).thenWaitFor(duration+buffer).then(()=>{expect(vm.$el.innerHTML).toBe(`<span>`+vm.items.map(i=>`<divclass="test">${i}</div>`).join('')+`</span>`)}).then(done)})it('leave',done=>{constvm=createBasicVM()vm.items=['b']waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe(`<span>`+`<divclass="testv-leavev-leave-active">a</div>`+`<divclass="test">b</div>`+`<divclass="testv-leavev-leave-active">c</div>`+`</span>`)}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe(`<span>`+`<divclass="testv-leave-activev-leave-to">a</div>`+`<divclass="test">b</div>`+`<divclass="testv-leave-activev-leave-to">c</div>`+`</span>`)}).thenWaitFor(duration+buffer).then(()=>{expect(vm.$el.innerHTML).toBe(`<span>`+vm.items.map(i=>`<divclass="test">${i}</div>`).join('')+`</span>`)}).then(done)})it('enter+leave',done=>{constvm=createBasicVM()vm.items=['b','c','d']waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe(`<span>`+`<divclass="testv-leavev-leave-active">a</div>`+`<divclass="test">b</div>`+`<divclass="test">c</div>`+`<divclass="testv-enterv-enter-active">d</div>`+`</span>`)}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe(`<span>`+`<divclass="testv-leave-activev-leave-to">a</div>`+`<divclass="test">b</div>`+`<divclass="test">c</div>`+`<divclass="testv-enter-activev-enter-to">d</div>`+`</span>`)}).thenWaitFor(duration+buffer).then(()=>{expect(vm.$el.innerHTML).toBe(`<span>`+vm.items.map(i=>`<divclass="test">${i}</div>`).join('')+`</span>`)}).then(done)})it('usewith"is"attribute',done=>{constvm=createBasicVM(true)vm.items=['b','c','d']waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe(`<span>`+`<divclass="testv-leavev-leave-active">a</div>`+`<divclass="test">b</div>`+`<divclass="test">c</div>`+`<divclass="testv-enterv-enter-active">d</div>`+`</span>`)}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe(`<span>`+`<divclass="testv-leave-activev-leave-to">a</div>`+`<divclass="test">b</div>`+`<divclass="test">c</div>`+`<divclass="testv-enter-activev-enter-to">d</div>`+`</span>`)}).thenWaitFor(duration+buffer).then(()=>{expect(vm.$el.innerHTML).toBe(`<span>`+vm.items.map(i=>`<divclass="test">${i}</div>`).join('')+`</span>`)}).then(done)})it('appear',done=>{constvm=createBasicVM(false,true/*appear*/)waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe(`<span>`+vm.items.map(i=>`<divclass="testv-enterv-enter-active">${i}</div>`).join('')+`</span>`)}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe(`<span>`+vm.items.map(i=>`<divclass="testv-enter-activev-enter-to">${i}</div>`).join('')+`</span>`)}).thenWaitFor(duration+buffer).then(()=>{expect(vm.$el.innerHTML).toBe(`<span>`+vm.items.map(i=>`<divclass="test">${i}</div>`).join('')+`</span>`)}).then(done)})it('events',done=>{letnextconstbeforeEnterSpy=jasmine.createSpy()constafterEnterSpy=jasmine.createSpy()constafterLeaveSpy=jasmine.createSpy()constvm=newVue({template:`<div><transition-group@before-enter="beforeEnter"@after-enter="afterEnter"@after-leave="afterLeave"><divv-for="iteminitems":key="item"class="test">{{item}}</div></transition-group></div>`,data:{items:['a','b','c']},methods:{beforeEnter(el){expect(el.textContent).toBe('d')beforeEnterSpy()},afterEnter(el){expect(el.textContent).toBe('d')afterEnterSpy()next()},afterLeave(el){expect(el.textContent).toBe('a')afterLeaveSpy()next()}}}).$mount(el)vm.items.push('d')waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe(`<span>`+`<divclass="test">a</div>`+`<divclass="test">b</div>`+`<divclass="test">c</div>`+`<divclass="testv-enterv-enter-active">d</div>`+`</span>`)expect(beforeEnterSpy.calls.count()).toBe(1)}).thenWaitFor(_next=>{next=_next}).then(()=>{expect(vm.$el.innerHTML).toBe(`<span>`+`<divclass="test">a</div>`+`<divclass="test">b</div>`+`<divclass="test">c</div>`+`<divclass="test">d</div>`+`</span>`)expect(afterEnterSpy.calls.count()).toBe(1)vm.items.shift()}).thenWaitFor(_next=>{next=_next}).then(()=>{expect(vm.$el.innerHTML).toBe(`<span>`+`<divclass="test">b</div>`+`<divclass="test">c</div>`+`<divclass="test">d</div>`+`</span>`)expect(afterLeaveSpy.calls.count()).toBe(1)}).then(done)})it('move',done=>{constvm=newVue({template:`<div><transition-groupname="group"><divv-for="iteminitems":key="item"class="test">{{item}}</div></transition-group></div>`,data:{items:['a','b','c']}}).$mount(el)vm.items=['d','b','a']waitForUpdate(()=>{expect(vm.$el.innerHTML.replace(/\s?style=""(\s?)/g,'$1')).toBe(`<span>`+`<divclass="testgroup-entergroup-enter-active">d</div>`+`<divclass="test">b</div>`+`<divclass="testgroup-move">a</div>`+`<divclass="testgroup-leavegroup-leave-activegroup-move">c</div>`+`</span>`)}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML.replace(/\s?style=""(\s?)/g,'$1')).toBe(`<span>`+`<divclass="testgroup-enter-activegroup-enter-to">d</div>`+`<divclass="test">b</div>`+`<divclass="testgroup-move">a</div>`+`<divclass="testgroup-leave-activegroup-movegroup-leave-to">c</div>`+`</span>`)}).thenWaitFor(duration*2).then(()=>{expect(vm.$el.innerHTML.replace(/\s?style=""(\s?)/g,'$1')).toBe(`<span>`+`<divclass="test">d</div>`+`<divclass="test">b</div>`+`<divclass="test">a</div>`+`</span>`)}).then(done)})it('warnunkeyedchildren',()=>{newVue({template:`<div><transition-group><divv-for="iin3"></div></transition-group></div>`}).$mount()expect('<transition-group>childrenmustbekeyed:<div>').toHaveBeenWarned()})GitHubissue#6006it('shouldworkwithdynamicname',done=>{constvm=newVue({template:`<div><transition-group:name="name"><divv-for="iteminitems":key="item">{{item}}</div></transition-group></div>`,data:{items:['a','b','c'],name:'group'}}).$mount(el)vm.name='invalid-name'vm.items=['b','c','a']waitForUpdate(()=>{expect(vm.$el.innerHTML.replace(/\s?style=""(\s?)/g,'$1')).toBe(`<span>`+`<div>b</div>`+`<div>c</div>`+`<div>a</div>`+`</span>`)vm.name='group'vm.items=['a','b','c']}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML.replace(/\s?style=""(\s?)/g,'$1')).toBe(`<span>`+`<divclass="group-move">a</div>`+`<divclass="group-move">b</div>`+`<divclass="group-move">c</div>`+`</span>`)}).thenWaitFor(duration*2+buffer).then(()=>{expect(vm.$el.innerHTML.replace(/\s?style=""(\s?)/g,'$1')).toBe(`<span>`+`<div>a</div>`+`<div>b</div>`+`<div>c</div>`+`</span>`)}).then(done)})})