importVuefrom'vue'import{injectStyles,waitForUpdate,nextFrame}from'./helpers'describe('Transitionw/KeepAlive',()=>{const{duration,buffer}=injectStyles()letcomponents,one,two,elbeforeEach(()=>{one={template:'<div>one</div>',created:jasmine.createSpy(),mounted:jasmine.createSpy(),activated:jasmine.createSpy(),deactivated:jasmine.createSpy(),destroyed:jasmine.createSpy()}two={template:'<div>two</div>',created:jasmine.createSpy(),mounted:jasmine.createSpy(),activated:jasmine.createSpy(),deactivated:jasmine.createSpy(),destroyed:jasmine.createSpy()}components={one,two}el=document.createElement('div')document.body.appendChild(el)})functionassertHookCalls(component,callCounts){expect([component.created.calls.count(),component.mounted.calls.count(),component.activated.calls.count(),component.deactivated.calls.count(),component.destroyed.calls.count()]).toEqual(callCounts)}it('withtransition-modeout-in',done=>{letnextconstvm=newVue({template:`<div><transitionname="test"mode="out-in"@after-leave="afterLeave"><keep-alive><component:is="view"class="test"></component></keep-alive></transition></div>`,data:{view:'one'},components,methods:{afterLeave(){next()}}}).$mount(el)expect(vm.$el.textContent).toBe('one')assertHookCalls(one,[1,1,1,0,0])assertHookCalls(two,[0,0,0,0,0])vm.view='two'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-leavetest-leave-active">one</div><!---->')assertHookCalls(one,[1,1,1,1,0])assertHookCalls(two,[0,0,0,0,0])}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-leave-activetest-leave-to">one</div><!---->')}).thenWaitFor(_next=>{next=_next}).then(()=>{expect(vm.$el.innerHTML).toBe('<!---->')}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-entertest-enter-active">two</div>')assertHookCalls(one,[1,1,1,1,0])assertHookCalls(two,[1,1,1,0,0])}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-enter-activetest-enter-to">two</div>')}).thenWaitFor(duration+buffer).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="test">two</div>')assertHookCalls(one,[1,1,1,1,0])assertHookCalls(two,[1,1,1,0,0])}).then(()=>{vm.view='one'}).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-leavetest-leave-active">two</div><!---->')assertHookCalls(one,[1,1,1,1,0])assertHookCalls(two,[1,1,1,1,0])}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-leave-activetest-leave-to">two</div><!---->')}).thenWaitFor(_next=>{next=_next}).then(()=>{expect(vm.$el.innerHTML).toBe('<!---->')}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-entertest-enter-active">one</div>')assertHookCalls(one,[1,1,2,1,0])assertHookCalls(two,[1,1,1,1,0])}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-enter-activetest-enter-to">one</div>')}).thenWaitFor(duration+buffer).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="test">one</div>')assertHookCalls(one,[1,1,2,1,0])assertHookCalls(two,[1,1,1,1,0])}).then(done)})it('withtransition-modeout-in+include',done=>{letnextconstvm=newVue({template:`<div><transitionname="test"mode="out-in"@after-leave="afterLeave"><keep-aliveinclude="one"><component:is="view"class="test"></component></keep-alive></transition></div>`,data:{view:'one'},components,methods:{afterLeave(){next()}}}).$mount(el)expect(vm.$el.textContent).toBe('one')assertHookCalls(one,[1,1,1,0,0])assertHookCalls(two,[0,0,0,0,0])vm.view='two'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-leavetest-leave-active">one</div><!---->')assertHookCalls(one,[1,1,1,1,0])assertHookCalls(two,[0,0,0,0,0])}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-leave-activetest-leave-to">one</div><!---->')}).thenWaitFor(_next=>{next=_next}).then(()=>{expect(vm.$el.innerHTML).toBe('<!---->')}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-entertest-enter-active">two</div>')assertHookCalls(one,[1,1,1,1,0])assertHookCalls(two,[1,1,0,0,0])}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-enter-activetest-enter-to">two</div>')}).thenWaitFor(duration+buffer).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="test">two</div>')assertHookCalls(one,[1,1,1,1,0])assertHookCalls(two,[1,1,0,0,0])}).then(()=>{vm.view='one'}).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-leavetest-leave-active">two</div><!---->')assertHookCalls(one,[1,1,1,1,0])assertHookCalls(two,[1,1,0,0,1])}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-leave-activetest-leave-to">two</div><!---->')}).thenWaitFor(_next=>{next=_next}).then(()=>{expect(vm.$el.innerHTML).toBe('<!---->')}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-entertest-enter-active">one</div>')assertHookCalls(one,[1,1,2,1,0])assertHookCalls(two,[1,1,0,0,1])}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-enter-activetest-enter-to">one</div>')}).thenWaitFor(duration+buffer).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="test">one</div>')assertHookCalls(one,[1,1,2,1,0])assertHookCalls(two,[1,1,0,0,1])}).then(done)})it('withtransition-modein-out',done=>{letnextconstvm=newVue({template:`<div><transitionname="test"mode="in-out"@after-enter="afterEnter"><keep-alive><component:is="view"class="test"></component></keep-alive></transition></div>`,data:{view:'one'},components,methods:{afterEnter(){next()}}}).$mount(el)expect(vm.$el.textContent).toBe('one')assertHookCalls(one,[1,1,1,0,0])assertHookCalls(two,[0,0,0,0,0])vm.view='two'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<divclass="test">one</div>'+'<divclass="testtest-entertest-enter-active">two</div>')assertHookCalls(one,[1,1,1,1,0])assertHookCalls(two,[1,1,1,0,0])}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="test">one</div>'+'<divclass="testtest-enter-activetest-enter-to">two</div>')}).thenWaitFor(_next=>{next=_next}).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="test">one</div>'+'<divclass="test">two</div>')}).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-leavetest-leave-active">one</div>'+'<divclass="test">two</div>')}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-leave-activetest-leave-to">one</div>'+'<divclass="test">two</div>')}).thenWaitFor(duration+buffer).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="test">two</div>')assertHookCalls(one,[1,1,1,1,0])assertHookCalls(two,[1,1,1,0,0])}).then(()=>{vm.view='one'}).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="test">two</div>'+'<divclass="testtest-entertest-enter-active">one</div>')assertHookCalls(one,[1,1,2,1,0])assertHookCalls(two,[1,1,1,1,0])}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="test">two</div>'+'<divclass="testtest-enter-activetest-enter-to">one</div>')}).thenWaitFor(_next=>{next=_next}).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="test">two</div>'+'<divclass="test">one</div>')}).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-leavetest-leave-active">two</div>'+'<divclass="test">one</div>')}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-leave-activetest-leave-to">two</div>'+'<divclass="test">one</div>')}).thenWaitFor(duration+buffer).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="test">one</div>')assertHookCalls(one,[1,1,2,1,0])assertHookCalls(two,[1,1,1,1,0])}).then(done)})it('dynamiccomponents,in-outwithearlycancel',done=>{letnextconstvm=newVue({template:`<div><transitionname="test"mode="in-out"@after-enter="afterEnter"><keep-alive><component:is="view"class="test"></component></keep-alive></transition></div>`,data:{view:'one'},components,methods:{afterEnter(){next()}}}).$mount(el)expect(vm.$el.textContent).toBe('one')vm.view='two'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<divclass="test">one</div>'+'<divclass="testtest-entertest-enter-active">two</div>')}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="test">one</div>'+'<divclass="testtest-enter-activetest-enter-to">two</div>')switchagainbeforeenterfinishes,thiscancelsbothenterandleave.vm.view='one'}).then(()=>{1.thependingleaving"one"shouldberemovedinstantly.2.theentering"two"shouldbeplacedintoitsfinalstateinstantly.3.anew"one"iscreatedandenteringexpect(vm.$el.innerHTML).toBe('<divclass="test">two</div>'+'<divclass="testtest-entertest-enter-active">one</div>')}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="test">two</div>'+'<divclass="testtest-enter-activetest-enter-to">one</div>')}).thenWaitFor(_next=>{next=_next}).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="test">two</div>'+'<divclass="test">one</div>')}).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-leavetest-leave-active">two</div>'+'<divclass="test">one</div>')}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-leave-activetest-leave-to">two</div>'+'<divclass="test">one</div>')}).thenWaitFor(duration+buffer).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="test">one</div>')}).then(done)})#4339it('componentwithinnertransition',done=>{constvm=newVue({template:`<div><keep-alive><componentref="test":is="view"></component></keep-alive></div>`,data:{view:'foo'},components:{foo:{template:'<transition><divclass="test">foo</div></transition>'},bar:{template:'<transitionname="test"><divclass="test">bar</div></transition>'}}}).$mount(el)shouldnotapplytransitiononinitialrenderbydefaultexpect(vm.$el.innerHTML).toBe('<divclass="test">foo</div>')vm.view='bar'waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testv-leavev-leave-active">foo</div>'+'<divclass="testtest-entertest-enter-active">bar</div>')}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testv-leave-activev-leave-to">foo</div>'+'<divclass="testtest-enter-activetest-enter-to">bar</div>')}).thenWaitFor(duration+buffer).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="test">bar</div>')vm.view='foo'}).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-leavetest-leave-active">bar</div>'+'<divclass="testv-enterv-enter-active">foo</div>')}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-leave-activetest-leave-to">bar</div>'+'<divclass="testv-enter-activev-enter-to">foo</div>')}).thenWaitFor(duration+buffer).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="test">foo</div>')}).then(done)})it('asynccomponentswithtransition-modeout-in',done=>{constbarResolve=jasmine.createSpy()letnextconstfoo=resolve=>{setTimeout(()=>{resolve(one)Vue.nextTick(next)},duration/2)}constbar=resolve=>{setTimeout(()=>{resolve(two)barResolve()},duration/2)}components={foo,bar}constvm=newVue({template:`<div><transitionname="test"mode="out-in"@after-enter="afterEnter"@after-leave="afterLeave"><keep-alive><component:is="view"class="test"></component></keep-alive></transition></div>`,data:{view:'foo'},components,methods:{afterEnter(){next()},afterLeave(){next()}}}).$mount(el)expect(vm.$el.textContent).toBe('')next=()=>{assertHookCalls(one,[1,1,1,0,0])assertHookCalls(two,[0,0,0,0,0])waitForUpdate(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-entertest-enter-active">one</div>')}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-enter-activetest-enter-to">one</div>')}).thenWaitFor(_next=>{next=_next}).then(()=>{fooafterEntergetcalledexpect(vm.$el.innerHTML).toBe('<divclass="test">one</div>')vm.view='bar'}).thenWaitFor(nextFrame).then(()=>{assertHookCalls(one,[1,1,1,1,0])assertHookCalls(two,[0,0,0,0,0])expect(vm.$el.innerHTML).toBe('<divclass="testtest-leave-activetest-leave-to">one</div><!---->')}).thenWaitFor(_next=>{next=_next}).then(()=>{fooafterLeavegetcalledandbarhasalreadybeenresolvedbeforeafterLeavegetcalledexpect(barResolve.calls.count()).toBe(1)expect(vm.$el.innerHTML).toBe('<!---->')}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-entertest-enter-active">two</div>')assertHookCalls(one,[1,1,1,1,0])assertHookCalls(two,[1,1,1,0,0])}).thenWaitFor(nextFrame).then(()=>{expect(vm.$el.innerHTML).toBe('<divclass="testtest-enter-activetest-enter-to">two</div>')}).thenWaitFor(_next=>{next=_next}).then(()=>{barafterEntergetcalledexpect(vm.$el.innerHTML).toBe('<divclass="test">two</div>')}).then(done)}})#10083it('shouldnotattacheventhandlerrepeatedly',done=>{constvm=newVue({template:`<keep-alive><btnv-if="showBtn"@click.native="add"/></keep-alive>`,data:{showBtn:true,n:0},methods:{add(){this.n++}},components:{btn:{template:'<button>add1</button>'}}}).$mount()constbtn=vm.$elexpect(vm.n).toBe(0)btn.click()expect(vm.n).toBe(1)vm.showBtn=falsewaitForUpdate(()=>{vm.showBtn=true}).then(()=>{btn.click()expect(vm.n).toBe(2)}).then(done)})})