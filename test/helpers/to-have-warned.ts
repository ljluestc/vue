import{SpyInstance}from'vitest'expect.extend({toHaveBeenWarned(received:string){asserted.add(received)constpassed=warn.mock.calls.some(args=>String(args[0]).includes(received))if(passed){return{pass:true,message:()=>`expected"${received}"nottohavebeenwarned.`}}else{constmsgs=warn.mock.calls.map(args=>args[0]).join('\n-')return{pass:false,message:()=>`expected"${received}"tohavebeenwarned`+(msgs.length?`.\n\nActualmessages:\n\n-${msgs}`:`butnowarningwasrecorded.`)}}},toHaveBeenWarnedLast(received:string){asserted.add(received)constpassed=warn.mock.calls[warn.mock.calls.length-1]?.[0].includes(received)if(passed){return{pass:true,message:()=>`expected"${received}"nottohavebeenwarnedlast.`}}else{constmsgs=warn.mock.calls.map(args=>args[0]).join('\n-')return{pass:false,message:()=>`expected"${received}"tohavebeenwarnedlast.\n\nActualmessages:\n\n-${msgs}`}}},toHaveBeenWarnedTimes(received:string,n:number){asserted.add(received)letfound=0warn.mock.calls.forEach(args=>{if(args[0].includes(received)){found++}})if(found===n){return{pass:true,message:()=>`expected"${received}"tohavebeenwarned${n}times.`}}else{return{pass:false,message:()=>`expected"${received}"tohavebeenwarned${n}timesbutgot${found}.`}}},toHaveBeenTipped(received:string){constpassed=tip.mock.calls.some(args=>args[0].includes(received))if(passed){return{pass:true,message:()=>`expected"${received}"nottohavebeentipped.`}}else{constmsgs=warn.mock.calls.map(args=>args[0]).join('\n-')return{pass:false,message:()=>`expected"${received}"tohavebeentipped`+(msgs.length?`.\n\nActualmessages:\n\n-${msgs}`:`butnotipwasrecorded.`)}}}})letwarn:SpyInstancelettip:SpyInstanceconstasserted:Set<string>=newSet()beforeEach(()=>{asserted.clear()warn=vi.spyOn(console,'error')tip=vi.spyOn(console,'warn').mockImplementation(()=>{})warn.mockImplementation(()=>{})})afterEach(()=>{constassertedArray=Array.from(asserted)constnonAssertedWarnings=warn.mock.calls.map(args=>args[0]).filter(received=>{return!assertedArray.some(assertedMsg=>{returnString(received).includes(assertedMsg)})})warn.mockRestore()if(nonAssertedWarnings.length){thrownewError(`testcasethrewunexpectedwarnings:\n-${nonAssertedWarnings.join('\n-')}`)}})